
d:/GDRIVE/School/DEVIT_UNI/2020_T1/SIT210/Projects/SIT210_PROJ/target/1.5.1/argon/SIT210_PROJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000045a4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d85c0  000d85c0  000085c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d85c8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e39c  000d85cc  0001e39c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003e8  2003e408  2003e408  0002e408  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000d8638  000d8638  00028638  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d8660  000d8660  00028660  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000ffac4  00000000  00000000  00028664  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00014e79  00000000  00000000  00128128  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00023331  00000000  00000000  0013cfa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002e80  00000000  00000000  001602d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00005180  00000000  00000000  00163152  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003b933  00000000  00000000  001682d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000348a7  00000000  00000000  001a3c05  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001085b3  00000000  00000000  001d84ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000e78c  00000000  00000000  002e0a60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 f86f 	bl	d8110 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 f874 	bl	d8126 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e39c 	.word	0x2003e39c
   d4048:	000d85cc 	.word	0x000d85cc
   d404c:	2003e408 	.word	0x2003e408
   d4050:	2003e408 	.word	0x2003e408
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 f879 	bl	d6150 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d85b8 	.word	0x000d85b8
   d4080:	000d856c 	.word	0x000d856c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b84e 	b.w	d4124 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa0d 	bl	d44a8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 b81f 	b.w	d60d4 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 bd41 	b.w	d5b1c <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f001 bd3f 	b.w	d5b1c <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 bd45 	b.w	d5b2c <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 bd43 	b.w	d5b2c <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_Z8callbackPcPhj>:
#include "MQTT.h"

MQTT client("test.mosquitto.org", 1883, callback);

void callback(char* topic, byte* payload, unsigned int length) 
{
   d40b6:	4770      	bx	lr

000d40b8 <_Z3rpmv>:
    }
}

void rpm ()     //Interrupt call function
{
    NbTopsFan++;  //This function measures the rising and falling edge of the flow sensor
   d40b8:	4a02      	ldr	r2, [pc, #8]	; (d40c4 <_Z3rpmv+0xc>)
   d40ba:	6813      	ldr	r3, [r2, #0]
   d40bc:	3301      	adds	r3, #1
   d40be:	6013      	str	r3, [r2, #0]
   d40c0:	4770      	bx	lr
   d40c2:	bf00      	nop
   d40c4:	2003e430 	.word	0x2003e430

000d40c8 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40c8:	6803      	ldr	r3, [r0, #0]
   d40ca:	4718      	bx	r3

000d40cc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40cc:	2a01      	cmp	r2, #1
   d40ce:	d002      	beq.n	d40d6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d40d0:	2a02      	cmp	r2, #2
   d40d2:	d002      	beq.n	d40da <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d40d4:	e004      	b.n	d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40d6:	6001      	str	r1, [r0, #0]
	      break;
   d40d8:	e002      	b.n	d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40da:	680b      	ldr	r3, [r1, #0]
   d40dc:	b100      	cbz	r0, d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d40de:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40e0:	2000      	movs	r0, #0
   d40e2:	4770      	bx	lr

000d40e4 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d40e4:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d40e6:	2301      	movs	r3, #1
   d40e8:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d40ea:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d40ec:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
   d40ee:	b10b      	cbz	r3, d40f4 <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
   d40f0:	68c0      	ldr	r0, [r0, #12]
   d40f2:	e006      	b.n	d4102 <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d40f4:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d40f6:	b128      	cbz	r0, d4104 <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d40f8:	6883      	ldr	r3, [r0, #8]
   d40fa:	b90b      	cbnz	r3, d4100 <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
   d40fc:	f003 f83d 	bl	d717a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4100:	68c3      	ldr	r3, [r0, #12]
   d4102:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
   d4104:	2301      	movs	r3, #1
   d4106:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d4108:	2000      	movs	r0, #0
    }
   d410a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
   d410e:	f001 bb61 	b.w	d57d4 <os_thread_exit>

000d4112 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4112:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4114:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4116:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4118:	b113      	cbz	r3, d4120 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d411a:	2203      	movs	r2, #3
   d411c:	4601      	mov	r1, r0
   d411e:	4798      	blx	r3
    }
   d4120:	4620      	mov	r0, r4
   d4122:	bd10      	pop	{r4, pc}

000d4124 <setup>:

//watchdog pointer
ApplicationWatchdog *wd;


void setup() {
   d4124:	b570      	push	{r4, r5, r6, lr}

  client.connect("photonDev");
   d4126:	4939      	ldr	r1, [pc, #228]	; (d420c <setup+0xe8>)
   d4128:	4839      	ldr	r0, [pc, #228]	; (d4210 <setup+0xec>)

//watchdog pointer
ApplicationWatchdog *wd;


void setup() {
   d412a:	b086      	sub	sp, #24

  client.connect("photonDev");
   d412c:	f001 f88e 	bl	d524c <_ZN4MQTT7connectEPKc>

  //application watchdog initialisation
  wd = new ApplicationWatchdog(60000, System.reset, 1536);
   d4130:	2018      	movs	r0, #24
   d4132:	f7ff ffb0 	bl	d4096 <_Znwj>
   d4136:	4604      	mov	r4, r0
   d4138:	2800      	cmp	r0, #0
   d413a:	d04f      	beq.n	d41dc <setup+0xb8>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d413c:	4b35      	ldr	r3, [pc, #212]	; (d4214 <setup+0xf0>)
   d413e:	9302      	str	r3, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4140:	4b35      	ldr	r3, [pc, #212]	; (d4218 <setup+0xf4>)
   d4142:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d4144:	4b35      	ldr	r3, [pc, #212]	; (d421c <setup+0xf8>)
   d4146:	9304      	str	r3, [sp, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4148:	2500      	movs	r5, #0
    static const unsigned DEFAULT_STACK_SIZE = 512;

	ApplicationWatchdog(unsigned timeout_ms, std::function<void(void)> fn, unsigned stack_size=DEFAULT_STACK_SIZE) :
		timeout(timeout_ms),
		timeout_fn(fn),
		thread("appwdt", start, this, OS_THREAD_PRIORITY_CRITICAL, stack_size)
   d414a:	f64e 2360 	movw	r3, #60000	; 0xea60
   d414e:	6003      	str	r3, [r0, #0]
   d4150:	60c5      	str	r5, [r0, #12]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4152:	a902      	add	r1, sp, #8
   d4154:	2202      	movs	r2, #2
   d4156:	3004      	adds	r0, #4
   d4158:	f7ff ffb8 	bl	d40cc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	  _M_invoker = __x._M_invoker;
   d415c:	9b05      	ldr	r3, [sp, #20]
   d415e:	6123      	str	r3, [r4, #16]
	  _M_manager = __x._M_manager;
   d4160:	9b04      	ldr	r3, [sp, #16]
   d4162:	60e3      	str	r3, [r4, #12]
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d4164:	492e      	ldr	r1, [pc, #184]	; (d4220 <setup+0xfc>)
   d4166:	2014      	movs	r0, #20
   d4168:	f002 fff8 	bl	d715c <_ZnwjRKSt9nothrow_t>
   d416c:	b128      	cbz	r0, d417a <setup+0x56>
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d416e:	7405      	strb	r5, [r0, #16]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4170:	6005      	str	r5, [r0, #0]
   d4172:	6045      	str	r5, [r0, #4]
   d4174:	6085      	str	r5, [r0, #8]
   d4176:	60c5      	str	r5, [r0, #12]
   d4178:	7445      	strb	r5, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d417a:	6160      	str	r0, [r4, #20]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d417c:	b1b0      	cbz	r0, d41ac <setup+0x88>
            goto error;
        }
        d_->func = function;
   d417e:	4b29      	ldr	r3, [pc, #164]	; (d4224 <setup+0x100>)
   d4180:	6083      	str	r3, [r0, #8]
   d4182:	6963      	ldr	r3, [r4, #20]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d4184:	4928      	ldr	r1, [pc, #160]	; (d4228 <setup+0x104>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
   d4186:	60dc      	str	r4, [r3, #12]
   d4188:	6960      	ldr	r0, [r4, #20]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d418a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   d418e:	e88d 0009 	stmia.w	sp, {r0, r3}
   d4192:	2209      	movs	r2, #9
   d4194:	4b25      	ldr	r3, [pc, #148]	; (d422c <setup+0x108>)
   d4196:	3004      	adds	r0, #4
   d4198:	f001 faec 	bl	d5774 <os_thread_create>
   d419c:	b930      	cbnz	r0, d41ac <setup+0x88>
   d419e:	6963      	ldr	r3, [r4, #20]
            goto error;
        }
        while (!d_->started) {
   d41a0:	7c1b      	ldrb	r3, [r3, #16]
   d41a2:	b9a3      	cbnz	r3, d41ce <setup+0xaa>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
   d41a4:	2001      	movs	r0, #1
   d41a6:	f001 fab5 	bl	d5714 <HAL_Delay_Milliseconds>
   d41aa:	e7f8      	b.n	d419e <setup+0x7a>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d41ac:	6965      	ldr	r5, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d41ae:	2300      	movs	r3, #0
   d41b0:	6163      	str	r3, [r4, #20]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d41b2:	b165      	cbz	r5, d41ce <setup+0xaa>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d41b4:	682e      	ldr	r6, [r5, #0]
   d41b6:	b136      	cbz	r6, d41c6 <setup+0xa2>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d41b8:	4630      	mov	r0, r6
   d41ba:	f7ff ffaa 	bl	d4112 <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d41be:	2110      	movs	r1, #16
   d41c0:	4630      	mov	r0, r6
   d41c2:	f002 ffc7 	bl	d7154 <_ZdlPvj>
   d41c6:	2114      	movs	r1, #20
   d41c8:	4628      	mov	r0, r5
   d41ca:	f002 ffc3 	bl	d7154 <_ZdlPvj>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d41ce:	f001 fab1 	bl	d5734 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d41d2:	4b17      	ldr	r3, [pc, #92]	; (d4230 <setup+0x10c>)
   d41d4:	6018      	str	r0, [r3, #0]
   d41d6:	a802      	add	r0, sp, #8
   d41d8:	f7ff ff9b 	bl	d4112 <_ZNSt14_Function_baseD1Ev>
   d41dc:	4b15      	ldr	r3, [pc, #84]	; (d4234 <setup+0x110>)
  
  pinMode(FLOWPIN, INPUT); //initializes A0 as an input
   d41de:	2100      	movs	r1, #0
   d41e0:	2013      	movs	r0, #19
void setup() {

  client.connect("photonDev");

  //application watchdog initialisation
  wd = new ApplicationWatchdog(60000, System.reset, 1536);
   d41e2:	601c      	str	r4, [r3, #0]
  
  pinMode(FLOWPIN, INPUT); //initializes A0 as an input
   d41e4:	f002 fee2 	bl	d6fac <pinMode>
  attachInterrupt(FLOWPIN, rpm, RISING); //attach interrupt to A0
   d41e8:	2300      	movs	r3, #0
   d41ea:	2201      	movs	r2, #1
   d41ec:	9300      	str	r3, [sp, #0]
   d41ee:	4912      	ldr	r1, [pc, #72]	; (d4238 <setup+0x114>)
   d41f0:	f04f 33ff 	mov.w	r3, #4294967295
   d41f4:	2013      	movs	r0, #19
   d41f6:	f002 f8ef 	bl	d63d8 <_Z15attachInterrupttPFvvE13InterruptModeah>

  pinMode(VALVEPIN, OUTPUT); //initializes D8 as output
   d41fa:	2101      	movs	r1, #1
   d41fc:	2008      	movs	r0, #8
   d41fe:	f002 fed5 	bl	d6fac <pinMode>

  uv.begin(); //start uv
   d4202:	480e      	ldr	r0, [pc, #56]	; (d423c <setup+0x118>)
   d4204:	f000 fd8d 	bl	d4d22 <_ZN15Adafruit_SI11455beginEv>
}
   d4208:	b006      	add	sp, #24
   d420a:	bd70      	pop	{r4, r5, r6, pc}
   d420c:	000d81ac 	.word	0x000d81ac
   d4210:	2003e440 	.word	0x2003e440
   d4214:	000d5c2b 	.word	0x000d5c2b
   d4218:	000d40c9 	.word	0x000d40c9
   d421c:	000d40cd 	.word	0x000d40cd
   d4220:	000d8504 	.word	0x000d8504
   d4224:	000d70a9 	.word	0x000d70a9
   d4228:	000d81b6 	.word	0x000d81b6
   d422c:	000d40e5 	.word	0x000d40e5
   d4230:	2003e730 	.word	0x2003e730
   d4234:	2003e498 	.word	0x2003e498
   d4238:	000d40b9 	.word	0x000d40b9
   d423c:	2003e49c 	.word	0x2003e49c

000d4240 <_Z7getFlowv>:
    NbTopsFan++;  //This function measures the rising and falling edge of the flow sensor
}


//function for flowmeter
void getFlow(){
   d4240:	b510      	push	{r4, lr}
  NbTopsFan = 0;   //Set NbTops to 0 ready for calculations
   d4242:	4c08      	ldr	r4, [pc, #32]	; (d4264 <_Z7getFlowv+0x24>)
   d4244:	2300      	movs	r3, #0
   d4246:	6023      	str	r3, [r4, #0]
  interrupts();      //Enable interrupt
   d4248:	f002 f8f0 	bl	d642c <_Z10interruptsv>
  delay (1000);   
   d424c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4250:	f001 fefa 	bl	d6048 <delay>
  noInterrupts();      //Disable interrupt
   d4254:	f002 f8e8 	bl	d6428 <_Z12noInterruptsv>
  flowCalc = (NbTopsFan * 60); //(Pulse frequency x 60) / = flow rate in L/hour   
   d4258:	6822      	ldr	r2, [r4, #0]
   d425a:	233c      	movs	r3, #60	; 0x3c
   d425c:	4353      	muls	r3, r2
   d425e:	4a02      	ldr	r2, [pc, #8]	; (d4268 <_Z7getFlowv+0x28>)
   d4260:	6013      	str	r3, [r2, #0]
   d4262:	bd10      	pop	{r4, pc}
   d4264:	2003e430 	.word	0x2003e430
   d4268:	2003e4c4 	.word	0x2003e4c4

000d426c <_Z7getTempv>:
}


//function for temperature
void getTemp(){
   d426c:	b513      	push	{r0, r1, r4, lr}

  //local variables
  float _temp;
  int   i = 0;
   d426e:	2400      	movs	r4, #0

  //whilst temp sesnor returns valid reading keep going
  do 
  {
    _temp = ds18b20.getTemperature();
   d4270:	2100      	movs	r1, #0
   d4272:	480e      	ldr	r0, [pc, #56]	; (d42ac <_Z7getTempv+0x40>)
   d4274:	f000 fc82 	bl	d4b7c <_ZN7DS18B2014getTemperatureEb>
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);
   d4278:	480c      	ldr	r0, [pc, #48]	; (d42ac <_Z7getTempv+0x40>)
  int   i = 0;

  //whilst temp sesnor returns valid reading keep going
  do 
  {
    _temp = ds18b20.getTemperature();
   d427a:	ed8d 0a01 	vstr	s0, [sp, #4]
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);
   d427e:	f000 fc99 	bl	d4bb4 <_ZN7DS18B208crcCheckEv>
   d4282:	ed9d 0a01 	vldr	s0, [sp, #4]
   d4286:	b948      	cbnz	r0, d429c <_Z7getTempv+0x30>
   d4288:	3401      	adds	r4, #1
   d428a:	2c05      	cmp	r4, #5
   d428c:	d1f0      	bne.n	d4270 <_Z7getTempv+0x4>
  {
    celsius = _temp;
  }
  else 
  {
    celsius = NAN;
   d428e:	4908      	ldr	r1, [pc, #32]	; (d42b0 <_Z7getTempv+0x44>)
   d4290:	2000      	movs	r0, #0
   d4292:	4b08      	ldr	r3, [pc, #32]	; (d42b4 <_Z7getTempv+0x48>)
   d4294:	e9c3 0100 	strd	r0, r1, [r3]
  }
}
   d4298:	b002      	add	sp, #8
   d429a:	bd10      	pop	{r4, pc}
  do 
  {
    _temp = ds18b20.getTemperature();
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);

  if (i < MAXRETRY)
   d429c:	2c04      	cmp	r4, #4
   d429e:	d0f6      	beq.n	d428e <_Z7getTempv+0x22>
  {
    celsius = _temp;
   d42a0:	ee10 0a10 	vmov	r0, s0
   d42a4:	f003 fa18 	bl	d76d8 <__aeabi_f2d>
   d42a8:	e7f3      	b.n	d4292 <_Z7getTempv+0x26>
   d42aa:	bf00      	nop
   d42ac:	2003e414 	.word	0x2003e414
   d42b0:	7ff80000 	.word	0x7ff80000
   d42b4:	2003e438 	.word	0x2003e438

000d42b8 <_Z7getSoilv>:
  }
}


//function for soil moisture calculation and control of water valve
void getSoil(){
   d42b8:	b510      	push	{r4, lr}

  //read soil moisture from each sensor
  soilMoistureValue1 = analogRead(MOIST1PIN);
   d42ba:	2012      	movs	r0, #18
   d42bc:	f002 fea0 	bl	d7000 <analogRead>
   d42c0:	4c34      	ldr	r4, [pc, #208]	; (d4394 <_Z7getSoilv+0xdc>)
   d42c2:	6020      	str	r0, [r4, #0]
  soilMoistureValue2 = analogRead(MOIST2PIN);
   d42c4:	2011      	movs	r0, #17
   d42c6:	f002 fe9b 	bl	d7000 <analogRead>
   d42ca:	4b33      	ldr	r3, [pc, #204]	; (d4398 <_Z7getSoilv+0xe0>)
   d42cc:	4a33      	ldr	r2, [pc, #204]	; (d439c <_Z7getSoilv+0xe4>)
   d42ce:	6018      	str	r0, [r3, #0]

  //take average of each sensor
  int soilAvg = ((soilMoistureValue1+soilMoistureValue2)/2);
   d42d0:	6823      	ldr	r3, [r4, #0]
   d42d2:	4418      	add	r0, r3
   d42d4:	2302      	movs	r3, #2
   d42d6:	fb90 f0f3 	sdiv	r0, r0, r3


  //VERY WET if soil sensor more than water calibrated value
  if(soilAvg > WaterValue && soilAvg < (WaterValue+intervals)) 
   d42da:	f240 733a 	movw	r3, #1850	; 0x73a
   d42de:	4298      	cmp	r0, r3
   d42e0:	dd06      	ble.n	d42f0 <_Z7getSoilv+0x38>
   d42e2:	6813      	ldr	r3, [r2, #0]
   d42e4:	f203 7339 	addw	r3, r3, #1849	; 0x739
   d42e8:	4298      	cmp	r0, r3
   d42ea:	dc01      	bgt.n	d42f0 <_Z7getSoilv+0x38>
  {
    moist1 = ("Very Wet");
   d42ec:	492c      	ldr	r1, [pc, #176]	; (d43a0 <_Z7getSoilv+0xe8>)
   d42ee:	e00a      	b.n	d4306 <_Z7getSoilv+0x4e>
    digitalWrite(VALVEPIN, LOW);
    VALVE1 = false;
  }
  //WET if soil sensor more than water calibrated value and less than ait calibrated value
  else if(soilAvg > (WaterValue+intervals) && soilAvg < (AirValue-intervals)) 
   d42f0:	6813      	ldr	r3, [r2, #0]
   d42f2:	f203 723a 	addw	r2, r3, #1850	; 0x73a
   d42f6:	4290      	cmp	r0, r2
   d42f8:	dd10      	ble.n	d431c <_Z7getSoilv+0x64>
   d42fa:	f5c3 623b 	rsb	r2, r3, #2992	; 0xbb0
   d42fe:	3208      	adds	r2, #8
   d4300:	4290      	cmp	r0, r2
   d4302:	da0b      	bge.n	d431c <_Z7getSoilv+0x64>
  {
    moist1 = ("Wet");
   d4304:	4927      	ldr	r1, [pc, #156]	; (d43a4 <_Z7getSoilv+0xec>)
   d4306:	4828      	ldr	r0, [pc, #160]	; (d43a8 <_Z7getSoilv+0xf0>)
   d4308:	f001 fdd4 	bl	d5eb4 <_ZN6StringaSEPKc>
    digitalWrite(VALVEPIN, LOW);
   d430c:	2100      	movs	r1, #0
   d430e:	2008      	movs	r0, #8
   d4310:	f002 fe5d 	bl	d6fce <digitalWrite>
    VALVE1 = false;
   d4314:	2200      	movs	r2, #0
   d4316:	4b25      	ldr	r3, [pc, #148]	; (d43ac <_Z7getSoilv+0xf4>)
   d4318:	701a      	strb	r2, [r3, #0]
   d431a:	bd10      	pop	{r4, pc}
  }
  //DRY if soil sensor less than water calibrated value and more than air calibrated value
  else if(soilAvg  < AirValue && soilAvg > (AirValue-intervals))
   d431c:	f640 32b7 	movw	r2, #2999	; 0xbb7
   d4320:	4290      	cmp	r0, r2
   d4322:	dc20      	bgt.n	d4366 <_Z7getSoilv+0xae>
   d4324:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
   d4328:	3308      	adds	r3, #8
   d432a:	4298      	cmp	r0, r3
   d432c:	dd31      	ble.n	d4392 <_Z7getSoilv+0xda>
  {
    moist1 = ("Dry");
   d432e:	4920      	ldr	r1, [pc, #128]	; (d43b0 <_Z7getSoilv+0xf8>)
   d4330:	481d      	ldr	r0, [pc, #116]	; (d43a8 <_Z7getSoilv+0xf0>)
   d4332:	f001 fdbf 	bl	d5eb4 <_ZN6StringaSEPKc>

    //if temp & UV safe - switch water valve on
    if(celsius < 30 && UVindex < 3)
   d4336:	491f      	ldr	r1, [pc, #124]	; (d43b4 <_Z7getSoilv+0xfc>)
   d4338:	4b1f      	ldr	r3, [pc, #124]	; (d43b8 <_Z7getSoilv+0x100>)
   d433a:	2200      	movs	r2, #0
   d433c:	e9d1 0100 	ldrd	r0, r1, [r1]
   d4340:	f003 fc90 	bl	d7c64 <__aeabi_dcmplt>
   d4344:	b328      	cbz	r0, d4392 <_Z7getSoilv+0xda>
   d4346:	4b1d      	ldr	r3, [pc, #116]	; (d43bc <_Z7getSoilv+0x104>)
   d4348:	ed93 7a00 	vldr	s14, [r3]
   d434c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
   d4350:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4358:	d51b      	bpl.n	d4392 <_Z7getSoilv+0xda>
    {
      digitalWrite(VALVEPIN, HIGH);
   d435a:	2101      	movs	r1, #1
   d435c:	2008      	movs	r0, #8
   d435e:	f002 fe36 	bl	d6fce <digitalWrite>
      VALVE1 = true;
   d4362:	2201      	movs	r2, #1
   d4364:	e7d7      	b.n	d4316 <_Z7getSoilv+0x5e>
    }
  }
  //VERY DRY if soil sensor more than air calibrated value
  else if(soilAvg  > AirValue)
   d4366:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d436a:	4298      	cmp	r0, r3
   d436c:	d011      	beq.n	d4392 <_Z7getSoilv+0xda>
  {
    moist1 = ("Very Dry");
   d436e:	4914      	ldr	r1, [pc, #80]	; (d43c0 <_Z7getSoilv+0x108>)
   d4370:	480d      	ldr	r0, [pc, #52]	; (d43a8 <_Z7getSoilv+0xf0>)
   d4372:	f001 fd9f 	bl	d5eb4 <_ZN6StringaSEPKc>

    //if temp & UV safe - switch water valve on
    if(celsius < 30 && UVindex < 4)
   d4376:	490f      	ldr	r1, [pc, #60]	; (d43b4 <_Z7getSoilv+0xfc>)
   d4378:	4b0f      	ldr	r3, [pc, #60]	; (d43b8 <_Z7getSoilv+0x100>)
   d437a:	2200      	movs	r2, #0
   d437c:	e9d1 0100 	ldrd	r0, r1, [r1]
   d4380:	f003 fc70 	bl	d7c64 <__aeabi_dcmplt>
   d4384:	b128      	cbz	r0, d4392 <_Z7getSoilv+0xda>
   d4386:	4b0d      	ldr	r3, [pc, #52]	; (d43bc <_Z7getSoilv+0x104>)
   d4388:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
   d438c:	ed93 7a00 	vldr	s14, [r3]
   d4390:	e7de      	b.n	d4350 <_Z7getSoilv+0x98>
   d4392:	bd10      	pop	{r4, pc}
   d4394:	2003e40c 	.word	0x2003e40c
   d4398:	2003e410 	.word	0x2003e410
   d439c:	2003e39c 	.word	0x2003e39c
   d43a0:	000d81bd 	.word	0x000d81bd
   d43a4:	000d81c2 	.word	0x000d81c2
   d43a8:	2003e4b4 	.word	0x2003e4b4
   d43ac:	2003e4c8 	.word	0x2003e4c8
   d43b0:	000d81cb 	.word	0x000d81cb
   d43b4:	2003e438 	.word	0x2003e438
   d43b8:	403e0000 	.word	0x403e0000
   d43bc:	2003e4b0 	.word	0x2003e4b0
   d43c0:	000d81c6 	.word	0x000d81c6

000d43c4 <_Z5getUVv>:
  }

}

//function for UV
void getUV(){
   d43c4:	b508      	push	{r3, lr}
    UVindex = uv.readUV();
   d43c6:	4805      	ldr	r0, [pc, #20]	; (d43dc <_Z5getUVv+0x18>)
   d43c8:	f000 fc45 	bl	d4c56 <_ZN15Adafruit_SI11456readUVEv>
   d43cc:	ee07 0a90 	vmov	s15, r0
   d43d0:	4b03      	ldr	r3, [pc, #12]	; (d43e0 <_Z5getUVv+0x1c>)
   d43d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d43d6:	edc3 7a00 	vstr	s15, [r3]
   d43da:	bd08      	pop	{r3, pc}
   d43dc:	2003e49c 	.word	0x2003e49c
   d43e0:	2003e4b0 	.word	0x2003e4b0

000d43e4 <_Z11publishDatav>:
}


//funciton for publishing data to cloud/webhook
void publishData(){
   d43e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  
  client.publish( "Temp", String(celsius));
   d43e6:	4b26      	ldr	r3, [pc, #152]	; (d4480 <_Z11publishDatav+0x9c>)
   d43e8:	4c26      	ldr	r4, [pc, #152]	; (d4484 <_Z11publishDatav+0xa0>)
   d43ea:	ed93 0b00 	vldr	d0, [r3]
   d43ee:	2106      	movs	r1, #6
   d43f0:	4668      	mov	r0, sp
   d43f2:	f001 fd9d 	bl	d5f30 <_ZN6StringC1Edi>
   d43f6:	9a00      	ldr	r2, [sp, #0]
   d43f8:	4923      	ldr	r1, [pc, #140]	; (d4488 <_Z11publishDatav+0xa4>)
   d43fa:	4620      	mov	r0, r4
   d43fc:	f000 ffa6 	bl	d534c <_ZN4MQTT7publishEPKcS1_>
   d4400:	4668      	mov	r0, sp
   d4402:	f001 fce3 	bl	d5dcc <_ZN6StringD1Ev>
  client.publish( "Soil", String(moist1));
   d4406:	4921      	ldr	r1, [pc, #132]	; (d448c <_Z11publishDatav+0xa8>)
   d4408:	4668      	mov	r0, sp
   d440a:	f001 fd48 	bl	d5e9e <_ZN6StringC1ERKS_>
   d440e:	9a00      	ldr	r2, [sp, #0]
   d4410:	491f      	ldr	r1, [pc, #124]	; (d4490 <_Z11publishDatav+0xac>)
   d4412:	4620      	mov	r0, r4
   d4414:	f000 ff9a 	bl	d534c <_ZN4MQTT7publishEPKcS1_>
   d4418:	4668      	mov	r0, sp
   d441a:	f001 fcd7 	bl	d5dcc <_ZN6StringD1Ev>
  client.publish( "UVIdx", String(UVindex));
   d441e:	4b1d      	ldr	r3, [pc, #116]	; (d4494 <_Z11publishDatav+0xb0>)
   d4420:	2106      	movs	r1, #6
   d4422:	ed93 0a00 	vldr	s0, [r3]
   d4426:	4668      	mov	r0, sp
   d4428:	f001 fd68 	bl	d5efc <_ZN6StringC1Efi>
   d442c:	9a00      	ldr	r2, [sp, #0]
   d442e:	491a      	ldr	r1, [pc, #104]	; (d4498 <_Z11publishDatav+0xb4>)
   d4430:	4620      	mov	r0, r4
   d4432:	f000 ff8b 	bl	d534c <_ZN4MQTT7publishEPKcS1_>
   d4436:	4668      	mov	r0, sp
   d4438:	f001 fcc8 	bl	d5dcc <_ZN6StringD1Ev>
  client.publish( "Flow", String(flowCalc));
   d443c:	4b17      	ldr	r3, [pc, #92]	; (d449c <_Z11publishDatav+0xb8>)
   d443e:	220a      	movs	r2, #10
   d4440:	6819      	ldr	r1, [r3, #0]
   d4442:	4668      	mov	r0, sp
   d4444:	f001 fd47 	bl	d5ed6 <_ZN6StringC1Eih>
   d4448:	9a00      	ldr	r2, [sp, #0]
   d444a:	4915      	ldr	r1, [pc, #84]	; (d44a0 <_Z11publishDatav+0xbc>)
   d444c:	4620      	mov	r0, r4
   d444e:	f000 ff7d 	bl	d534c <_ZN4MQTT7publishEPKcS1_>
   d4452:	4668      	mov	r0, sp
   d4454:	f001 fcba 	bl	d5dcc <_ZN6StringD1Ev>
  client.publish("Valve", String(VALVEPIN));
   d4458:	220a      	movs	r2, #10
   d445a:	2108      	movs	r1, #8
   d445c:	4668      	mov	r0, sp
   d445e:	f001 fd3a 	bl	d5ed6 <_ZN6StringC1Eih>
   d4462:	9a00      	ldr	r2, [sp, #0]
   d4464:	490f      	ldr	r1, [pc, #60]	; (d44a4 <_Z11publishDatav+0xc0>)
   d4466:	4620      	mov	r0, r4
   d4468:	f000 ff70 	bl	d534c <_ZN4MQTT7publishEPKcS1_>
   d446c:	4668      	mov	r0, sp
   d446e:	f001 fcad 	bl	d5dcc <_ZN6StringD1Ev>
  Particle.publish( "Temp", String(celsius), 60, PRIVATE);
  Particle.publish( "Soil", String(moist1), 60, PRIVATE);
  Particle.publish( "Valve", String(VALVEPIN), 60, PRIVATE);
  */

  delay(2000);
   d4472:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4476:	f001 fde7 	bl	d6048 <delay>
} 
   d447a:	b004      	add	sp, #16
   d447c:	bd10      	pop	{r4, pc}
   d447e:	bf00      	nop
   d4480:	2003e438 	.word	0x2003e438
   d4484:	2003e440 	.word	0x2003e440
   d4488:	000d81cf 	.word	0x000d81cf
   d448c:	2003e4b4 	.word	0x2003e4b4
   d4490:	000d81d4 	.word	0x000d81d4
   d4494:	2003e4b0 	.word	0x2003e4b0
   d4498:	000d81d9 	.word	0x000d81d9
   d449c:	2003e4c4 	.word	0x2003e4c4
   d44a0:	000d81df 	.word	0x000d81df
   d44a4:	000d81e4 	.word	0x000d81e4

000d44a8 <loop>:
  uv.begin(); //start uv
}



void loop() {
   d44a8:	b508      	push	{r3, lr}

  if (client.isConnected()){
   d44aa:	480c      	ldr	r0, [pc, #48]	; (d44dc <loop+0x34>)
   d44ac:	f000 fdea 	bl	d5084 <_ZN4MQTT11isConnectedEv>
   d44b0:	b190      	cbz	r0, d44d8 <loop+0x30>
      //call individual program functions
      getUV();
   d44b2:	f7ff ff87 	bl	d43c4 <_Z5getUVv>
      getTemp(); 
   d44b6:	f7ff fed9 	bl	d426c <_Z7getTempv>
      getFlow();
   d44ba:	f7ff fec1 	bl	d4240 <_Z7getFlowv>
      getSoil();
   d44be:	f7ff fefb 	bl	d42b8 <_Z7getSoilv>
      publishData();
   d44c2:	f7ff ff8f 	bl	d43e4 <_Z11publishDatav>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d44c6:	f001 f935 	bl	d5734 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d44ca:	4b05      	ldr	r3, [pc, #20]	; (d44e0 <loop+0x38>)
   d44cc:	6018      	str	r0, [r3, #0]
      wd->checkin(); //watchdog checkin
      client.loop();
    }
}
   d44ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      getTemp(); 
      getFlow();
      getSoil();
      publishData();
      wd->checkin(); //watchdog checkin
      client.loop();
   d44d2:	4802      	ldr	r0, [pc, #8]	; (d44dc <loop+0x34>)
   d44d4:	f000 bf81 	b.w	d53da <_ZN4MQTT4loopEv>
   d44d8:	bd08      	pop	{r3, pc}
   d44da:	bf00      	nop
   d44dc:	2003e440 	.word	0x2003e440
   d44e0:	2003e730 	.word	0x2003e730

000d44e4 <_GLOBAL__sub_I_client>:
  Particle.publish( "Soil", String(moist1), 60, PRIVATE);
  Particle.publish( "Valve", String(VALVEPIN), 60, PRIVATE);
  */

  delay(2000);
} 
   d44e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
// Library includes for temp & UV
#include <DS18B20.h>
#include <Adafruit_SI1145.h>
#include "MQTT.h"

MQTT client("test.mosquitto.org", 1883, callback);
   d44e6:	4d1b      	ldr	r5, [pc, #108]	; (d4554 <_GLOBAL__sub_I_client+0x70>)
   d44e8:	4c1b      	ldr	r4, [pc, #108]	; (d4558 <_GLOBAL__sub_I_client+0x74>)
const int AirValue = 3000;   //calibration value for open air
const int WaterValue = 1850;  //calibration value for water
int soilMoistureValue1 = 0;
int soilMoistureValue2 = 0;
int intervals = (AirValue - WaterValue) /3; //hystersis interval 
String moist1;
   d44ea:	4f1c      	ldr	r7, [pc, #112]	; (d455c <_GLOBAL__sub_I_client+0x78>)
   d44ec:	4e1c      	ldr	r6, [pc, #112]	; (d4560 <_GLOBAL__sub_I_client+0x7c>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d44ee:	f001 f8a1 	bl	d5634 <HAL_Pin_Map>
// Library includes for temp & UV
#include <DS18B20.h>
#include <Adafruit_SI1145.h>
#include "MQTT.h"

MQTT client("test.mosquitto.org", 1883, callback);
   d44f2:	4b1c      	ldr	r3, [pc, #112]	; (d4564 <_GLOBAL__sub_I_client+0x80>)
   d44f4:	491c      	ldr	r1, [pc, #112]	; (d4568 <_GLOBAL__sub_I_client+0x84>)
   d44f6:	f240 725b 	movw	r2, #1883	; 0x75b
   d44fa:	4628      	mov	r0, r5
   d44fc:	f000 fcda 	bl	d4eb4 <_ZN4MQTTC1EPctPFvS0_PhjE>
   d4500:	4628      	mov	r0, r5
const int AirValue = 3000;   //calibration value for open air
const int WaterValue = 1850;  //calibration value for water
int soilMoistureValue1 = 0;
int soilMoistureValue2 = 0;
int intervals = (AirValue - WaterValue) /3; //hystersis interval 
String moist1;
   d4502:	4d1a      	ldr	r5, [pc, #104]	; (d456c <_GLOBAL__sub_I_client+0x88>)
// Library includes for temp & UV
#include <DS18B20.h>
#include <Adafruit_SI1145.h>
#include "MQTT.h"

MQTT client("test.mosquitto.org", 1883, callback);
   d4504:	491a      	ldr	r1, [pc, #104]	; (d4570 <_GLOBAL__sub_I_client+0x8c>)
   d4506:	4622      	mov	r2, r4
   d4508:	f002 fe16 	bl	d7138 <__aeabi_atexit>
const int AirValue = 3000;   //calibration value for open air
const int WaterValue = 1850;  //calibration value for water
int soilMoistureValue1 = 0;
int soilMoistureValue2 = 0;
int intervals = (AirValue - WaterValue) /3; //hystersis interval 
String moist1;
   d450c:	4639      	mov	r1, r7
   d450e:	4628      	mov	r0, r5
   d4510:	f001 fca3 	bl	d5e5a <_ZN6StringC1EPK19__FlashStringHelper>
   d4514:	4628      	mov	r0, r5
String moist2;
   d4516:	4d17      	ldr	r5, [pc, #92]	; (d4574 <_GLOBAL__sub_I_client+0x90>)
const int AirValue = 3000;   //calibration value for open air
const int WaterValue = 1850;  //calibration value for water
int soilMoistureValue1 = 0;
int soilMoistureValue2 = 0;
int intervals = (AirValue - WaterValue) /3; //hystersis interval 
String moist1;
   d4518:	4622      	mov	r2, r4
   d451a:	4631      	mov	r1, r6
   d451c:	f002 fe0c 	bl	d7138 <__aeabi_atexit>
String moist2;
   d4520:	4639      	mov	r1, r7
   d4522:	4628      	mov	r0, r5
   d4524:	f001 fc99 	bl	d5e5a <_ZN6StringC1EPK19__FlashStringHelper>
   d4528:	4628      	mov	r0, r5

//object for temperature
DS18B20 ds18b20(TEMPPIN, true);
   d452a:	4d13      	ldr	r5, [pc, #76]	; (d4578 <_GLOBAL__sub_I_client+0x94>)
const int WaterValue = 1850;  //calibration value for water
int soilMoistureValue1 = 0;
int soilMoistureValue2 = 0;
int intervals = (AirValue - WaterValue) /3; //hystersis interval 
String moist1;
String moist2;
   d452c:	4622      	mov	r2, r4
   d452e:	4631      	mov	r1, r6
   d4530:	f002 fe02 	bl	d7138 <__aeabi_atexit>

//object for temperature
DS18B20 ds18b20(TEMPPIN, true);
   d4534:	2201      	movs	r2, #1
   d4536:	210f      	movs	r1, #15
   d4538:	4628      	mov	r0, r5
   d453a:	f000 fa27 	bl	d498c <_ZN7DS18B20C1Etb>
   d453e:	4622      	mov	r2, r4
   d4540:	4628      	mov	r0, r5
   d4542:	490e      	ldr	r1, [pc, #56]	; (d457c <_GLOBAL__sub_I_client+0x98>)
   d4544:	f002 fdf8 	bl	d7138 <__aeabi_atexit>
double celsius;

//object for UV
Adafruit_SI1145 uv = Adafruit_SI1145();
   d4548:	480d      	ldr	r0, [pc, #52]	; (d4580 <_GLOBAL__sub_I_client+0x9c>)
  Particle.publish( "Soil", String(moist1), 60, PRIVATE);
  Particle.publish( "Valve", String(VALVEPIN), 60, PRIVATE);
  */

  delay(2000);
} 
   d454a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
//object for temperature
DS18B20 ds18b20(TEMPPIN, true);
double celsius;

//object for UV
Adafruit_SI1145 uv = Adafruit_SI1145();
   d454e:	f000 bb39 	b.w	d4bc4 <_ZN15Adafruit_SI1145C1Ev>
   d4552:	bf00      	nop
   d4554:	2003e440 	.word	0x2003e440
   d4558:	2003e408 	.word	0x2003e408
   d455c:	000d82e8 	.word	0x000d82e8
   d4560:	000d5dcd 	.word	0x000d5dcd
   d4564:	000d40b7 	.word	0x000d40b7
   d4568:	000d81ea 	.word	0x000d81ea
   d456c:	2003e4b4 	.word	0x2003e4b4
   d4570:	000d55e7 	.word	0x000d55e7
   d4574:	2003e4a0 	.word	0x2003e4a0
   d4578:	2003e414 	.word	0x2003e414
   d457c:	000d49e9 	.word	0x000d49e9
   d4580:	2003e49c 	.word	0x2003e49c

000d4584 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4584:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4586:	6803      	ldr	r3, [r0, #0]
   d4588:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d458a:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d458c:	d904      	bls.n	d4598 <nrf_gpio_pin_port_decode+0x14>
   d458e:	4a07      	ldr	r2, [pc, #28]	; (d45ac <nrf_gpio_pin_port_decode+0x28>)
   d4590:	2100      	movs	r1, #0
   d4592:	200a      	movs	r0, #10
   d4594:	f001 fa36 	bl	d5a04 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d4598:	6823      	ldr	r3, [r4, #0]
   d459a:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d459c:	bf83      	ittte	hi
   d459e:	f003 031f 	andhi.w	r3, r3, #31
   d45a2:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d45a4:	4802      	ldrhi	r0, [pc, #8]	; (d45b0 <nrf_gpio_pin_port_decode+0x2c>)
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d45a6:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d45aa:	bd10      	pop	{r4, pc}
   d45ac:	000d5725 	.word	0x000d5725
   d45b0:	50000300 	.word	0x50000300

000d45b4 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>:
      return HAL_GPIO_Read(_pin);
    }

  #else

    inline void digitalWriteFastLow() {
   d45b4:	b507      	push	{r0, r1, r2, lr}
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d45b6:	4b0b      	ldr	r3, [pc, #44]	; (d45e4 <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x30>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	0100      	lsls	r0, r0, #4
   d45bc:	1819      	adds	r1, r3, r0
   d45be:	5c1a      	ldrb	r2, [r3, r0]
   d45c0:	784b      	ldrb	r3, [r1, #1]
   d45c2:	a802      	add	r0, sp, #8
   d45c4:	f003 031f 	and.w	r3, r3, #31
   d45c8:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d45cc:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d45d0:	f7ff ffd8 	bl	d4584 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d45d4:	9a01      	ldr	r2, [sp, #4]
   d45d6:	2301      	movs	r3, #1
   d45d8:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d45da:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
      pinResetFast(_pin);
    }
   d45de:	b003      	add	sp, #12
   d45e0:	f85d fb04 	ldr.w	pc, [sp], #4
   d45e4:	2003e4cc 	.word	0x2003e4cc

000d45e8 <_ZN7OneWire20digitalWriteFastHighEv.isra.1>:

    inline void digitalWriteFastHigh() {
   d45e8:	b507      	push	{r0, r1, r2, lr}

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d45ea:	4b0b      	ldr	r3, [pc, #44]	; (d4618 <_ZN7OneWire20digitalWriteFastHighEv.isra.1+0x30>)
   d45ec:	681b      	ldr	r3, [r3, #0]
   d45ee:	0100      	lsls	r0, r0, #4
   d45f0:	1819      	adds	r1, r3, r0
   d45f2:	5c1a      	ldrb	r2, [r3, r0]
   d45f4:	784b      	ldrb	r3, [r1, #1]
   d45f6:	a802      	add	r0, sp, #8
   d45f8:	f003 031f 	and.w	r3, r3, #31
   d45fc:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d4600:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4604:	f7ff ffbe 	bl	d4584 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d4608:	9a01      	ldr	r2, [sp, #4]
   d460a:	2301      	movs	r3, #1
   d460c:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d460e:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
      pinSetFast(_pin);
    }
   d4612:	b003      	add	sp, #12
   d4614:	f85d fb04 	ldr.w	pc, [sp], #4
   d4618:	2003e4cc 	.word	0x2003e4cc

000d461c <_ZN7OneWire15digitalReadFastEv.isra.4>:
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
    }

    inline uint8_t digitalReadFast(void){
   d461c:	b513      	push	{r0, r1, r4, lr}
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d461e:	4b0f      	ldr	r3, [pc, #60]	; (d465c <_ZN7OneWire15digitalReadFastEv.isra.4+0x40>)
   d4620:	681b      	ldr	r3, [r3, #0]
   d4622:	0100      	lsls	r0, r0, #4
   d4624:	181a      	adds	r2, r3, r0
   d4626:	5c1c      	ldrb	r4, [r3, r0]
   d4628:	7853      	ldrb	r3, [r2, #1]
   d462a:	a802      	add	r0, sp, #8
   d462c:	f003 031f 	and.w	r3, r3, #31
   d4630:	ea43 1444 	orr.w	r4, r3, r4, lsl #5
   d4634:	f840 4d04 	str.w	r4, [r0, #-4]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4638:	f7ff ffa4 	bl	d4584 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d463c:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
   d4640:	a802      	add	r0, sp, #8
   d4642:	f840 4d08 	str.w	r4, [r0, #-8]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4646:	f7ff ff9d 	bl	d4584 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d464a:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
      return pinReadFast(_pin);
   d464e:	9800      	ldr	r0, [sp, #0]
   d4650:	fa23 f000 	lsr.w	r0, r3, r0
    }
   d4654:	f000 0001 	and.w	r0, r0, #1
   d4658:	b002      	add	sp, #8
   d465a:	bd10      	pop	{r4, pc}
   d465c:	2003e4cc 	.word	0x2003e4cc

000d4660 <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
   d4660:	b538      	push	{r3, r4, r5, lr}
   d4662:	4604      	mov	r4, r0
   d4664:	460d      	mov	r5, r1
{
    pinMode(pin, INPUT);
   d4666:	4628      	mov	r0, r5
   d4668:	2100      	movs	r1, #0
   d466a:	f002 fc9f 	bl	d6fac <pinMode>
    _pin = pin;
   d466e:	8025      	strh	r5, [r4, #0]
}
   d4670:	4620      	mov	r0, r4
   d4672:	bd38      	pop	{r3, r4, r5, pc}

000d4674 <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
   d4674:	b570      	push	{r4, r5, r6, lr}
   d4676:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
   d4678:	f001 fed6 	bl	d6428 <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d467c:	2100      	movs	r1, #0
   d467e:	8828      	ldrh	r0, [r5, #0]
   d4680:	f000 ffe8 	bl	d5654 <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
   d4684:	f001 fed2 	bl	d642c <_Z10interruptsv>
   d4688:	247d      	movs	r4, #125	; 0x7d
   d468a:	3c01      	subs	r4, #1
    // wait until the wire is high... just in case
    do
    {
        if (--retries == 0)
   d468c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d4690:	d02d      	beq.n	d46ee <_ZN7OneWire5resetEv+0x7a>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4692:	2002      	movs	r0, #2
   d4694:	f001 f846 	bl	d5724 <HAL_Delay_Microseconds>
            return 0;

        delayMicroseconds(2);
    } while (!digitalReadFast());
   d4698:	8828      	ldrh	r0, [r5, #0]
   d469a:	f7ff ffbf 	bl	d461c <_ZN7OneWire15digitalReadFastEv.isra.4>

    noInterrupts();
    pinModeFastInput();
    interrupts();
    // wait until the wire is high... just in case
    do
   d469e:	2800      	cmp	r0, #0
   d46a0:	d0f3      	beq.n	d468a <_ZN7OneWire5resetEv+0x16>
            return 0;

        delayMicroseconds(2);
    } while (!digitalReadFast());

    noInterrupts();
   d46a2:	f001 fec1 	bl	d6428 <_Z12noInterruptsv>

    digitalWriteFastLow();
   d46a6:	8828      	ldrh	r0, [r5, #0]
   d46a8:	f7ff ff84 	bl	d45b4 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d46ac:	2101      	movs	r1, #1
   d46ae:	8828      	ldrh	r0, [r5, #0]
   d46b0:	f000 ffd0 	bl	d5654 <HAL_Pin_Mode>
    pinModeFastOutput(); // drive output low

    interrupts();
   d46b4:	f001 feba 	bl	d642c <_Z10interruptsv>
   d46b8:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   d46bc:	f001 f832 	bl	d5724 <HAL_Delay_Microseconds>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
   d46c0:	f001 f840 	bl	d5744 <HAL_disable_irq>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d46c4:	2100      	movs	r1, #0
   d46c6:	4606      	mov	r6, r0
   d46c8:	8828      	ldrh	r0, [r5, #0]
   d46ca:	f000 ffc3 	bl	d5654 <HAL_Pin_Mode>
   d46ce:	2046      	movs	r0, #70	; 0x46
   d46d0:	f001 f828 	bl	d5724 <HAL_Delay_Microseconds>
    {
        pinModeFastInput(); // allow it to float

        delayMicroseconds(70);

        r = !digitalReadFast();
   d46d4:	8828      	ldrh	r0, [r5, #0]
   d46d6:	f7ff ffa1 	bl	d461c <_ZN7OneWire15digitalReadFastEv.isra.4>
   d46da:	fab0 f480 	clz	r4, r0
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
   d46de:	4630      	mov	r0, r6
   d46e0:	f001 f838 	bl	d5754 <HAL_enable_irq>
   d46e4:	f44f 70cd 	mov.w	r0, #410	; 0x19a
   d46e8:	0964      	lsrs	r4, r4, #5
   d46ea:	f001 f81b 	bl	d5724 <HAL_Delay_Microseconds>
    }

    delayMicroseconds(410);

    return r;
}
   d46ee:	4620      	mov	r0, r4
   d46f0:	bd70      	pop	{r4, r5, r6, pc}

000d46f2 <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
   d46f2:	b570      	push	{r4, r5, r6, lr}
    if (v & 1)
   d46f4:	f011 0601 	ands.w	r6, r1, #1

    return r;
}

void OneWire::write_bit(uint8_t v)
{
   d46f8:	4604      	mov	r4, r0
    if (v & 1)
   d46fa:	d015      	beq.n	d4728 <_ZN7OneWire9write_bitEh+0x36>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
   d46fc:	f001 f822 	bl	d5744 <HAL_disable_irq>
   d4700:	4605      	mov	r5, r0
    {
        ATOMIC_BLOCK()
        {
            digitalWriteFastLow();
   d4702:	8820      	ldrh	r0, [r4, #0]
   d4704:	f7ff ff56 	bl	d45b4 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4708:	2101      	movs	r1, #1
   d470a:	8820      	ldrh	r0, [r4, #0]
   d470c:	f000 ffa2 	bl	d5654 <HAL_Pin_Mode>
   d4710:	2001      	movs	r0, #1
   d4712:	f001 f807 	bl	d5724 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4716:	2100      	movs	r1, #0
   d4718:	8820      	ldrh	r0, [r4, #0]
   d471a:	f000 ff9b 	bl	d5654 <HAL_Pin_Mode>
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
   d471e:	4628      	mov	r0, r5
   d4720:	f001 f818 	bl	d5754 <HAL_enable_irq>
   d4724:	203b      	movs	r0, #59	; 0x3b
   d4726:	e014      	b.n	d4752 <_ZN7OneWire9write_bitEh+0x60>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
   d4728:	f001 f80c 	bl	d5744 <HAL_disable_irq>
   d472c:	4605      	mov	r5, r0
    }
    else
    {
        ATOMIC_BLOCK()
        {
            digitalWriteFastLow();
   d472e:	8820      	ldrh	r0, [r4, #0]
   d4730:	f7ff ff40 	bl	d45b4 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4734:	2101      	movs	r1, #1
   d4736:	8820      	ldrh	r0, [r4, #0]
   d4738:	f000 ff8c 	bl	d5654 <HAL_Pin_Mode>
   d473c:	2041      	movs	r0, #65	; 0x41
   d473e:	f000 fff1 	bl	d5724 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4742:	4631      	mov	r1, r6
   d4744:	8820      	ldrh	r0, [r4, #0]
   d4746:	f000 ff85 	bl	d5654 <HAL_Pin_Mode>
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
   d474a:	4628      	mov	r0, r5
   d474c:	f001 f802 	bl	d5754 <HAL_enable_irq>
   d4750:	2005      	movs	r0, #5

            pinModeFastInput(); // float high
        }
        delayMicroseconds(5);
    }
}
   d4752:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d4756:	f000 bfe5 	b.w	d5724 <HAL_Delay_Microseconds>

000d475a <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
   d475a:	b538      	push	{r3, r4, r5, lr}
   d475c:	4604      	mov	r4, r0

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
   d475e:	f000 fff1 	bl	d5744 <HAL_disable_irq>
   d4762:	4605      	mov	r5, r0
    uint8_t r;

    ATOMIC_BLOCK()
    {
        digitalWriteFastLow();
   d4764:	8820      	ldrh	r0, [r4, #0]
   d4766:	f7ff ff25 	bl	d45b4 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d476a:	2101      	movs	r1, #1
   d476c:	8820      	ldrh	r0, [r4, #0]
   d476e:	f000 ff71 	bl	d5654 <HAL_Pin_Mode>
   d4772:	2001      	movs	r0, #1
   d4774:	f000 ffd6 	bl	d5724 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4778:	2100      	movs	r1, #0
   d477a:	8820      	ldrh	r0, [r4, #0]
   d477c:	f000 ff6a 	bl	d5654 <HAL_Pin_Mode>
   d4780:	200d      	movs	r0, #13
   d4782:	f000 ffcf 	bl	d5724 <HAL_Delay_Microseconds>

        pinModeFastInput(); // let pin float, pull up will raise

        delayMicroseconds(13);

        r = digitalReadFast();
   d4786:	8820      	ldrh	r0, [r4, #0]
   d4788:	f7ff ff48 	bl	d461c <_ZN7OneWire15digitalReadFastEv.isra.4>
   d478c:	4604      	mov	r4, r0
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
   d478e:	4628      	mov	r0, r5
   d4790:	f000 ffe0 	bl	d5754 <HAL_enable_irq>
   d4794:	202e      	movs	r0, #46	; 0x2e
   d4796:	f000 ffc5 	bl	d5724 <HAL_Delay_Microseconds>
    }

    delayMicroseconds(46);

    return r;
}
   d479a:	4620      	mov	r0, r4
   d479c:	bd38      	pop	{r3, r4, r5, pc}

000d479e <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */)
{
   d479e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d47a2:	4605      	mov	r5, r0
   d47a4:	4688      	mov	r8, r1
   d47a6:	4617      	mov	r7, r2
   d47a8:	2608      	movs	r6, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d47aa:	2401      	movs	r4, #1
    {
        OneWire::write_bit((bitMask & v) ? 1 : 0);
   d47ac:	ea18 0f04 	tst.w	r8, r4
   d47b0:	bf14      	ite	ne
   d47b2:	2101      	movne	r1, #1
   d47b4:	2100      	moveq	r1, #0
   d47b6:	4628      	mov	r0, r5
   d47b8:	f7ff ff9b 	bl	d46f2 <_ZN7OneWire9write_bitEh>
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */)
{
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d47bc:	0064      	lsls	r4, r4, #1
   d47be:	3e01      	subs	r6, #1
   d47c0:	b2e4      	uxtb	r4, r4
   d47c2:	d1f3      	bne.n	d47ac <_ZN7OneWire5writeEhh+0xe>
    {
        OneWire::write_bit((bitMask & v) ? 1 : 0);
    }

    if (power)
   d47c4:	b167      	cbz	r7, d47e0 <_ZN7OneWire5writeEhh+0x42>
    {
        noInterrupts();
   d47c6:	f001 fe2f 	bl	d6428 <_Z12noInterruptsv>

        digitalWriteFastHigh();
   d47ca:	8828      	ldrh	r0, [r5, #0]
   d47cc:	f7ff ff0c 	bl	d45e8 <_ZN7OneWire20digitalWriteFastHighEv.isra.1>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d47d0:	8828      	ldrh	r0, [r5, #0]
   d47d2:	2101      	movs	r1, #1
   d47d4:	f000 ff3e 	bl	d5654 <HAL_Pin_Mode>
        pinModeFastOutput(); // Drive pin High when power is True

        interrupts();
    }
}
   d47d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        noInterrupts();

        digitalWriteFastHigh();
        pinModeFastOutput(); // Drive pin High when power is True

        interrupts();
   d47dc:	f001 be26 	b.w	d642c <_Z10interruptsv>
   d47e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d47e4 <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read()
{
   d47e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d47e6:	4607      	mov	r7, r0
   d47e8:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
   d47ea:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d47ec:	2401      	movs	r4, #1
    {
        if (OneWire::read_bit())
   d47ee:	4638      	mov	r0, r7
   d47f0:	f7ff ffb3 	bl	d475a <_ZN7OneWire8read_bitEv>
   d47f4:	b100      	cbz	r0, d47f8 <_ZN7OneWire4readEv+0x14>
            r |= bitMask;
   d47f6:	4325      	orrs	r5, r4
uint8_t OneWire::read()
{
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d47f8:	0064      	lsls	r4, r4, #1
   d47fa:	3e01      	subs	r6, #1
   d47fc:	b2e4      	uxtb	r4, r4
   d47fe:	d1f6      	bne.n	d47ee <_ZN7OneWire4readEv+0xa>
        if (OneWire::read_bit())
            r |= bitMask;
    }

    return r;
}
   d4800:	4628      	mov	r0, r5
   d4802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4804 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d4804:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55); // Choose ROM
   d4806:	2200      	movs	r2, #0

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d4808:	460c      	mov	r4, r1
    uint8_t i;

    write(0x55); // Choose ROM
   d480a:	2155      	movs	r1, #85	; 0x55

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d480c:	4606      	mov	r6, r0
    uint8_t i;

    write(0x55); // Choose ROM
   d480e:	f7ff ffc6 	bl	d479e <_ZN7OneWire5writeEhh>
   d4812:	1e65      	subs	r5, r4, #1
   d4814:	3407      	adds	r4, #7

    for (i = 0; i < 8; i++)
        write(rom[i]);
   d4816:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d481a:	2200      	movs	r2, #0
   d481c:	4630      	mov	r0, r6
   d481e:	f7ff ffbe 	bl	d479e <_ZN7OneWire5writeEhh>
{
    uint8_t i;

    write(0x55); // Choose ROM

    for (i = 0; i < 8; i++)
   d4822:	42a5      	cmp	r5, r4
   d4824:	d1f7      	bne.n	d4816 <_ZN7OneWire6selectEPKh+0x12>
        write(rom[i]);
}
   d4826:	bd70      	pop	{r4, r5, r6, pc}

000d4828 <_ZN7OneWire4skipEv>:
//
// Do a ROM skip
//
void OneWire::skip()
{
    write(0xCC); // Skip ROM
   d4828:	2200      	movs	r2, #0
   d482a:	21cc      	movs	r1, #204	; 0xcc
   d482c:	f7ff bfb7 	b.w	d479e <_ZN7OneWire5writeEhh>

000d4830 <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    // reset the search state
    LastDiscrepancy = 0;
   d4830:	2300      	movs	r3, #0
   d4832:	7283      	strb	r3, [r0, #10]
    LastDeviceFlag = FALSE;
   d4834:	7303      	strb	r3, [r0, #12]
    LastFamilyDiscrepancy = 0;
   d4836:	72c3      	strb	r3, [r0, #11]
   d4838:	f100 020a 	add.w	r2, r0, #10
   d483c:	3002      	adds	r0, #2

    for (int i = 7;; i--)
    {
        ROM_NO[i] = 0;
   d483e:	f802 3d01 	strb.w	r3, [r2, #-1]!
        if (i == 0)
   d4842:	4282      	cmp	r2, r0
   d4844:	d1fb      	bne.n	d483e <_ZN7OneWire12reset_searchEv+0xe>
            break;
    }
}
   d4846:	4770      	bx	lr

000d4848 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d4848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d484c:	7b05      	ldrb	r5, [r0, #12]
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d484e:	4604      	mov	r4, r0
   d4850:	4688      	mov	r8, r1
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d4852:	2d00      	cmp	r5, #0
   d4854:	d15e      	bne.n	d4914 <_ZN7OneWire6searchEPh+0xcc>
    {
        // 1-Wire reset
        if (!reset())
   d4856:	f7ff ff0d 	bl	d4674 <_ZN7OneWire5resetEv>
   d485a:	b920      	cbnz	r0, d4866 <_ZN7OneWire6searchEPh+0x1e>
        {
            // reset the search
            LastDiscrepancy = 0;
   d485c:	72a0      	strb	r0, [r4, #10]
            LastDeviceFlag = FALSE;
   d485e:	7320      	strb	r0, [r4, #12]
            LastFamilyDiscrepancy = 0;
   d4860:	72e0      	strb	r0, [r4, #11]

            return FALSE;
   d4862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }

        // issue the search command
        write(0xF0);
   d4866:	462a      	mov	r2, r5
   d4868:	21f0      	movs	r1, #240	; 0xf0
   d486a:	4620      	mov	r0, r4
   d486c:	f7ff ff97 	bl	d479e <_ZN7OneWire5writeEhh>

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
    rom_byte_number = 0;
    rom_byte_mask = 1;
   d4870:	2601      	movs	r6, #1

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
   d4872:	46aa      	mov	sl, r5
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d4874:	4637      	mov	r7, r6

        // loop to do the search
        do
        {
            // read a bit and its complement
            id_bit = read_bit();
   d4876:	4620      	mov	r0, r4
   d4878:	f7ff ff6f 	bl	d475a <_ZN7OneWire8read_bitEv>
   d487c:	4681      	mov	r9, r0
            cmp_id_bit = read_bit();
   d487e:	4620      	mov	r0, r4
   d4880:	f7ff ff6b 	bl	d475a <_ZN7OneWire8read_bitEv>

            // check for no devices on 1-wire
            if ((id_bit == 1) && (cmp_id_bit == 1))
   d4884:	f1b9 0f01 	cmp.w	r9, #1
   d4888:	d102      	bne.n	d4890 <_ZN7OneWire6searchEPh+0x48>
   d488a:	2801      	cmp	r0, #1
   d488c:	d11b      	bne.n	d48c6 <_ZN7OneWire6searchEPh+0x7e>
   d488e:	e037      	b.n	d4900 <_ZN7OneWire6searchEPh+0xb8>
                break;
            }
            else
            {
                // all devices coupled have 0 or 1
                if (id_bit != cmp_id_bit)
   d4890:	4581      	cmp	r9, r0
   d4892:	eb04 0305 	add.w	r3, r4, r5
   d4896:	d11e      	bne.n	d48d6 <_ZN7OneWire6searchEPh+0x8e>
                }
                else
                {
                    // if this discrepancy if before the Last Discrepancy
                    // on a previous next then pick the same as last time
                    if (id_bit_number < LastDiscrepancy)
   d4898:	7aa2      	ldrb	r2, [r4, #10]
   d489a:	4297      	cmp	r7, r2
   d489c:	d207      	bcs.n	d48ae <_ZN7OneWire6searchEPh+0x66>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
   d489e:	789a      	ldrb	r2, [r3, #2]
   d48a0:	4216      	tst	r6, r2
   d48a2:	bf14      	ite	ne
   d48a4:	f04f 0901 	movne.w	r9, #1
   d48a8:	f04f 0900 	moveq.w	r9, #0
   d48ac:	e004      	b.n	d48b8 <_ZN7OneWire6searchEPh+0x70>
                    else
                        // if equal to last pick 1, if not then pick 0
                        search_direction = (id_bit_number == LastDiscrepancy);
   d48ae:	bf0c      	ite	eq
   d48b0:	f04f 0901 	moveq.w	r9, #1
   d48b4:	f04f 0900 	movne.w	r9, #0

                    // if 0 was picked then record its position in LastZero
                    if (search_direction == 0)
   d48b8:	f1b9 0f00 	cmp.w	r9, #0
   d48bc:	d103      	bne.n	d48c6 <_ZN7OneWire6searchEPh+0x7e>
                    {
                        last_zero = id_bit_number;

                        // check for Last discrepancy in family
                        if (last_zero < 9)
   d48be:	2f08      	cmp	r7, #8
   d48c0:	d808      	bhi.n	d48d4 <_ZN7OneWire6searchEPh+0x8c>
                            LastFamilyDiscrepancy = last_zero;
   d48c2:	72e7      	strb	r7, [r4, #11]
   d48c4:	e006      	b.n	d48d4 <_ZN7OneWire6searchEPh+0x8c>
                }

                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                    ROM_NO[rom_byte_number] |= rom_byte_mask;
   d48c6:	1962      	adds	r2, r4, r5
   d48c8:	f04f 0901 	mov.w	r9, #1
   d48cc:	7893      	ldrb	r3, [r2, #2]
   d48ce:	4333      	orrs	r3, r6
   d48d0:	7093      	strb	r3, [r2, #2]
   d48d2:	e004      	b.n	d48de <_ZN7OneWire6searchEPh+0x96>
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d48d4:	46ba      	mov	sl, r7
                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                    ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                    ROM_NO[rom_byte_number] &= ~rom_byte_mask;
   d48d6:	789a      	ldrb	r2, [r3, #2]
   d48d8:	ea22 0206 	bic.w	r2, r2, r6
   d48dc:	709a      	strb	r2, [r3, #2]

                // serial number search direction write bit
                write_bit(search_direction);
   d48de:	4649      	mov	r1, r9
   d48e0:	4620      	mov	r0, r4

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;
   d48e2:	0076      	lsls	r6, r6, #1
                    ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                    ROM_NO[rom_byte_number] &= ~rom_byte_mask;

                // serial number search direction write bit
                write_bit(search_direction);
   d48e4:	f7ff ff05 	bl	d46f2 <_ZN7OneWire9write_bitEh>
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
   d48e8:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                {
                    rom_byte_number++;
   d48ec:	bf04      	itt	eq
   d48ee:	3501      	addeq	r5, #1
   d48f0:	b2ed      	uxtbeq	r5, r5
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d48f2:	f107 0701 	add.w	r7, r7, #1

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
   d48f6:	bf08      	it	eq
   d48f8:	2601      	moveq	r6, #1
                }
            }
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
   d48fa:	2d07      	cmp	r5, #7
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d48fc:	b2ff      	uxtb	r7, r7
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
                }
            }
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
   d48fe:	d9ba      	bls.n	d4876 <_ZN7OneWire6searchEPh+0x2e>

        // if the search was successful then
        if (!(id_bit_number < 65))
   d4900:	2f40      	cmp	r7, #64	; 0x40
   d4902:	d907      	bls.n	d4914 <_ZN7OneWire6searchEPh+0xcc>
        {
            // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
            LastDiscrepancy = last_zero;
   d4904:	f884 a00a 	strb.w	sl, [r4, #10]

            // check for last device
            if (LastDiscrepancy == 0)
   d4908:	f1ba 0f00 	cmp.w	sl, #0
   d490c:	d112      	bne.n	d4934 <_ZN7OneWire6searchEPh+0xec>
                LastDeviceFlag = TRUE;
   d490e:	2301      	movs	r3, #1
   d4910:	7323      	strb	r3, [r4, #12]
   d4912:	e00f      	b.n	d4934 <_ZN7OneWire6searchEPh+0xec>
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0])
    {
        LastDiscrepancy = 0;
   d4914:	2000      	movs	r0, #0
   d4916:	72a0      	strb	r0, [r4, #10]
        LastDeviceFlag = FALSE;
   d4918:	7320      	strb	r0, [r4, #12]
        LastFamilyDiscrepancy = 0;
   d491a:	72e0      	strb	r0, [r4, #11]
   d491c:	1c63      	adds	r3, r4, #1
   d491e:	f108 38ff 	add.w	r8, r8, #4294967295
   d4922:	3409      	adds	r4, #9
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++)
        newAddr[i] = ROM_NO[i];
   d4924:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   d4928:	f808 2f01 	strb.w	r2, [r8, #1]!
        LastDeviceFlag = FALSE;
        LastFamilyDiscrepancy = 0;
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++)
   d492c:	42a3      	cmp	r3, r4
   d492e:	d1f9      	bne.n	d4924 <_ZN7OneWire6searchEPh+0xdc>
   d4930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            search_result = TRUE;
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0])
   d4934:	78a3      	ldrb	r3, [r4, #2]
   d4936:	2b00      	cmp	r3, #0
   d4938:	d0ec      	beq.n	d4914 <_ZN7OneWire6searchEPh+0xcc>
   d493a:	2001      	movs	r0, #1
   d493c:	e7ee      	b.n	d491c <_ZN7OneWire6searchEPh+0xd4>

000d493e <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8(uint8_t *addr, uint8_t len)
{
   d493e:	b530      	push	{r4, r5, lr}
   d4940:	4605      	mov	r5, r0
    uint8_t crc = 0;
   d4942:	2000      	movs	r0, #0

    while (len--)
   d4944:	3901      	subs	r1, #1
   d4946:	b2c9      	uxtb	r1, r1
   d4948:	29ff      	cmp	r1, #255	; 0xff
   d494a:	d013      	beq.n	d4974 <_ZN7OneWire4crc8EPhh+0x36>
    {
        uint8_t inbyte = *addr++;
   d494c:	f815 4b01 	ldrb.w	r4, [r5], #1
   d4950:	2208      	movs	r2, #8
        for (uint8_t i = 8; i; i--)
        {
            uint8_t mix = (crc ^ inbyte) & 0x01;
   d4952:	ea80 0304 	eor.w	r3, r0, r4
            crc >>= 1;
            if (mix)
   d4956:	f013 0f01 	tst.w	r3, #1
   d495a:	ea4f 0050 	mov.w	r0, r0, lsr #1
                crc ^= 0x8C;
   d495e:	bf1c      	itt	ne
   d4960:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
   d4964:	b2d8      	uxtbne	r0, r3
   d4966:	1e53      	subs	r3, r2, #1
    uint8_t crc = 0;

    while (len--)
    {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--)
   d4968:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
        {
            uint8_t mix = (crc ^ inbyte) & 0x01;
            crc >>= 1;
            if (mix)
                crc ^= 0x8C;
            inbyte >>= 1;
   d496c:	ea4f 0454 	mov.w	r4, r4, lsr #1
    uint8_t crc = 0;

    while (len--)
    {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--)
   d4970:	d1ef      	bne.n	d4952 <_ZN7OneWire4crc8EPhh+0x14>
   d4972:	e7e7      	b.n	d4944 <_ZN7OneWire4crc8EPhh+0x6>
            inbyte >>= 1;
        }
    }

    return crc;
}
   d4974:	bd30      	pop	{r4, r5, pc}
	...

000d4978 <_GLOBAL__sub_I__ZN7OneWireC2Et>:
        cdata <<= 1;
        crc ^= cdata;
    }

    return crc;
}
   d4978:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d497a:	f000 fe5b 	bl	d5634 <HAL_Pin_Map>
   d497e:	4b01      	ldr	r3, [pc, #4]	; (d4984 <_GLOBAL__sub_I__ZN7OneWireC2Et+0xc>)
   d4980:	6018      	str	r0, [r3, #0]
   d4982:	bd08      	pop	{r3, pc}
   d4984:	2003e4cc 	.word	0x2003e4cc

000d4988 <_GLOBAL__sub_I__ZN4DS18C2Etb>:
   d4988:	f000 be54 	b.w	d5634 <HAL_Pin_Map>

000d498c <_ZN7DS18B20C1Etb>:
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d498c:	b570      	push	{r4, r5, r6, lr}
   d498e:	4604      	mov	r4, r0
{
  memset(_data, 0, sizeof(_data));
   d4990:	2300      	movs	r3, #0
   d4992:	6063      	str	r3, [r4, #4]
   d4994:	60a3      	str	r3, [r4, #8]
   d4996:	60e3      	str	r3, [r4, #12]
  memset(_addr, 0, sizeof(_addr));
   d4998:	6123      	str	r3, [r4, #16]
   d499a:	6163      	str	r3, [r4, #20]
  _dataCRC    = 0; 
   d499c:	7623      	strb	r3, [r4, #24]
  _readCRC    = 0;
   d499e:	7663      	strb	r3, [r4, #25]
  _singleDrop = singleDrop;
   d49a0:	76a2      	strb	r2, [r4, #26]
  ds          = new OneWire(pin);
   d49a2:	200e      	movs	r0, #14
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d49a4:	460e      	mov	r6, r1
  memset(_data, 0, sizeof(_data));
  memset(_addr, 0, sizeof(_addr));
  _dataCRC    = 0; 
  _readCRC    = 0;
  _singleDrop = singleDrop;
  ds          = new OneWire(pin);
   d49a6:	f7ff fb76 	bl	d4096 <_Znwj>
   d49aa:	4605      	mov	r5, r0
   d49ac:	b110      	cbz	r0, d49b4 <_ZN7DS18B20C1Etb+0x28>
   d49ae:	4631      	mov	r1, r6
   d49b0:	f7ff fe56 	bl	d4660 <_ZN7OneWireC1Et>
   d49b4:	6025      	str	r5, [r4, #0]
}
   d49b6:	4620      	mov	r0, r4
   d49b8:	bd70      	pop	{r4, r5, r6, pc}

000d49ba <_ZN7DS18B206searchEPh>:
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
   d49ba:	b538      	push	{r3, r4, r5, lr}
  boolean isSuccess = ds->search(_addr);
   d49bc:	f100 0510 	add.w	r5, r0, #16
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
   d49c0:	460c      	mov	r4, r1
  boolean isSuccess = ds->search(_addr);
   d49c2:	6800      	ldr	r0, [r0, #0]
   d49c4:	4629      	mov	r1, r5
   d49c6:	f7ff ff3f 	bl	d4848 <_ZN7OneWire6searchEPh>
   d49ca:	1e03      	subs	r3, r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
   d49cc:	bf1d      	ittte	ne
   d49ce:	682b      	ldrne	r3, [r5, #0]
   d49d0:	6023      	strne	r3, [r4, #0]
   d49d2:	686b      	ldrne	r3, [r5, #4]
  else           memset(addr, 0, 8);
   d49d4:	6023      	streq	r3, [r4, #0]
   d49d6:	6063      	str	r3, [r4, #4]
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
  boolean isSuccess = ds->search(_addr);
   d49d8:	bf14      	ite	ne
   d49da:	2001      	movne	r0, #1
   d49dc:	2000      	moveq	r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
  else           memset(addr, 0, 8);
  return isSuccess;
}
   d49de:	bd38      	pop	{r3, r4, r5, pc}

000d49e0 <_ZN7DS18B206searchEv>:
  ds          = new OneWire(pin);
}

boolean DS18B20::search()
{
  return search(_addr);
   d49e0:	f100 0110 	add.w	r1, r0, #16
   d49e4:	f7ff bfe9 	b.w	d49ba <_ZN7DS18B206searchEPh>

000d49e8 <_ZN7DS18B20D1Ev>:
  if (isSuccess) memcpy(addr, _addr, 8);
  else           memset(addr, 0, 8);
  return isSuccess;
}

DS18B20::~DS18B20()
   d49e8:	b510      	push	{r4, lr}
{
  delete(ds);
   d49ea:	210e      	movs	r1, #14
  if (isSuccess) memcpy(addr, _addr, 8);
  else           memset(addr, 0, 8);
  return isSuccess;
}

DS18B20::~DS18B20()
   d49ec:	4604      	mov	r4, r0
{
  delete(ds);
   d49ee:	6800      	ldr	r0, [r0, #0]
   d49f0:	f002 fbb0 	bl	d7154 <_ZdlPvj>
}
   d49f4:	4620      	mov	r0, r4
   d49f6:	bd10      	pop	{r4, pc}

000d49f8 <_ZN7DS18B2011resetsearchEv>:
  memcpy(_addr, addr, 8);
}

void DS18B20::resetsearch()
{
  ds->reset_search();
   d49f8:	6800      	ldr	r0, [r0, #0]
   d49fa:	f7ff bf19 	b.w	d4830 <_ZN7OneWire12reset_searchEv>
	...

000d4a00 <_ZN7DS18B2014getTemperatureEPhb>:
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
   d4a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
   d4a02:	7e83      	ldrb	r3, [r0, #26]
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
   d4a04:	4604      	mov	r4, r0
   d4a06:	460d      	mov	r5, r1
   d4a08:	4616      	mov	r6, r2
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
   d4a0a:	b91b      	cbnz	r3, d4a14 <_ZN7DS18B2014getTemperatureEPhb+0x14>
   d4a0c:	780b      	ldrb	r3, [r1, #0]
   d4a0e:	2b00      	cmp	r3, #0
   d4a10:	f000 80a6 	beq.w	d4b60 <_ZN7DS18B2014getTemperatureEPhb+0x160>

  ds->reset();
   d4a14:	6820      	ldr	r0, [r4, #0]
   d4a16:	f7ff fe2d 	bl	d4674 <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
   d4a1a:	7ea3      	ldrb	r3, [r4, #26]
   d4a1c:	b123      	cbz	r3, d4a28 <_ZN7DS18B2014getTemperatureEPhb+0x28>
   d4a1e:	b91e      	cbnz	r6, d4a28 <_ZN7DS18B2014getTemperatureEPhb+0x28>
    ds->skip();
   d4a20:	6820      	ldr	r0, [r4, #0]
   d4a22:	f7ff ff01 	bl	d4828 <_ZN7OneWire4skipEv>
   d4a26:	e003      	b.n	d4a30 <_ZN7DS18B2014getTemperatureEPhb+0x30>
  else
    ds->select(addr);
   d4a28:	4629      	mov	r1, r5
   d4a2a:	6820      	ldr	r0, [r4, #0]
   d4a2c:	f7ff feea 	bl	d4804 <_ZN7OneWire6selectEPKh>

  ds->write(0x44);        // start conversion, with parasite power on at the end
   d4a30:	2200      	movs	r2, #0
   d4a32:	2144      	movs	r1, #68	; 0x44
   d4a34:	6820      	ldr	r0, [r4, #0]
   d4a36:	f7ff feb2 	bl	d479e <_ZN7OneWire5writeEhh>
  delay(750);     // maybe 750ms is enough, maybe not
   d4a3a:	f240 20ee 	movw	r0, #750	; 0x2ee
   d4a3e:	f001 fb03 	bl	d6048 <delay>
                  // we might do a ds.depower() here, but the reset will take care of it.
  ds->reset();
   d4a42:	6820      	ldr	r0, [r4, #0]
   d4a44:	f7ff fe16 	bl	d4674 <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
   d4a48:	7ea3      	ldrb	r3, [r4, #26]
   d4a4a:	b123      	cbz	r3, d4a56 <_ZN7DS18B2014getTemperatureEPhb+0x56>
   d4a4c:	b91e      	cbnz	r6, d4a56 <_ZN7DS18B2014getTemperatureEPhb+0x56>
    ds->skip();
   d4a4e:	6820      	ldr	r0, [r4, #0]
   d4a50:	f7ff feea 	bl	d4828 <_ZN7OneWire4skipEv>
   d4a54:	e003      	b.n	d4a5e <_ZN7DS18B2014getTemperatureEPhb+0x5e>
  else
    ds->select(addr);
   d4a56:	4629      	mov	r1, r5
   d4a58:	6820      	ldr	r0, [r4, #0]
   d4a5a:	f7ff fed3 	bl	d4804 <_ZN7OneWire6selectEPKh>

  ds->write(0xBE);         // Read Scratchpad
   d4a5e:	2200      	movs	r2, #0
   d4a60:	21be      	movs	r1, #190	; 0xbe
   d4a62:	6820      	ldr	r0, [r4, #0]
   d4a64:	f7ff fe9b 	bl	d479e <_ZN7OneWire5writeEhh>
  if (addr[0] == WIRE_DS2438) {
   d4a68:	782b      	ldrb	r3, [r5, #0]
   d4a6a:	2b26      	cmp	r3, #38	; 0x26
   d4a6c:	d104      	bne.n	d4a78 <_ZN7DS18B2014getTemperatureEPhb+0x78>
    ds->write(0x00,0);     // DS2438 requires a page to read
   d4a6e:	2200      	movs	r2, #0
   d4a70:	4611      	mov	r1, r2
   d4a72:	6820      	ldr	r0, [r4, #0]
   d4a74:	f7ff fe93 	bl	d479e <_ZN7OneWire5writeEhh>
   d4a78:	1ce6      	adds	r6, r4, #3
   d4a7a:	f104 070c 	add.w	r7, r4, #12
  }

  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
   d4a7e:	6820      	ldr	r0, [r4, #0]
   d4a80:	f7ff feb0 	bl	d47e4 <_ZN7OneWire4readEv>
   d4a84:	f806 0f01 	strb.w	r0, [r6, #1]!
  ds->write(0xBE);         // Read Scratchpad
  if (addr[0] == WIRE_DS2438) {
    ds->write(0x00,0);     // DS2438 requires a page to read
  }

  for (int i = 0; i < 9; i++)
   d4a88:	42be      	cmp	r6, r7
   d4a8a:	d1f8      	bne.n	d4a7e <_ZN7DS18B2014getTemperatureEPhb+0x7e>
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
   d4a8c:	2108      	movs	r1, #8
   d4a8e:	1d20      	adds	r0, r4, #4
   d4a90:	f7ff ff55 	bl	d493e <_ZN7OneWire4crc8EPhh>
  _readCRC = (_data[8]);
   d4a94:	7b23      	ldrb	r3, [r4, #12]

  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
   d4a96:	7620      	strb	r0, [r4, #24]
  _readCRC = (_data[8]);
  if (_dataCRC != _readCRC) return NAN;
   d4a98:	4298      	cmp	r0, r3
  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
  _readCRC = (_data[8]);
   d4a9a:	7663      	strb	r3, [r4, #25]
  if (_dataCRC != _readCRC) return NAN;
   d4a9c:	d160      	bne.n	d4b60 <_ZN7DS18B2014getTemperatureEPhb+0x160>
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
   d4a9e:	782b      	ldrb	r3, [r5, #0]
   d4aa0:	2b22      	cmp	r3, #34	; 0x22
   d4aa2:	d019      	beq.n	d4ad8 <_ZN7DS18B2014getTemperatureEPhb+0xd8>
   d4aa4:	d814      	bhi.n	d4ad0 <_ZN7DS18B2014getTemperatureEPhb+0xd0>
   d4aa6:	2b10      	cmp	r3, #16
   d4aa8:	d15a      	bne.n	d4b60 <_ZN7DS18B2014getTemperatureEPhb+0x160>
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
   d4aaa:	7ae2      	ldrb	r2, [r4, #11]

  int16_t raw;
  switch(addr[0]) 
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d4aac:	88a3      	ldrh	r3, [r4, #4]
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
   d4aae:	2a10      	cmp	r2, #16
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d4ab0:	bf08      	it	eq
   d4ab2:	7aa2      	ldrbeq	r2, [r4, #10]

  int16_t raw;
  switch(addr[0]) 
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d4ab4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d4ab8:	bf02      	ittt	eq
   d4aba:	f023 030f 	biceq.w	r3, r3, #15
   d4abe:	f1c2 020c 	rsbeq	r2, r2, #12
   d4ac2:	189b      	addeq	r3, r3, r2
   d4ac4:	b21b      	sxth	r3, r3
      celsius = (float)raw / 16.0;
   d4ac6:	ee00 3a10 	vmov	s0, r3
   d4aca:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
      break;
   d4ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
   d4ad0:	2b26      	cmp	r3, #38	; 0x26
   d4ad2:	d01f      	beq.n	d4b14 <_ZN7DS18B2014getTemperatureEPhb+0x114>
   d4ad4:	2b28      	cmp	r3, #40	; 0x28
   d4ad6:	d143      	bne.n	d4b60 <_ZN7DS18B2014getTemperatureEPhb+0x160>
      celsius = (float)raw / 16.0;
      break;

    case WIRE_DS1822:
    case WIRE_DS18B20:
      switch (_data[4] & 0x60)
   d4ad8:	7a22      	ldrb	r2, [r4, #8]
   d4ada:	7923      	ldrb	r3, [r4, #4]
   d4adc:	f002 0260 	and.w	r2, r2, #96	; 0x60
   d4ae0:	2a20      	cmp	r2, #32
   d4ae2:	d005      	beq.n	d4af0 <_ZN7DS18B2014getTemperatureEPhb+0xf0>
   d4ae4:	2a40      	cmp	r2, #64	; 0x40
   d4ae6:	d006      	beq.n	d4af6 <_ZN7DS18B2014getTemperatureEPhb+0xf6>
   d4ae8:	b942      	cbnz	r2, d4afc <_ZN7DS18B2014getTemperatureEPhb+0xfc>
      { // lower resolution means shorter conversion time, low bits need masking
        case 0x00: _data[0] &= ~0b111; break;           //  9 bit  93.75 ms
   d4aea:	f023 0307 	bic.w	r3, r3, #7
   d4aee:	e004      	b.n	d4afa <_ZN7DS18B2014getTemperatureEPhb+0xfa>
        case 0x20: _data[0] &= ~0b011; break;           // 10 bit 187.50 ms
   d4af0:	f023 0303 	bic.w	r3, r3, #3
   d4af4:	e001      	b.n	d4afa <_ZN7DS18B2014getTemperatureEPhb+0xfa>
        case 0x40: _data[0] &= ~0b001; break;           // 11 bit 375.00 ms
   d4af6:	f023 0301 	bic.w	r3, r3, #1
   d4afa:	7123      	strb	r3, [r4, #4]
        default: break;                                 // 12 bit 750.00 ms 
      }
      celsius = (int16_t)((_data[1] << 8) | _data[0]) / 16.0;
   d4afc:	7923      	ldrb	r3, [r4, #4]
   d4afe:	7960      	ldrb	r0, [r4, #5]
   d4b00:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d4b04:	b200      	sxth	r0, r0
   d4b06:	f002 fdd5 	bl	d76b4 <__aeabi_i2d>
   d4b0a:	2200      	movs	r2, #0
   d4b0c:	4b16      	ldr	r3, [pc, #88]	; (d4b68 <_ZN7DS18B2014getTemperatureEPhb+0x168>)
   d4b0e:	f002 fe37 	bl	d7780 <__aeabi_dmul>
   d4b12:	e020      	b.n	d4b56 <_ZN7DS18B2014getTemperatureEPhb+0x156>
      break;
      
    case WIRE_DS2438:
      celsius = (int16_t)_data[2] + ((float)(_data[1] >> 3) / 32.0) * (_data[2] & 0x80 ? -1.0 : 1.0);           
   d4b14:	79a5      	ldrb	r5, [r4, #6]
   d4b16:	4628      	mov	r0, r5
   d4b18:	f002 fdcc 	bl	d76b4 <__aeabi_i2d>
   d4b1c:	4606      	mov	r6, r0
   d4b1e:	7960      	ldrb	r0, [r4, #5]
   d4b20:	10c0      	asrs	r0, r0, #3
   d4b22:	ee07 0a90 	vmov	s15, r0
   d4b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4b2a:	460f      	mov	r7, r1
   d4b2c:	ee17 0a90 	vmov	r0, s15
   d4b30:	f002 fdd2 	bl	d76d8 <__aeabi_f2d>
   d4b34:	2200      	movs	r2, #0
   d4b36:	4b0d      	ldr	r3, [pc, #52]	; (d4b6c <_ZN7DS18B2014getTemperatureEPhb+0x16c>)
   d4b38:	f002 fe22 	bl	d7780 <__aeabi_dmul>
   d4b3c:	460b      	mov	r3, r1
   d4b3e:	0629      	lsls	r1, r5, #24
   d4b40:	4602      	mov	r2, r0
   d4b42:	bf4c      	ite	mi
   d4b44:	490a      	ldrmi	r1, [pc, #40]	; (d4b70 <_ZN7DS18B2014getTemperatureEPhb+0x170>)
   d4b46:	490b      	ldrpl	r1, [pc, #44]	; (d4b74 <_ZN7DS18B2014getTemperatureEPhb+0x174>)
   d4b48:	2000      	movs	r0, #0
   d4b4a:	f002 fe19 	bl	d7780 <__aeabi_dmul>
   d4b4e:	4632      	mov	r2, r6
   d4b50:	463b      	mov	r3, r7
   d4b52:	f002 fc63 	bl	d741c <__adddf3>
   d4b56:	f003 f8cd 	bl	d7cf4 <__aeabi_d2f>
   d4b5a:	ee00 0a10 	vmov	s0, r0
      break;
   d4b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      
    default:
      celsius = NAN;
   d4b60:	ed9f 0a05 	vldr	s0, [pc, #20]	; d4b78 <_ZN7DS18B2014getTemperatureEPhb+0x178>
      break;                            
  }
  
  return celsius;
}
   d4b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4b66:	bf00      	nop
   d4b68:	3fb00000 	.word	0x3fb00000
   d4b6c:	3fa00000 	.word	0x3fa00000
   d4b70:	bff00000 	.word	0xbff00000
   d4b74:	3ff00000 	.word	0x3ff00000
   d4b78:	7fc00000 	.word	0x7fc00000

000d4b7c <_ZN7DS18B2014getTemperatureEb>:

  return "impossible";
}

float DS18B20::getTemperature(bool forceSelect)
{
   d4b7c:	b538      	push	{r3, r4, r5, lr}
  if (_singleDrop && _addr[0] == WIRE_UNKNOWN)
   d4b7e:	7e83      	ldrb	r3, [r0, #26]

  return "impossible";
}

float DS18B20::getTemperature(bool forceSelect)
{
   d4b80:	4604      	mov	r4, r0
   d4b82:	460d      	mov	r5, r1
  if (_singleDrop && _addr[0] == WIRE_UNKNOWN)
   d4b84:	b93b      	cbnz	r3, d4b96 <_ZN7DS18B2014getTemperatureEb+0x1a>
  {
    resetsearch();
    if (!search()) return NAN;
  }
  return getTemperature(_addr, forceSelect);
   d4b86:	462a      	mov	r2, r5
   d4b88:	f104 0110 	add.w	r1, r4, #16
   d4b8c:	4620      	mov	r0, r4
}
   d4b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (_singleDrop && _addr[0] == WIRE_UNKNOWN)
  {
    resetsearch();
    if (!search()) return NAN;
  }
  return getTemperature(_addr, forceSelect);
   d4b92:	f7ff bf35 	b.w	d4a00 <_ZN7DS18B2014getTemperatureEPhb>
  return "impossible";
}

float DS18B20::getTemperature(bool forceSelect)
{
  if (_singleDrop && _addr[0] == WIRE_UNKNOWN)
   d4b96:	7c03      	ldrb	r3, [r0, #16]
   d4b98:	2b00      	cmp	r3, #0
   d4b9a:	d1f4      	bne.n	d4b86 <_ZN7DS18B2014getTemperatureEb+0xa>
  {
    resetsearch();
   d4b9c:	f7ff ff2c 	bl	d49f8 <_ZN7DS18B2011resetsearchEv>
    if (!search()) return NAN;
   d4ba0:	4620      	mov	r0, r4
   d4ba2:	f7ff ff1d 	bl	d49e0 <_ZN7DS18B206searchEv>
   d4ba6:	2800      	cmp	r0, #0
   d4ba8:	d1ed      	bne.n	d4b86 <_ZN7DS18B2014getTemperatureEb+0xa>
  }
  return getTemperature(_addr, forceSelect);
}
   d4baa:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4bb0 <_ZN7DS18B2014getTemperatureEb+0x34>
   d4bae:	bd38      	pop	{r3, r4, r5, pc}
   d4bb0:	7fc00000 	.word	0x7fc00000

000d4bb4 <_ZN7DS18B208crcCheckEv>:
  return celsius * 1.8 + 32.0;
}

bool DS18B20::crcCheck()
{
  return (_dataCRC == _readCRC);
   d4bb4:	7e02      	ldrb	r2, [r0, #24]
   d4bb6:	7e40      	ldrb	r0, [r0, #25]
}
   d4bb8:	1a13      	subs	r3, r2, r0
   d4bba:	4258      	negs	r0, r3
   d4bbc:	4158      	adcs	r0, r3
   d4bbe:	4770      	bx	lr

000d4bc0 <_GLOBAL__sub_I__ZN7DS18B20C2Etb>:
   d4bc0:	f000 bd38 	b.w	d5634 <HAL_Pin_Map>

000d4bc4 <_ZN15Adafruit_SI1145C1Ev>:

#include "application.h"
#include "Adafruit_SI1145.h"

Adafruit_SI1145::Adafruit_SI1145() {
  _addr = SI1145_ADDR;
   d4bc4:	2360      	movs	r3, #96	; 0x60
   d4bc6:	7003      	strb	r3, [r0, #0]
}
   d4bc8:	4770      	bx	lr

000d4bca <_ZN15Adafruit_SI11455read8Eh>:
  return read8(SI1145_REG_PARAMRD);
}

/*********************************************************************/

uint8_t  Adafruit_SI1145::read8(uint8_t reg) {
   d4bca:	b538      	push	{r3, r4, r5, lr}
   d4bcc:	4604      	mov	r4, r0
   d4bce:	460d      	mov	r5, r1
  uint16_t val;
    Wire.beginTransmission(_addr);
   d4bd0:	f002 fa8c 	bl	d70ec <_Z19__fetch_global_Wirev>
   d4bd4:	7821      	ldrb	r1, [r4, #0]
   d4bd6:	f001 fd3c 	bl	d6652 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   d4bda:	f002 fa87 	bl	d70ec <_Z19__fetch_global_Wirev>
   d4bde:	6803      	ldr	r3, [r0, #0]
   d4be0:	4629      	mov	r1, r5
   d4be2:	689b      	ldr	r3, [r3, #8]
   d4be4:	4798      	blx	r3
    Wire.endTransmission();
   d4be6:	f002 fa81 	bl	d70ec <_Z19__fetch_global_Wirev>
   d4bea:	f001 fd3a 	bl	d6662 <_ZN7TwoWire15endTransmissionEv>

    Wire.requestFrom((uint8_t)_addr, (uint8_t)1);  
   d4bee:	f002 fa7d 	bl	d70ec <_Z19__fetch_global_Wirev>
   d4bf2:	2201      	movs	r2, #1
   d4bf4:	7821      	ldrb	r1, [r4, #0]
   d4bf6:	f001 fd29 	bl	d664c <_ZN7TwoWire11requestFromEhj>
    return Wire.read();
   d4bfa:	f002 fa77 	bl	d70ec <_Z19__fetch_global_Wirev>
   d4bfe:	6803      	ldr	r3, [r0, #0]
   d4c00:	695b      	ldr	r3, [r3, #20]
   d4c02:	4798      	blx	r3
}
   d4c04:	b2c0      	uxtb	r0, r0
   d4c06:	bd38      	pop	{r3, r4, r5, pc}

000d4c08 <_ZN15Adafruit_SI11456read16Eh>:

uint16_t Adafruit_SI1145::read16(uint8_t a) {
   d4c08:	b538      	push	{r3, r4, r5, lr}
   d4c0a:	4604      	mov	r4, r0
   d4c0c:	460d      	mov	r5, r1
  uint16_t ret;

  Wire.beginTransmission(_addr); // start transmission to device 
   d4c0e:	f002 fa6d 	bl	d70ec <_Z19__fetch_global_Wirev>
   d4c12:	7821      	ldrb	r1, [r4, #0]
   d4c14:	f001 fd1d 	bl	d6652 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(a); // sends register address to read from
   d4c18:	f002 fa68 	bl	d70ec <_Z19__fetch_global_Wirev>
   d4c1c:	6803      	ldr	r3, [r0, #0]
   d4c1e:	4629      	mov	r1, r5
   d4c20:	689b      	ldr	r3, [r3, #8]
   d4c22:	4798      	blx	r3
  Wire.endTransmission(); // end transmission
   d4c24:	f002 fa62 	bl	d70ec <_Z19__fetch_global_Wirev>
   d4c28:	f001 fd1b 	bl	d6662 <_ZN7TwoWire15endTransmissionEv>
  
  Wire.requestFrom(_addr, (uint8_t)2);// send data n-bytes read
   d4c2c:	f002 fa5e 	bl	d70ec <_Z19__fetch_global_Wirev>
   d4c30:	7821      	ldrb	r1, [r4, #0]
   d4c32:	2202      	movs	r2, #2
   d4c34:	f001 fd0a 	bl	d664c <_ZN7TwoWire11requestFromEhj>
  ret = Wire.read(); // receive DATA
   d4c38:	f002 fa58 	bl	d70ec <_Z19__fetch_global_Wirev>
   d4c3c:	6803      	ldr	r3, [r0, #0]
   d4c3e:	695b      	ldr	r3, [r3, #20]
   d4c40:	4798      	blx	r3
   d4c42:	4604      	mov	r4, r0
  ret |= (uint16_t)Wire.read() << 8; // receive DATA
   d4c44:	f002 fa52 	bl	d70ec <_Z19__fetch_global_Wirev>
   d4c48:	6803      	ldr	r3, [r0, #0]
   d4c4a:	695b      	ldr	r3, [r3, #20]
   d4c4c:	4798      	blx	r3

  return ret;
   d4c4e:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
}
   d4c52:	b280      	uxth	r0, r0
   d4c54:	bd38      	pop	{r3, r4, r5, pc}

000d4c56 <_ZN15Adafruit_SI11456readUVEv>:

//////////////////////////////////////////////////////

// returns the UV index * 100 (divide by 100 to get the index)
uint16_t Adafruit_SI1145::readUV(void) {
 return read16(0x2C); 
   d4c56:	212c      	movs	r1, #44	; 0x2c
   d4c58:	f7ff bfd6 	b.w	d4c08 <_ZN15Adafruit_SI11456read16Eh>

000d4c5c <_ZN15Adafruit_SI11456write8Ehh>:
  ret |= (uint16_t)Wire.read() << 8; // receive DATA

  return ret;
}

void Adafruit_SI1145::write8(uint8_t reg, uint8_t val) {
   d4c5c:	b570      	push	{r4, r5, r6, lr}
   d4c5e:	4606      	mov	r6, r0
   d4c60:	4614      	mov	r4, r2
   d4c62:	460d      	mov	r5, r1

  Wire.beginTransmission(_addr); // start transmission to device 
   d4c64:	f002 fa42 	bl	d70ec <_Z19__fetch_global_Wirev>
   d4c68:	7831      	ldrb	r1, [r6, #0]
   d4c6a:	f001 fcf2 	bl	d6652 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg); // sends register address to write
   d4c6e:	f002 fa3d 	bl	d70ec <_Z19__fetch_global_Wirev>
   d4c72:	6803      	ldr	r3, [r0, #0]
   d4c74:	4629      	mov	r1, r5
   d4c76:	689b      	ldr	r3, [r3, #8]
   d4c78:	4798      	blx	r3
  Wire.write(val); // sends value
   d4c7a:	f002 fa37 	bl	d70ec <_Z19__fetch_global_Wirev>
   d4c7e:	6803      	ldr	r3, [r0, #0]
   d4c80:	4621      	mov	r1, r4
   d4c82:	689b      	ldr	r3, [r3, #8]
   d4c84:	4798      	blx	r3
  Wire.endTransmission(); // end transmission
   d4c86:	f002 fa31 	bl	d70ec <_Z19__fetch_global_Wirev>
}
   d4c8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void Adafruit_SI1145::write8(uint8_t reg, uint8_t val) {

  Wire.beginTransmission(_addr); // start transmission to device 
  Wire.write(reg); // sends register address to write
  Wire.write(val); // sends value
  Wire.endTransmission(); // end transmission
   d4c8e:	f001 bce8 	b.w	d6662 <_ZN7TwoWire15endTransmissionEv>

000d4c92 <_ZN15Adafruit_SI11455resetEv>:
  write8(SI1145_REG_COMMAND, SI1145_PSALS_AUTO);

  return true;
}

void Adafruit_SI1145::reset() {
   d4c92:	b510      	push	{r4, lr}
  write8(SI1145_REG_MEASRATE0, 0);
   d4c94:	2200      	movs	r2, #0
  write8(SI1145_REG_COMMAND, SI1145_PSALS_AUTO);

  return true;
}

void Adafruit_SI1145::reset() {
   d4c96:	4604      	mov	r4, r0
  write8(SI1145_REG_MEASRATE0, 0);
   d4c98:	2108      	movs	r1, #8
   d4c9a:	f7ff ffdf 	bl	d4c5c <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_MEASRATE1, 0);
   d4c9e:	4620      	mov	r0, r4
   d4ca0:	2200      	movs	r2, #0
   d4ca2:	2109      	movs	r1, #9
   d4ca4:	f7ff ffda 	bl	d4c5c <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQEN, 0);
   d4ca8:	4620      	mov	r0, r4
   d4caa:	2200      	movs	r2, #0
   d4cac:	2104      	movs	r1, #4
   d4cae:	f7ff ffd5 	bl	d4c5c <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQMODE1, 0);
   d4cb2:	4620      	mov	r0, r4
   d4cb4:	2200      	movs	r2, #0
   d4cb6:	2105      	movs	r1, #5
   d4cb8:	f7ff ffd0 	bl	d4c5c <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQMODE2, 0);
   d4cbc:	4620      	mov	r0, r4
   d4cbe:	2200      	movs	r2, #0
   d4cc0:	2106      	movs	r1, #6
   d4cc2:	f7ff ffcb 	bl	d4c5c <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_INTCFG, 0);
   d4cc6:	4620      	mov	r0, r4
   d4cc8:	2200      	movs	r2, #0
   d4cca:	2103      	movs	r1, #3
   d4ccc:	f7ff ffc6 	bl	d4c5c <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQSTAT, 0xFF);
   d4cd0:	4620      	mov	r0, r4
   d4cd2:	22ff      	movs	r2, #255	; 0xff
   d4cd4:	2121      	movs	r1, #33	; 0x21
   d4cd6:	f7ff ffc1 	bl	d4c5c <_ZN15Adafruit_SI11456write8Ehh>

  write8(SI1145_REG_COMMAND, SI1145_RESET);
   d4cda:	2201      	movs	r2, #1
   d4cdc:	2118      	movs	r1, #24
   d4cde:	4620      	mov	r0, r4
   d4ce0:	f7ff ffbc 	bl	d4c5c <_ZN15Adafruit_SI11456write8Ehh>
  delay(10);
   d4ce4:	200a      	movs	r0, #10
   d4ce6:	f001 f9af 	bl	d6048 <delay>
  write8(SI1145_REG_HWKEY, 0x17);
   d4cea:	4620      	mov	r0, r4
   d4cec:	2217      	movs	r2, #23
   d4cee:	2107      	movs	r1, #7
   d4cf0:	f7ff ffb4 	bl	d4c5c <_ZN15Adafruit_SI11456write8Ehh>
  
  delay(10);
   d4cf4:	200a      	movs	r0, #10
}
   d4cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  write8(SI1145_REG_COMMAND, SI1145_RESET);
  delay(10);
  write8(SI1145_REG_HWKEY, 0x17);
  
  delay(10);
   d4cfa:	f001 b9a5 	b.w	d6048 <delay>

000d4cfe <_ZN15Adafruit_SI114510writeParamEhh>:
 return read16(0x26); 
}

/*********************************************************************/

uint8_t Adafruit_SI1145::writeParam(uint8_t p, uint8_t v) {
   d4cfe:	b538      	push	{r3, r4, r5, lr}
   d4d00:	4604      	mov	r4, r0
   d4d02:	460d      	mov	r5, r1
  //Serial.print("Param 0x"); Serial.print(p, HEX);
  //Serial.print(" = 0x"); Serial.println(v, HEX);
  
  write8(SI1145_REG_PARAMWR, v);
   d4d04:	2117      	movs	r1, #23
   d4d06:	f7ff ffa9 	bl	d4c5c <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_COMMAND, p | SI1145_PARAM_SET);
   d4d0a:	4620      	mov	r0, r4
   d4d0c:	f045 02a0 	orr.w	r2, r5, #160	; 0xa0
   d4d10:	2118      	movs	r1, #24
   d4d12:	f7ff ffa3 	bl	d4c5c <_ZN15Adafruit_SI11456write8Ehh>
  return read8(SI1145_REG_PARAMRD);
   d4d16:	4620      	mov	r0, r4
   d4d18:	212e      	movs	r1, #46	; 0x2e
}
   d4d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  //Serial.print("Param 0x"); Serial.print(p, HEX);
  //Serial.print(" = 0x"); Serial.println(v, HEX);
  
  write8(SI1145_REG_PARAMWR, v);
  write8(SI1145_REG_COMMAND, p | SI1145_PARAM_SET);
  return read8(SI1145_REG_PARAMRD);
   d4d1e:	f7ff bf54 	b.w	d4bca <_ZN15Adafruit_SI11455read8Eh>

000d4d22 <_ZN15Adafruit_SI11455beginEv>:
Adafruit_SI1145::Adafruit_SI1145() {
  _addr = SI1145_ADDR;
}


boolean Adafruit_SI1145::begin(void) {
   d4d22:	b510      	push	{r4, lr}
   d4d24:	4604      	mov	r4, r0
  Wire.begin();
   d4d26:	f002 f9e1 	bl	d70ec <_Z19__fetch_global_Wirev>
   d4d2a:	f001 fc5b 	bl	d65e4 <_ZN7TwoWire5beginEv>
 
  uint8_t id = read8(SI1145_REG_PARTID);
   d4d2e:	2100      	movs	r1, #0
   d4d30:	4620      	mov	r0, r4
   d4d32:	f7ff ff4a 	bl	d4bca <_ZN15Adafruit_SI11455read8Eh>
  if (id != 0x45) return false; // look for SI1145
   d4d36:	2845      	cmp	r0, #69	; 0x45
   d4d38:	d172      	bne.n	d4e20 <_ZN15Adafruit_SI11455beginEv+0xfe>
  
  reset();
   d4d3a:	4620      	mov	r0, r4
   d4d3c:	f7ff ffa9 	bl	d4c92 <_ZN15Adafruit_SI11455resetEv>
  

    /***********************************/
  // enable UVindex measurement coefficients!
  write8(SI1145_REG_UCOEFF0, 0x29);
   d4d40:	4620      	mov	r0, r4
   d4d42:	2229      	movs	r2, #41	; 0x29
   d4d44:	2113      	movs	r1, #19
   d4d46:	f7ff ff89 	bl	d4c5c <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_UCOEFF1, 0x89);
   d4d4a:	4620      	mov	r0, r4
   d4d4c:	2289      	movs	r2, #137	; 0x89
   d4d4e:	2114      	movs	r1, #20
   d4d50:	f7ff ff84 	bl	d4c5c <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_UCOEFF2, 0x02);
   d4d54:	4620      	mov	r0, r4
   d4d56:	2202      	movs	r2, #2
   d4d58:	2115      	movs	r1, #21
   d4d5a:	f7ff ff7f 	bl	d4c5c <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_UCOEFF3, 0x00);
   d4d5e:	4620      	mov	r0, r4
   d4d60:	2200      	movs	r2, #0
   d4d62:	2116      	movs	r1, #22
   d4d64:	f7ff ff7a 	bl	d4c5c <_ZN15Adafruit_SI11456write8Ehh>

  // enable UV sensor
  writeParam(SI1145_PARAM_CHLIST, SI1145_PARAM_CHLIST_ENUV |
  SI1145_PARAM_CHLIST_ENALSIR | SI1145_PARAM_CHLIST_ENALSVIS |
  SI1145_PARAM_CHLIST_ENPS1);
   d4d68:	22b1      	movs	r2, #177	; 0xb1
   d4d6a:	2101      	movs	r1, #1
   d4d6c:	4620      	mov	r0, r4
   d4d6e:	f7ff ffc6 	bl	d4cfe <_ZN15Adafruit_SI114510writeParamEhh>
  // enable interrupt on every sample
  write8(SI1145_REG_INTCFG, SI1145_REG_INTCFG_INTOE);  
   d4d72:	4620      	mov	r0, r4
   d4d74:	2201      	movs	r2, #1
   d4d76:	2103      	movs	r1, #3
   d4d78:	f7ff ff70 	bl	d4c5c <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQEN, SI1145_REG_IRQEN_ALSEVERYSAMPLE);  
   d4d7c:	4620      	mov	r0, r4
   d4d7e:	2201      	movs	r2, #1
   d4d80:	2104      	movs	r1, #4
   d4d82:	f7ff ff6b 	bl	d4c5c <_ZN15Adafruit_SI11456write8Ehh>

/****************************** Prox Sense 1 */

  // program LED current
  write8(SI1145_REG_PSLED21, 0x03); // 20mA for LED 1 only
   d4d86:	4620      	mov	r0, r4
   d4d88:	2203      	movs	r2, #3
   d4d8a:	210f      	movs	r1, #15
   d4d8c:	f7ff ff66 	bl	d4c5c <_ZN15Adafruit_SI11456write8Ehh>
  writeParam(SI1145_PARAM_PS1ADCMUX, SI1145_PARAM_ADCMUX_LARGEIR);
   d4d90:	2203      	movs	r2, #3
   d4d92:	2107      	movs	r1, #7
   d4d94:	4620      	mov	r0, r4
   d4d96:	f7ff ffb2 	bl	d4cfe <_ZN15Adafruit_SI114510writeParamEhh>
  // prox sensor #1 uses LED #1
  writeParam(SI1145_PARAM_PSLED12SEL, SI1145_PARAM_PSLED12SEL_PS1LED1);
   d4d9a:	2201      	movs	r2, #1
   d4d9c:	2102      	movs	r1, #2
   d4d9e:	4620      	mov	r0, r4
   d4da0:	f7ff ffad 	bl	d4cfe <_ZN15Adafruit_SI114510writeParamEhh>
  // fastest clocks, clock div 1
  writeParam(SI1145_PARAM_PSADCGAIN, 0);
   d4da4:	2200      	movs	r2, #0
   d4da6:	210b      	movs	r1, #11
   d4da8:	4620      	mov	r0, r4
   d4daa:	f7ff ffa8 	bl	d4cfe <_ZN15Adafruit_SI114510writeParamEhh>
  // take 511 clocks to measure
  writeParam(SI1145_PARAM_PSADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK);
   d4dae:	2270      	movs	r2, #112	; 0x70
   d4db0:	210a      	movs	r1, #10
   d4db2:	4620      	mov	r0, r4
   d4db4:	f7ff ffa3 	bl	d4cfe <_ZN15Adafruit_SI114510writeParamEhh>
  // in prox mode, high range
  writeParam(SI1145_PARAM_PSADCMISC, SI1145_PARAM_PSADCMISC_RANGE|
    SI1145_PARAM_PSADCMISC_PSMODE);
   d4db8:	2224      	movs	r2, #36	; 0x24
   d4dba:	210c      	movs	r1, #12
   d4dbc:	4620      	mov	r0, r4
   d4dbe:	f7ff ff9e 	bl	d4cfe <_ZN15Adafruit_SI114510writeParamEhh>

  writeParam(SI1145_PARAM_ALSIRADCMUX, SI1145_PARAM_ADCMUX_SMALLIR);  
   d4dc2:	2200      	movs	r2, #0
   d4dc4:	210e      	movs	r1, #14
   d4dc6:	4620      	mov	r0, r4
   d4dc8:	f7ff ff99 	bl	d4cfe <_ZN15Adafruit_SI114510writeParamEhh>
  // fastest clocks, clock div 1
  writeParam(SI1145_PARAM_ALSIRADCGAIN, 0);
   d4dcc:	2200      	movs	r2, #0
   d4dce:	211e      	movs	r1, #30
   d4dd0:	4620      	mov	r0, r4
   d4dd2:	f7ff ff94 	bl	d4cfe <_ZN15Adafruit_SI114510writeParamEhh>
  // take 511 clocks to measure
  writeParam(SI1145_PARAM_ALSIRADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK);
   d4dd6:	2270      	movs	r2, #112	; 0x70
   d4dd8:	211d      	movs	r1, #29
   d4dda:	4620      	mov	r0, r4
   d4ddc:	f7ff ff8f 	bl	d4cfe <_ZN15Adafruit_SI114510writeParamEhh>
  // in high range mode
  writeParam(SI1145_PARAM_ALSIRADCMISC, SI1145_PARAM_ALSIRADCMISC_RANGE);
   d4de0:	2220      	movs	r2, #32
   d4de2:	211f      	movs	r1, #31
   d4de4:	4620      	mov	r0, r4
   d4de6:	f7ff ff8a 	bl	d4cfe <_ZN15Adafruit_SI114510writeParamEhh>



  // fastest clocks, clock div 1
  writeParam(SI1145_PARAM_ALSVISADCGAIN, 0);
   d4dea:	2200      	movs	r2, #0
   d4dec:	2111      	movs	r1, #17
   d4dee:	4620      	mov	r0, r4
   d4df0:	f7ff ff85 	bl	d4cfe <_ZN15Adafruit_SI114510writeParamEhh>
  // take 511 clocks to measure
  writeParam(SI1145_PARAM_ALSVISADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK);
   d4df4:	2270      	movs	r2, #112	; 0x70
   d4df6:	2110      	movs	r1, #16
   d4df8:	4620      	mov	r0, r4
   d4dfa:	f7ff ff80 	bl	d4cfe <_ZN15Adafruit_SI114510writeParamEhh>
  // in high range mode (not normal signal)
  writeParam(SI1145_PARAM_ALSVISADCMISC, SI1145_PARAM_ALSVISADCMISC_VISRANGE);
   d4dfe:	2220      	movs	r2, #32
   d4e00:	2112      	movs	r1, #18
   d4e02:	4620      	mov	r0, r4
   d4e04:	f7ff ff7b 	bl	d4cfe <_ZN15Adafruit_SI114510writeParamEhh>


/************************/

  // measurement rate for auto
  write8(SI1145_REG_MEASRATE0, 0xFF); // 255 * 31.25uS = 8ms
   d4e08:	4620      	mov	r0, r4
   d4e0a:	22ff      	movs	r2, #255	; 0xff
   d4e0c:	2108      	movs	r1, #8
   d4e0e:	f7ff ff25 	bl	d4c5c <_ZN15Adafruit_SI11456write8Ehh>
  
  // auto run
  write8(SI1145_REG_COMMAND, SI1145_PSALS_AUTO);
   d4e12:	4620      	mov	r0, r4
   d4e14:	220f      	movs	r2, #15
   d4e16:	2118      	movs	r1, #24
   d4e18:	f7ff ff20 	bl	d4c5c <_ZN15Adafruit_SI11456write8Ehh>

  return true;
   d4e1c:	2001      	movs	r0, #1
   d4e1e:	bd10      	pop	{r4, pc}

boolean Adafruit_SI1145::begin(void) {
  Wire.begin();
 
  uint8_t id = read8(SI1145_REG_PARTID);
  if (id != 0x45) return false; // look for SI1145
   d4e20:	2000      	movs	r0, #0
  
  // auto run
  write8(SI1145_REG_COMMAND, SI1145_PSALS_AUTO);

  return true;
}
   d4e22:	bd10      	pop	{r4, pc}

000d4e24 <_GLOBAL__sub_I__ZN15Adafruit_SI1145C2Ev>:
   d4e24:	f000 bc06 	b.w	d5634 <HAL_Pin_Map>

000d4e28 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4e28:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4e2a:	6984      	ldr	r4, [r0, #24]
   d4e2c:	4b0a      	ldr	r3, [pc, #40]	; (d4e58 <_ZN9TCPClientD1Ev+0x30>)
   d4e2e:	6003      	str	r3, [r0, #0]
   d4e30:	4605      	mov	r5, r0
   d4e32:	b17c      	cbz	r4, d4e54 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4e34:	6863      	ldr	r3, [r4, #4]
   d4e36:	3b01      	subs	r3, #1
   d4e38:	6063      	str	r3, [r4, #4]
   d4e3a:	b95b      	cbnz	r3, d4e54 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d4e3c:	6823      	ldr	r3, [r4, #0]
   d4e3e:	4620      	mov	r0, r4
   d4e40:	689b      	ldr	r3, [r3, #8]
   d4e42:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4e44:	68a3      	ldr	r3, [r4, #8]
   d4e46:	3b01      	subs	r3, #1
   d4e48:	60a3      	str	r3, [r4, #8]
   d4e4a:	b91b      	cbnz	r3, d4e54 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d4e4c:	6823      	ldr	r3, [r4, #0]
   d4e4e:	4620      	mov	r0, r4
   d4e50:	68db      	ldr	r3, [r3, #12]
   d4e52:	4798      	blx	r3
   d4e54:	4628      	mov	r0, r5
   d4e56:	bd38      	pop	{r3, r4, r5, pc}
   d4e58:	000d8440 	.word	0x000d8440

000d4e5c <_ZN9TCPClientD0Ev>:
   d4e5c:	b510      	push	{r4, lr}
   d4e5e:	4604      	mov	r4, r0
   d4e60:	f7ff ffe2 	bl	d4e28 <_ZN9TCPClientD1Ev>
   d4e64:	4620      	mov	r0, r4
   d4e66:	211c      	movs	r1, #28
   d4e68:	f002 f974 	bl	d7154 <_ZdlPvj>
   d4e6c:	4620      	mov	r0, r4
   d4e6e:	bd10      	pop	{r4, pc}

000d4e70 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d4e70:	b538      	push	{r3, r4, r5, lr}
   d4e72:	461d      	mov	r5, r3
    this->callback = callback;
   d4e74:	9b05      	ldr	r3, [sp, #20]
   d4e76:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
   d4e78:	2300      	movs	r3, #0

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d4e7a:	4604      	mov	r4, r0
    this->callback = callback;
    this->qoscallback = NULL;
   d4e7c:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
   d4e7e:	b102      	cbz	r2, d4e82 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
   d4e80:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
   d4e82:	b119      	cbz	r1, d4e8c <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
   d4e84:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4e88:	f001 f814 	bl	d5eb4 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   d4e8c:	9b04      	ldr	r3, [sp, #16]
   d4e8e:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d4e90:	9b06      	ldr	r3, [sp, #24]
    if (buffer != NULL)
   d4e92:	69e0      	ldr	r0, [r4, #28]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
   d4e94:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d4e98:	2bff      	cmp	r3, #255	; 0xff
   d4e9a:	bfb8      	it	lt
   d4e9c:	23ff      	movlt	r3, #255	; 0xff
   d4e9e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   d4ea2:	b108      	cbz	r0, d4ea8 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
   d4ea4:	f7ff f8fd 	bl	d40a2 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   d4ea8:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   d4eac:	f7ff f8f5 	bl	d409a <_Znaj>
   d4eb0:	61e0      	str	r0, [r4, #28]
   d4eb2:	bd38      	pop	{r3, r4, r5, pc}

000d4eb4 <_ZN4MQTTC1EPctPFvS0_PhjE>:
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d4eb4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d4eb8:	4604      	mov	r4, r0
   d4eba:	2500      	movs	r5, #0
   d4ebc:	4617      	mov	r7, r2
   d4ebe:	4698      	mov	r8, r3
   d4ec0:	460e      	mov	r6, r1
   d4ec2:	f001 ff3d 	bl	d6d40 <_ZN9TCPClientC1Ev>
   d4ec6:	61e5      	str	r5, [r4, #28]
   d4ec8:	490a      	ldr	r1, [pc, #40]	; (d4ef4 <_ZN4MQTTC1EPctPFvS0_PhjE+0x40>)
   d4eca:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4ece:	f000 ffc4 	bl	d5e5a <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d4ed2:	23ff      	movs	r3, #255	; 0xff
   d4ed4:	9302      	str	r3, [sp, #8]
   d4ed6:	230f      	movs	r3, #15
   d4ed8:	9300      	str	r3, [sp, #0]
   d4eda:	4620      	mov	r0, r4
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d4edc:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d4ede:	f8cd 8004 	str.w	r8, [sp, #4]
   d4ee2:	463b      	mov	r3, r7
   d4ee4:	462a      	mov	r2, r5
   d4ee6:	4631      	mov	r1, r6
   d4ee8:	f7ff ffc2 	bl	d4e70 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
   d4eec:	4620      	mov	r0, r4
   d4eee:	b004      	add	sp, #16
   d4ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4ef4:	000d82e8 	.word	0x000d82e8

000d4ef8 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d4ef8:	b510      	push	{r4, lr}
   d4efa:	4604      	mov	r4, r0
    while(!_client.available()) {}
   d4efc:	4620      	mov	r0, r4
   d4efe:	f001 fe83 	bl	d6c08 <_ZN9TCPClient9availableEv>
   d4f02:	2800      	cmp	r0, #0
   d4f04:	d0fa      	beq.n	d4efc <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   d4f06:	4620      	mov	r0, r4
   d4f08:	f001 fd27 	bl	d695a <_ZN9TCPClient4readEv>
}
   d4f0c:	b2c0      	uxtb	r0, r0
   d4f0e:	bd10      	pop	{r4, pc}

000d4f10 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d4f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4f14:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
   d4f16:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d4f18:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   d4f1a:	f7ff ffed 	bl	d4ef8 <_ZN4MQTT8readByteEv>
   d4f1e:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d4f20:	69eb      	ldr	r3, [r5, #28]
   d4f22:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   d4f26:	f04f 0901 	mov.w	r9, #1
   d4f2a:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   d4f2e:	2700      	movs	r7, #0
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
   d4f30:	464e      	mov	r6, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   d4f32:	4628      	mov	r0, r5
   d4f34:	f7ff ffe0 	bl	d4ef8 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   d4f38:	69eb      	ldr	r3, [r5, #28]
   d4f3a:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   d4f3c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   d4f40:	fb13 f309 	smulbb	r3, r3, r9
   d4f44:	441f      	add	r7, r3
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d4f46:	1c74      	adds	r4, r6, #1
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
   d4f48:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d4f4a:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   d4f4c:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   d4f4e:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   d4f52:	d501      	bpl.n	d4f58 <_ZN4MQTT10readPacketEPh+0x48>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d4f54:	4626      	mov	r6, r4
   d4f56:	e7ec      	b.n	d4f32 <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d4f58:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   d4f5a:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d4f5e:	f888 3000 	strb.w	r3, [r8]

    if (isPublish) {
   d4f62:	d113      	bne.n	d4f8c <_ZN4MQTT10readPacketEPh+0x7c>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   d4f64:	4628      	mov	r0, r5
   d4f66:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d4f6a:	f7ff ffc5 	bl	d4ef8 <_ZN4MQTT8readByteEv>
   d4f6e:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
   d4f72:	4628      	mov	r0, r5
   d4f74:	1cf4      	adds	r4, r6, #3
   d4f76:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d4f7a:	3602      	adds	r6, #2
   d4f7c:	f7ff ffbc 	bl	d4ef8 <_ZN4MQTT8readByteEv>
   d4f80:	b2b6      	uxth	r6, r6
   d4f82:	b2a4      	uxth	r4, r4
   d4f84:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   d4f88:	2302      	movs	r3, #2
   d4f8a:	e000      	b.n	d4f8e <_ZN4MQTT10readPacketEPh+0x7e>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
   d4f8c:	2300      	movs	r3, #0
   d4f8e:	1b1b      	subs	r3, r3, r4
   d4f90:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d4f92:	19a3      	adds	r3, r4, r6
   d4f94:	b29b      	uxth	r3, r3
   d4f96:	429f      	cmp	r7, r3
   d4f98:	d90b      	bls.n	d4fb2 <_ZN4MQTT10readPacketEPh+0xa2>
        digit = readByte();
   d4f9a:	4628      	mov	r0, r5
   d4f9c:	f7ff ffac 	bl	d4ef8 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   d4fa0:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   d4fa4:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   d4fa6:	bf84      	itt	hi
   d4fa8:	69eb      	ldrhi	r3, [r5, #28]
   d4faa:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   d4fac:	3401      	adds	r4, #1
   d4fae:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d4fb0:	e7ef      	b.n	d4f92 <_ZN4MQTT10readPacketEPh+0x82>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
   d4fb2:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   d4fb6:	42a0      	cmp	r0, r4
   d4fb8:	bf2c      	ite	cs
   d4fba:	4620      	movcs	r0, r4
   d4fbc:	2000      	movcc	r0, #0
   d4fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d4fc2 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d4fc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4fc4:	4607      	mov	r7, r0
   d4fc6:	468e      	mov	lr, r1
   d4fc8:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   d4fca:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
   d4fcc:	2400      	movs	r4, #0
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d4fce:	a902      	add	r1, sp, #8
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
   d4fd0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d4fd4:	4421      	add	r1, r4
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
   d4fd6:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
   d4fd8:	bf18      	it	ne
   d4fda:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
   d4fde:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d4fe0:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
   d4fe4:	b2e4      	uxtb	r4, r4
    } while(len > 0);
   d4fe6:	2d00      	cmp	r5, #0
   d4fe8:	d1f1      	bne.n	d4fce <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
   d4fea:	f1c4 0304 	rsb	r3, r4, #4
   d4fee:	18d1      	adds	r1, r2, r3
   d4ff0:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
   d4ff4:	42a5      	cmp	r5, r4
   d4ff6:	da06      	bge.n	d5006 <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
   d4ff8:	1b2b      	subs	r3, r5, r4
   d4ffa:	a801      	add	r0, sp, #4
   d4ffc:	4413      	add	r3, r2
   d4ffe:	5c28      	ldrb	r0, [r5, r0]
   d5000:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
   d5002:	3501      	adds	r5, #1
   d5004:	e7f6      	b.n	d4ff4 <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   d5006:	1c72      	adds	r2, r6, #1
   d5008:	4422      	add	r2, r4
   d500a:	4638      	mov	r0, r7
   d500c:	f001 fbfb 	bl	d6806 <_ZN9TCPClient5writeEPKhj>
   d5010:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5012:	f000 fb8f 	bl	d5734 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   d5016:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
   d5018:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   d501a:	4434      	add	r4, r6
   d501c:	b2a8      	uxth	r0, r5
}
   d501e:	1a23      	subs	r3, r4, r0
   d5020:	4258      	negs	r0, r3
   d5022:	4158      	adcs	r0, r3
   d5024:	b003      	add	sp, #12
   d5026:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5028 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d5028:	b510      	push	{r4, lr}
    buffer[0] = MQTTDISCONNECT;
   d502a:	69c3      	ldr	r3, [r0, #28]
   d502c:	22e0      	movs	r2, #224	; 0xe0
   d502e:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   d5030:	69c3      	ldr	r3, [r0, #28]
   d5032:	2200      	movs	r2, #0
   d5034:	705a      	strb	r2, [r3, #1]
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d5036:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
    buffer[1] = 0;
    _client.write(buffer,2);
   d5038:	2202      	movs	r2, #2
   d503a:	69c1      	ldr	r1, [r0, #28]
   d503c:	f001 fbe3 	bl	d6806 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   d5040:	4620      	mov	r0, r4
   d5042:	f001 fdc9 	bl	d6bd8 <_ZN9TCPClient4stopEv>
   d5046:	f000 fb75 	bl	d5734 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   d504a:	6260      	str	r0, [r4, #36]	; 0x24
   d504c:	62a0      	str	r0, [r4, #40]	; 0x28
   d504e:	bd10      	pop	{r4, pc}

000d5050 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d5050:	3302      	adds	r3, #2
    _client.write(buffer,2);
    _client.stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d5052:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d5054:	b29b      	uxth	r3, r3
   d5056:	460d      	mov	r5, r1
   d5058:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
   d505a:	f815 6b01 	ldrb.w	r6, [r5], #1
   d505e:	b2a4      	uxth	r4, r4
   d5060:	b13e      	cbz	r6, d5072 <_ZN4MQTT11writeStringEPKcPht+0x22>
   d5062:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
   d5066:	429f      	cmp	r7, r3
   d5068:	d903      	bls.n	d5072 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
   d506a:	1c5c      	adds	r4, r3, #1
   d506c:	54d6      	strb	r6, [r2, r3]
   d506e:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
   d5070:	e7f2      	b.n	d5058 <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   d5072:	1b19      	subs	r1, r3, r4
   d5074:	440a      	add	r2, r1
   d5076:	1221      	asrs	r1, r4, #8
   d5078:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d507c:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
   d5080:	4618      	mov	r0, r3
   d5082:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5084 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   d5084:	b538      	push	{r3, r4, r5, lr}
   d5086:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
   d5088:	f001 fbd3 	bl	d6832 <_ZN9TCPClient9connectedEv>
   d508c:	2800      	cmp	r0, #0
   d508e:	bf14      	ite	ne
   d5090:	2401      	movne	r4, #1
   d5092:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
   d5094:	d102      	bne.n	d509c <_ZN4MQTT11isConnectedEv+0x18>
   d5096:	4628      	mov	r0, r5
   d5098:	f001 fd9e 	bl	d6bd8 <_ZN9TCPClient4stopEv>
    return rc;
}
   d509c:	4620      	mov	r0, r4
   d509e:	bd38      	pop	{r3, r4, r5, pc}

000d50a0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   d50a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d50a4:	b087      	sub	sp, #28
   d50a6:	4604      	mov	r4, r0
   d50a8:	4689      	mov	r9, r1
   d50aa:	4617      	mov	r7, r2
   d50ac:	461e      	mov	r6, r3
   d50ae:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!isConnected()) {
   d50b2:	f7ff ffe7 	bl	d5084 <_ZN4MQTT11isConnectedEv>
   d50b6:	4605      	mov	r5, r0
   d50b8:	2800      	cmp	r0, #0
   d50ba:	f040 80bd 	bne.w	d5238 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
   d50be:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d50c0:	b939      	cbnz	r1, d50d2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
   d50c2:	4603      	mov	r3, r0
   d50c4:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d50c8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d50ca:	4620      	mov	r0, r4
   d50cc:	f001 fc88 	bl	d69e0 <_ZN9TCPClient7connectEPKctm>
   d50d0:	e009      	b.n	d50e6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
   d50d2:	4668      	mov	r0, sp
   d50d4:	f001 f8f0 	bl	d62b8 <_ZN9IPAddressC1EPKh>
   d50d8:	462b      	mov	r3, r5
   d50da:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d50de:	4669      	mov	r1, sp
   d50e0:	4620      	mov	r0, r4
   d50e2:	f001 fcff 	bl	d6ae4 <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
   d50e6:	2800      	cmp	r0, #0
   d50e8:	f000 80a2 	beq.w	d5230 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
   d50ec:	2301      	movs	r3, #1
   d50ee:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
   d50f0:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   d50f4:	2b04      	cmp	r3, #4
   d50f6:	d115      	bne.n	d5124 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d50f8:	4b52      	ldr	r3, [pc, #328]	; (d5244 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
   d50fa:	6818      	ldr	r0, [r3, #0]
   d50fc:	889a      	ldrh	r2, [r3, #4]
   d50fe:	f8ad 2004 	strh.w	r2, [sp, #4]
   d5102:	9000      	str	r0, [sp, #0]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d5104:	69e2      	ldr	r2, [r4, #28]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d5106:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d5108:	9800      	ldr	r0, [sp, #0]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d510a:	f88d 3006 	strb.w	r3, [sp, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d510e:	1d53      	adds	r3, r2, #5
   d5110:	f8c2 0005 	str.w	r0, [r2, #5]
   d5114:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   d5118:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d511c:	719a      	strb	r2, [r3, #6]
   d511e:	8099      	strh	r1, [r3, #4]
                length+=sizeof(MQTT_HEADER_V311);
   d5120:	230c      	movs	r3, #12
   d5122:	e012      	b.n	d514a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d5124:	4b48      	ldr	r3, [pc, #288]	; (d5248 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d5126:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d512a:	6818      	ldr	r0, [r3, #0]
   d512c:	6859      	ldr	r1, [r3, #4]
   d512e:	7a1b      	ldrb	r3, [r3, #8]
   d5130:	466a      	mov	r2, sp
   d5132:	c203      	stmia	r2!, {r0, r1}
   d5134:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d5136:	466b      	mov	r3, sp
   d5138:	cb03      	ldmia	r3!, {r0, r1}
   d513a:	f8cc 0005 	str.w	r0, [ip, #5]
   d513e:	f8cc 1009 	str.w	r1, [ip, #9]
   d5142:	7813      	ldrb	r3, [r2, #0]
   d5144:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
   d5148:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
   d514a:	f1b8 0f00 	cmp.w	r8, #0
   d514e:	d00a      	beq.n	d5166 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d5150:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   d5154:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   d5158:	0152      	lsls	r2, r2, #5
   d515a:	f042 0206 	orr.w	r2, r2, #6
   d515e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
   d5162:	b2d2      	uxtb	r2, r2
   d5164:	e000      	b.n	d5168 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
   d5166:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
   d5168:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
   d516c:	b909      	cbnz	r1, d5172 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
   d516e:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
   d5172:	b12f      	cbz	r7, d5180 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
   d5174:	b916      	cbnz	r6, d517c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
   d5176:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   d517a:	e001      	b.n	d5180 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
   d517c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
   d5180:	69e1      	ldr	r1, [r4, #28]
   d5182:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
   d5184:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d5186:	69e1      	ldr	r1, [r4, #28]
   d5188:	1c58      	adds	r0, r3, #1
   d518a:	1212      	asrs	r2, r2, #8
   d518c:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   d518e:	1c9a      	adds	r2, r3, #2
   d5190:	69e1      	ldr	r1, [r4, #28]
   d5192:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d5194:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   d5196:	3303      	adds	r3, #3
   d5198:	69e2      	ldr	r2, [r4, #28]
   d519a:	4649      	mov	r1, r9
   d519c:	4620      	mov	r0, r4
   d519e:	f7ff ff57 	bl	d5050 <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
   d51a2:	f1b8 0f00 	cmp.w	r8, #0
   d51a6:	d00b      	beq.n	d51c0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
   d51a8:	4603      	mov	r3, r0
   d51aa:	69e2      	ldr	r2, [r4, #28]
   d51ac:	4641      	mov	r1, r8
   d51ae:	4620      	mov	r0, r4
   d51b0:	f7ff ff4e 	bl	d5050 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   d51b4:	69e2      	ldr	r2, [r4, #28]
   d51b6:	9911      	ldr	r1, [sp, #68]	; 0x44
   d51b8:	4603      	mov	r3, r0
   d51ba:	4620      	mov	r0, r4
   d51bc:	f7ff ff48 	bl	d5050 <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
   d51c0:	b167      	cbz	r7, d51dc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
   d51c2:	4603      	mov	r3, r0
   d51c4:	69e2      	ldr	r2, [r4, #28]
   d51c6:	4639      	mov	r1, r7
   d51c8:	4620      	mov	r0, r4
   d51ca:	f7ff ff41 	bl	d5050 <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
   d51ce:	b12e      	cbz	r6, d51dc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
   d51d0:	4603      	mov	r3, r0
   d51d2:	69e2      	ldr	r2, [r4, #28]
   d51d4:	4631      	mov	r1, r6
   d51d6:	4620      	mov	r0, r4
   d51d8:	f7ff ff3a 	bl	d5050 <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
   d51dc:	1f43      	subs	r3, r0, #5
   d51de:	b29b      	uxth	r3, r3
   d51e0:	69e2      	ldr	r2, [r4, #28]
   d51e2:	2110      	movs	r1, #16
   d51e4:	4620      	mov	r0, r4
   d51e6:	f7ff feec 	bl	d4fc2 <_ZN4MQTT5writeEhPht>
   d51ea:	f000 faa3 	bl	d5734 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d51ee:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
   d51f2:	6260      	str	r0, [r4, #36]	; 0x24
   d51f4:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
   d51f6:	4620      	mov	r0, r4
   d51f8:	f001 fd06 	bl	d6c08 <_ZN9TCPClient9availableEv>
   d51fc:	b940      	cbnz	r0, d5210 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
   d51fe:	f000 fa99 	bl	d5734 <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d5202:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d5204:	1ac0      	subs	r0, r0, r3
   d5206:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d5208:	4373      	muls	r3, r6
   d520a:	4298      	cmp	r0, r3
   d520c:	d9f3      	bls.n	d51f6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
   d520e:	e00f      	b.n	d5230 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d5210:	4669      	mov	r1, sp
   d5212:	4620      	mov	r0, r4
   d5214:	f7ff fe7c 	bl	d4f10 <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
   d5218:	2804      	cmp	r0, #4
   d521a:	d109      	bne.n	d5230 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
   d521c:	69e3      	ldr	r3, [r4, #28]
   d521e:	78de      	ldrb	r6, [r3, #3]
   d5220:	b936      	cbnz	r6, d5230 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
   d5222:	f000 fa87 	bl	d5734 <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
   d5226:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
   d5228:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   d522a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
   d522e:	e004      	b.n	d523a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
   d5230:	4620      	mov	r0, r4
   d5232:	f001 fcd1 	bl	d6bd8 <_ZN9TCPClient4stopEv>
   d5236:	e000      	b.n	d523a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
   d5238:	2500      	movs	r5, #0
}
   d523a:	4628      	mov	r0, r5
   d523c:	b007      	add	sp, #28
   d523e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5242:	bf00      	nop
   d5244:	000d81fd 	.word	0x000d81fd
   d5248:	000d8204 	.word	0x000d8204

000d524c <_ZN4MQTT7connectEPKc>:
void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}


bool MQTT::connect(const char *id) {
   d524c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   d524e:	2304      	movs	r3, #4
   d5250:	9305      	str	r3, [sp, #20]
   d5252:	2301      	movs	r3, #1
   d5254:	9304      	str	r3, [sp, #16]
   d5256:	2300      	movs	r3, #0
   d5258:	9303      	str	r3, [sp, #12]
   d525a:	9302      	str	r3, [sp, #8]
   d525c:	9301      	str	r3, [sp, #4]
   d525e:	9300      	str	r3, [sp, #0]
   d5260:	461a      	mov	r2, r3
   d5262:	f7ff ff1d 	bl	d50a0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d5266:	b007      	add	sp, #28
   d5268:	f85d fb04 	ldr.w	pc, [sp], #4

000d526c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d526c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5270:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   d5272:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d5276:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d527a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
   d527e:	4604      	mov	r4, r0
   d5280:	468b      	mov	fp, r1
   d5282:	4691      	mov	r9, r2
   d5284:	469a      	mov	sl, r3
    if (isConnected()) {
   d5286:	f7ff fefd 	bl	d5084 <_ZN4MQTT11isConnectedEv>
   d528a:	2800      	cmp	r0, #0
   d528c:	d04c      	beq.n	d5328 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xbc>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
   d528e:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   d5292:	69e0      	ldr	r0, [r4, #28]
   d5294:	2100      	movs	r1, #0
   d5296:	f002 ff46 	bl	d8126 <memset>

        length = writeString(topic, buffer, length);
   d529a:	2305      	movs	r3, #5
   d529c:	69e2      	ldr	r2, [r4, #28]
   d529e:	4659      	mov	r1, fp
   d52a0:	4620      	mov	r0, r4
   d52a2:	f7ff fed5 	bl	d5050 <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
   d52a6:	1e6b      	subs	r3, r5, #1
   d52a8:	2b01      	cmp	r3, #1
   d52aa:	d812      	bhi.n	d52d2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
   d52ac:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d52ae:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
   d52b0:	3301      	adds	r3, #1
   d52b2:	b29b      	uxth	r3, r3
   d52b4:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d52b6:	121b      	asrs	r3, r3, #8
   d52b8:	5413      	strb	r3, [r2, r0]
   d52ba:	1c41      	adds	r1, r0, #1
   d52bc:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
   d52be:	69e3      	ldr	r3, [r4, #28]
   d52c0:	8c22      	ldrh	r2, [r4, #32]
   d52c2:	545a      	strb	r2, [r3, r1]
   d52c4:	3002      	adds	r0, #2
   d52c6:	b280      	uxth	r0, r0
            if (messageid != NULL)
   d52c8:	b11e      	cbz	r6, d52d2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
   d52ca:	8c23      	ldrh	r3, [r4, #32]
   d52cc:	1c5a      	adds	r2, r3, #1
   d52ce:	8422      	strh	r2, [r4, #32]
   d52d0:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d52d2:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d52d4:	b291      	uxth	r1, r2
   d52d6:	1883      	adds	r3, r0, r2
   d52d8:	458a      	cmp	sl, r1
   d52da:	b29b      	uxth	r3, r3
   d52dc:	d90a      	bls.n	d52f4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
   d52de:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
   d52e2:	429e      	cmp	r6, r3
   d52e4:	f102 0201 	add.w	r2, r2, #1
   d52e8:	d904      	bls.n	d52f4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
            buffer[length++] = payload[i];
   d52ea:	f819 6001 	ldrb.w	r6, [r9, r1]
   d52ee:	69e1      	ldr	r1, [r4, #28]
   d52f0:	54ce      	strb	r6, [r1, r3]
   d52f2:	e7ef      	b.n	d52d4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
   d52f4:	f1b8 0f00 	cmp.w	r8, #0
   d52f8:	bf0c      	ite	eq
   d52fa:	2130      	moveq	r1, #48	; 0x30
   d52fc:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
   d52fe:	b10f      	cbz	r7, d5304 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x98>
            header |= DUP_FLAG_ON_MASK;
   d5300:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
   d5304:	2d02      	cmp	r5, #2
   d5306:	d102      	bne.n	d530e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa2>
            header |= MQTTQOS2_HEADER_MASK;
   d5308:	f041 0104 	orr.w	r1, r1, #4
   d530c:	e003      	b.n	d5316 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xaa>
        else if (qos == QOS1)
   d530e:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   d5310:	bf08      	it	eq
   d5312:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d5316:	3b05      	subs	r3, #5
   d5318:	69e2      	ldr	r2, [r4, #28]
   d531a:	b29b      	uxth	r3, r3
   d531c:	4620      	mov	r0, r4
    }
    return false;
}
   d531e:	b001      	add	sp, #4
   d5320:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d5324:	f7ff be4d 	b.w	d4fc2 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d5328:	b001      	add	sp, #4
   d532a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d532e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   d532e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   d5330:	9c08      	ldr	r4, [sp, #32]
   d5332:	9403      	str	r4, [sp, #12]
   d5334:	2400      	movs	r4, #0
   d5336:	9402      	str	r4, [sp, #8]
   d5338:	f89d 401c 	ldrb.w	r4, [sp, #28]
   d533c:	9401      	str	r4, [sp, #4]
   d533e:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d5342:	9400      	str	r4, [sp, #0]
   d5344:	f7ff ff92 	bl	d526c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   d5348:	b004      	add	sp, #16
   d534a:	bd10      	pop	{r4, pc}

000d534c <_ZN4MQTT7publishEPKcS1_>:
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
   d534c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d534e:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d5350:	4610      	mov	r0, r2
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
   d5352:	460e      	mov	r6, r1
   d5354:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d5356:	f002 ff17 	bl	d8188 <strlen>
   d535a:	2300      	movs	r3, #0
   d535c:	9302      	str	r3, [sp, #8]
   d535e:	9301      	str	r3, [sp, #4]
   d5360:	9300      	str	r3, [sp, #0]
   d5362:	4622      	mov	r2, r4
   d5364:	4603      	mov	r3, r0
   d5366:	4631      	mov	r1, r6
   d5368:	4628      	mov	r0, r5
   d536a:	f7ff ffe0 	bl	d532e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   d536e:	b004      	add	sp, #16
   d5370:	bd70      	pop	{r4, r5, r6, pc}

000d5372 <_ZN4MQTT14publishReleaseEt>:
        return write(header, buffer, length-5);
    }
    return false;
}

bool MQTT::publishRelease(uint16_t messageid) {
   d5372:	b538      	push	{r3, r4, r5, lr}
   d5374:	4604      	mov	r4, r0
   d5376:	460d      	mov	r5, r1
    if (isConnected()) {
   d5378:	f7ff fe84 	bl	d5084 <_ZN4MQTT11isConnectedEv>
   d537c:	b190      	cbz	r0, d53a4 <_ZN4MQTT14publishReleaseEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   d537e:	69e3      	ldr	r3, [r4, #28]
   d5380:	2262      	movs	r2, #98	; 0x62
   d5382:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d5384:	69e3      	ldr	r3, [r4, #28]
   d5386:	2202      	movs	r2, #2
   d5388:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d538a:	69e3      	ldr	r3, [r4, #28]
   d538c:	122a      	asrs	r2, r5, #8
   d538e:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d5390:	69e3      	ldr	r3, [r4, #28]
   d5392:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d5394:	2204      	movs	r2, #4
   d5396:	69e1      	ldr	r1, [r4, #28]
   d5398:	4620      	mov	r0, r4
   d539a:	f001 fa34 	bl	d6806 <_ZN9TCPClient5writeEPKhj>
   d539e:	3000      	adds	r0, #0
   d53a0:	bf18      	it	ne
   d53a2:	2001      	movne	r0, #1
    }
    return false;
}
   d53a4:	bd38      	pop	{r3, r4, r5, pc}

000d53a6 <_ZN4MQTT15publishCompleteEt>:

bool MQTT::publishComplete(uint16_t messageid) {
   d53a6:	b538      	push	{r3, r4, r5, lr}
   d53a8:	4604      	mov	r4, r0
   d53aa:	460d      	mov	r5, r1
    if (isConnected()) {
   d53ac:	f7ff fe6a 	bl	d5084 <_ZN4MQTT11isConnectedEv>
   d53b0:	b190      	cbz	r0, d53d8 <_ZN4MQTT15publishCompleteEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   d53b2:	69e3      	ldr	r3, [r4, #28]
   d53b4:	2272      	movs	r2, #114	; 0x72
   d53b6:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d53b8:	69e3      	ldr	r3, [r4, #28]
   d53ba:	2202      	movs	r2, #2
   d53bc:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d53be:	69e3      	ldr	r3, [r4, #28]
   d53c0:	122a      	asrs	r2, r5, #8
   d53c2:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d53c4:	69e3      	ldr	r3, [r4, #28]
   d53c6:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d53c8:	2204      	movs	r2, #4
   d53ca:	69e1      	ldr	r1, [r4, #28]
   d53cc:	4620      	mov	r0, r4
   d53ce:	f001 fa1a 	bl	d6806 <_ZN9TCPClient5writeEPKhj>
   d53d2:	3000      	adds	r0, #0
   d53d4:	bf18      	it	ne
   d53d6:	2001      	movne	r0, #1
    }
    return false;
}
   d53d8:	bd38      	pop	{r3, r4, r5, pc}

000d53da <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
   d53da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d53de:	b083      	sub	sp, #12
   d53e0:	af00      	add	r7, sp, #0
   d53e2:	4604      	mov	r4, r0
    if (isConnected()) {
   d53e4:	f7ff fe4e 	bl	d5084 <_ZN4MQTT11isConnectedEv>
   d53e8:	4681      	mov	r9, r0
   d53ea:	2800      	cmp	r0, #0
   d53ec:	f000 80f6 	beq.w	d55dc <_ZN4MQTT4loopEv+0x202>
   d53f0:	f000 f9a0 	bl	d5734 <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   d53f4:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d53f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d53fa:	4353      	muls	r3, r2
   d53fc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d53fe:	1a82      	subs	r2, r0, r2
   d5400:	429a      	cmp	r2, r3
   d5402:	4605      	mov	r5, r0
   d5404:	d803      	bhi.n	d540e <_ZN4MQTT4loopEv+0x34>
   d5406:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d5408:	1a82      	subs	r2, r0, r2
   d540a:	4293      	cmp	r3, r2
   d540c:	d217      	bcs.n	d543e <_ZN4MQTT4loopEv+0x64>
            if (pingOutstanding) {
   d540e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d5412:	b12b      	cbz	r3, d5420 <_ZN4MQTT4loopEv+0x46>
                _client.stop();
   d5414:	4620      	mov	r0, r4
   d5416:	f001 fbdf 	bl	d6bd8 <_ZN9TCPClient4stopEv>
                return false;
   d541a:	f04f 0900 	mov.w	r9, #0
   d541e:	e0dd      	b.n	d55dc <_ZN4MQTT4loopEv+0x202>
            } else {
                buffer[0] = MQTTPINGREQ;
   d5420:	69e2      	ldr	r2, [r4, #28]
   d5422:	21c0      	movs	r1, #192	; 0xc0
   d5424:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   d5426:	69e2      	ldr	r2, [r4, #28]
   d5428:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   d542a:	69e1      	ldr	r1, [r4, #28]
   d542c:	2202      	movs	r2, #2
   d542e:	4620      	mov	r0, r4
   d5430:	f001 f9e9 	bl	d6806 <_ZN9TCPClient5writeEPKhj>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
   d5434:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                _client.write(buffer,2);
                lastOutActivity = t;
   d5436:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
   d5438:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
   d543a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (_client.available()) {
   d543e:	4620      	mov	r0, r4
   d5440:	f001 fbe2 	bl	d6c08 <_ZN9TCPClient9availableEv>
   d5444:	2800      	cmp	r0, #0
   d5446:	f000 80c9 	beq.w	d55dc <_ZN4MQTT4loopEv+0x202>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d544a:	1df9      	adds	r1, r7, #7
   d544c:	4620      	mov	r0, r4
   d544e:	f7ff fd5f 	bl	d4f10 <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
   d5452:	4602      	mov	r2, r0
   d5454:	2800      	cmp	r0, #0
   d5456:	f000 80c1 	beq.w	d55dc <_ZN4MQTT4loopEv+0x202>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
   d545a:	69e3      	ldr	r3, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
   d545c:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   d545e:	7818      	ldrb	r0, [r3, #0]
   d5460:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   d5464:	2930      	cmp	r1, #48	; 0x30
   d5466:	d17d      	bne.n	d5564 <_ZN4MQTT4loopEv+0x18a>
                    if (callback) {
   d5468:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
   d546c:	f1bb 0f00 	cmp.w	fp, #0
   d5470:	f000 80b4 	beq.w	d55dc <_ZN4MQTT4loopEv+0x202>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d5474:	f897 c007 	ldrb.w	ip, [r7, #7]
   d5478:	eb03 000c 	add.w	r0, r3, ip
              							_client.write(buffer, 4);
              							lastOutActivity = t;
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
   d547c:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d547e:	7881      	ldrb	r1, [r0, #2]
   d5480:	f890 e001 	ldrb.w	lr, [r0, #1]
   d5484:	eb01 2e0e 	add.w	lr, r1, lr, lsl #8
   d5488:	fa1f fe8e 	uxth.w	lr, lr
                        char topic[tl+1];
   d548c:	f10e 0108 	add.w	r1, lr, #8
   d5490:	f021 0107 	bic.w	r1, r1, #7
   d5494:	ebad 0d01 	sub.w	sp, sp, r1
   d5498:	4668      	mov	r0, sp
   d549a:	2100      	movs	r1, #0
                        for (uint16_t i=0;i<tl;i++) {
   d549c:	b28e      	uxth	r6, r1
   d549e:	45b6      	cmp	lr, r6
   d54a0:	d906      	bls.n	d54b0 <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
   d54a2:	eb0c 0601 	add.w	r6, ip, r1
   d54a6:	441e      	add	r6, r3
   d54a8:	78f6      	ldrb	r6, [r6, #3]
   d54aa:	5446      	strb	r6, [r0, r1]
   d54ac:	3101      	adds	r1, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
   d54ae:	e7f5      	b.n	d549c <_ZN4MQTT4loopEv+0xc2>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
   d54b0:	2100      	movs	r1, #0
   d54b2:	f800 100e 	strb.w	r1, [r0, lr]
   d54b6:	781e      	ldrb	r6, [r3, #0]
   d54b8:	f006 0606 	and.w	r6, r6, #6
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d54bc:	2e02      	cmp	r6, #2
   d54be:	f10c 0103 	add.w	r1, ip, #3
   d54c2:	ebcc 0202 	rsb	r2, ip, r2
   d54c6:	d11e      	bne.n	d5506 <_ZN4MQTT4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d54c8:	4471      	add	r1, lr
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d54ca:	ebce 0202 	rsb	r2, lr, r2
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d54ce:	f813 8001 	ldrb.w	r8, [r3, r1]
   d54d2:	4419      	add	r1, r3
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d54d4:	3a05      	subs	r2, #5
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d54d6:	7849      	ldrb	r1, [r1, #1]
   d54d8:	eb01 2808 	add.w	r8, r1, r8, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d54dc:	f10c 0105 	add.w	r1, ip, #5
   d54e0:	4471      	add	r1, lr
   d54e2:	4419      	add	r1, r3
   d54e4:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   d54e6:	69e3      	ldr	r3, [r4, #28]
   d54e8:	2240      	movs	r2, #64	; 0x40
   d54ea:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   d54ec:	69e3      	ldr	r3, [r4, #28]
   d54ee:	705e      	strb	r6, [r3, #1]
                            buffer[2] = (msgId >> 8);
   d54f0:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d54f2:	fa1f f888 	uxth.w	r8, r8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
   d54f6:	ea4f 2228 	mov.w	r2, r8, asr #8
   d54fa:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   d54fc:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
   d54fe:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
   d5500:	f883 8003 	strb.w	r8, [r3, #3]
   d5504:	e020      	b.n	d5548 <_ZN4MQTT4loopEv+0x16e>
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   d5506:	2e04      	cmp	r6, #4
   d5508:	d124      	bne.n	d5554 <_ZN4MQTT4loopEv+0x17a>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d550a:	4471      	add	r1, lr
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d550c:	ebce 0202 	rsb	r2, lr, r2
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5510:	f813 8001 	ldrb.w	r8, [r3, r1]
   d5514:	4419      	add	r1, r3
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d5516:	3a05      	subs	r2, #5
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5518:	7849      	ldrb	r1, [r1, #1]
   d551a:	eb01 2808 	add.w	r8, r1, r8, lsl #8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d551e:	f10c 0105 	add.w	r1, ip, #5
   d5522:	4471      	add	r1, lr
   d5524:	4419      	add	r1, r3
   d5526:	47d8      	blx	fp

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
   d5528:	69e3      	ldr	r3, [r4, #28]
   d552a:	2250      	movs	r2, #80	; 0x50
   d552c:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
   d552e:	69e3      	ldr	r3, [r4, #28]
   d5530:	2202      	movs	r2, #2
   d5532:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
   d5534:	69e3      	ldr	r3, [r4, #28]
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5536:	fa1f f888 	uxth.w	r8, r8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
   d553a:	ea4f 2228 	mov.w	r2, r8, asr #8
   d553e:	709a      	strb	r2, [r3, #2]
              							buffer[3] = (msgId & 0xFF);
   d5540:	69e3      	ldr	r3, [r4, #28]
              							_client.write(buffer, 4);
   d5542:	4632      	mov	r2, r6
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
              							buffer[3] = (msgId & 0xFF);
   d5544:	f883 8003 	strb.w	r8, [r3, #3]
              							_client.write(buffer, 4);
   d5548:	69e1      	ldr	r1, [r4, #28]
   d554a:	4620      	mov	r0, r4
   d554c:	f001 f95b 	bl	d6806 <_ZN9TCPClient5writeEPKhj>
              							lastOutActivity = t;
   d5550:	6265      	str	r5, [r4, #36]	; 0x24
   d5552:	e005      	b.n	d5560 <_ZN4MQTT4loopEv+0x186>
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
   d5554:	3a03      	subs	r2, #3
   d5556:	4471      	add	r1, lr
   d5558:	ebce 0202 	rsb	r2, lr, r2
   d555c:	4419      	add	r1, r3
   d555e:	47d8      	blx	fp
   d5560:	46d5      	mov	sp, sl
   d5562:	e03b      	b.n	d55dc <_ZN4MQTT4loopEv+0x202>
                        }
                    }
                } else if (type == MQTTPUBREC) {
   d5564:	2950      	cmp	r1, #80	; 0x50
   d5566:	d108      	bne.n	d557a <_ZN4MQTT4loopEv+0x1a0>
                    // check for the situation that QoS2 receive PUBREC, should return PUBREL
                    msgId = (buffer[2] << 8) + buffer[3];
                    this->publishRelease(msgId);
   d5568:	7899      	ldrb	r1, [r3, #2]
   d556a:	78db      	ldrb	r3, [r3, #3]
   d556c:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d5570:	b289      	uxth	r1, r1
   d5572:	4620      	mov	r0, r4
   d5574:	f7ff fefd 	bl	d5372 <_ZN4MQTT14publishReleaseEt>
   d5578:	e030      	b.n	d55dc <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBACK) {
   d557a:	2940      	cmp	r1, #64	; 0x40
   d557c:	d00c      	beq.n	d5598 <_ZN4MQTT4loopEv+0x1be>
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
                        }
                    }
                } else if (type == MQTTPUBREL) {
   d557e:	2960      	cmp	r1, #96	; 0x60
   d5580:	d108      	bne.n	d5594 <_ZN4MQTT4loopEv+0x1ba>
                  msgId = (buffer[2] << 8) + buffer[3];
                  this->publishComplete(msgId);
   d5582:	7899      	ldrb	r1, [r3, #2]
   d5584:	78db      	ldrb	r3, [r3, #3]
   d5586:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d558a:	b289      	uxth	r1, r1
   d558c:	4620      	mov	r0, r4
   d558e:	f7ff ff0a 	bl	d53a6 <_ZN4MQTT15publishCompleteEt>
   d5592:	e023      	b.n	d55dc <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBCOMP) {
   d5594:	2970      	cmp	r1, #112	; 0x70
   d5596:	d10d      	bne.n	d55b4 <_ZN4MQTT4loopEv+0x1da>
                  if (qoscallback) {
   d5598:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d559a:	b1f9      	cbz	r1, d55dc <_ZN4MQTT4loopEv+0x202>
                      // msgId only present for QOS==0
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   d559c:	2a04      	cmp	r2, #4
   d559e:	d11d      	bne.n	d55dc <_ZN4MQTT4loopEv+0x202>
   d55a0:	f010 0f06 	tst.w	r0, #6
   d55a4:	d11a      	bne.n	d55dc <_ZN4MQTT4loopEv+0x202>
                          msgId = (buffer[2]<<8)+buffer[3];
                          this->qoscallback(msgId);
   d55a6:	7898      	ldrb	r0, [r3, #2]
   d55a8:	78db      	ldrb	r3, [r3, #3]
   d55aa:	eb03 2000 	add.w	r0, r3, r0, lsl #8
   d55ae:	b280      	uxth	r0, r0
   d55b0:	4788      	blx	r1
   d55b2:	e013      	b.n	d55dc <_ZN4MQTT4loopEv+0x202>
                      }
                  }
                } else if (type == MQTTSUBACK) {
   d55b4:	2990      	cmp	r1, #144	; 0x90
   d55b6:	d011      	beq.n	d55dc <_ZN4MQTT4loopEv+0x202>
                    // if something...
                } else if (type == MQTTPINGREQ) {
   d55b8:	29c0      	cmp	r1, #192	; 0xc0
   d55ba:	d10a      	bne.n	d55d2 <_ZN4MQTT4loopEv+0x1f8>
                    buffer[0] = MQTTPINGRESP;
   d55bc:	22d0      	movs	r2, #208	; 0xd0
   d55be:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   d55c0:	69e3      	ldr	r3, [r4, #28]
   d55c2:	2200      	movs	r2, #0
   d55c4:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   d55c6:	69e1      	ldr	r1, [r4, #28]
   d55c8:	2202      	movs	r2, #2
   d55ca:	4620      	mov	r0, r4
   d55cc:	f001 f91b 	bl	d6806 <_ZN9TCPClient5writeEPKhj>
   d55d0:	e004      	b.n	d55dc <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPINGRESP) {
   d55d2:	29d0      	cmp	r1, #208	; 0xd0
                    pingOutstanding = false;
   d55d4:	bf04      	itt	eq
   d55d6:	2300      	moveq	r3, #0
   d55d8:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
            }
        }
        return true;
    }
    return false;
}
   d55dc:	4648      	mov	r0, r9
   d55de:	370c      	adds	r7, #12
   d55e0:	46bd      	mov	sp, r7
   d55e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d55e6 <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d55e6:	b510      	push	{r4, lr}
   d55e8:	4604      	mov	r4, r0
    if (isConnected()) {
   d55ea:	f7ff fd4b 	bl	d5084 <_ZN4MQTT11isConnectedEv>
   d55ee:	b110      	cbz	r0, d55f6 <_ZN4MQTTD1Ev+0x10>
        disconnect();
   d55f0:	4620      	mov	r0, r4
   d55f2:	f7ff fd19 	bl	d5028 <_ZN4MQTT10disconnectEv>
    }

    if (buffer != NULL)
   d55f6:	69e0      	ldr	r0, [r4, #28]
   d55f8:	b108      	cbz	r0, d55fe <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
   d55fa:	f7fe fd52 	bl	d40a2 <_ZdaPv>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d55fe:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d5602:	f000 fbe3 	bl	d5dcc <_ZN6StringD1Ev>
   d5606:	4620      	mov	r0, r4
   d5608:	f7ff fc0e 	bl	d4e28 <_ZN9TCPClientD1Ev>
        disconnect();
    }

    if (buffer != NULL)
      delete[] buffer;
}
   d560c:	4620      	mov	r0, r4
   d560e:	bd10      	pop	{r4, pc}

000d5610 <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
   d5610:	f000 b810 	b.w	d5634 <HAL_Pin_Map>

000d5614 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5614:	b508      	push	{r3, lr}
   d5616:	4b02      	ldr	r3, [pc, #8]	; (d5620 <netdb_freeaddrinfo+0xc>)
   d5618:	681b      	ldr	r3, [r3, #0]
   d561a:	689b      	ldr	r3, [r3, #8]
   d561c:	9301      	str	r3, [sp, #4]
   d561e:	bd08      	pop	{r3, pc}
   d5620:	00030268 	.word	0x00030268

000d5624 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5624:	b508      	push	{r3, lr}
   d5626:	4b02      	ldr	r3, [pc, #8]	; (d5630 <netdb_getaddrinfo+0xc>)
   d5628:	681b      	ldr	r3, [r3, #0]
   d562a:	68db      	ldr	r3, [r3, #12]
   d562c:	9301      	str	r3, [sp, #4]
   d562e:	bd08      	pop	{r3, pc}
   d5630:	00030268 	.word	0x00030268

000d5634 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5634:	b508      	push	{r3, lr}
   d5636:	4b02      	ldr	r3, [pc, #8]	; (d5640 <HAL_Pin_Map+0xc>)
   d5638:	681b      	ldr	r3, [r3, #0]
   d563a:	681b      	ldr	r3, [r3, #0]
   d563c:	9301      	str	r3, [sp, #4]
   d563e:	bd08      	pop	{r3, pc}
   d5640:	0003022c 	.word	0x0003022c

000d5644 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5644:	b508      	push	{r3, lr}
   d5646:	4b02      	ldr	r3, [pc, #8]	; (d5650 <HAL_Validate_Pin_Function+0xc>)
   d5648:	681b      	ldr	r3, [r3, #0]
   d564a:	685b      	ldr	r3, [r3, #4]
   d564c:	9301      	str	r3, [sp, #4]
   d564e:	bd08      	pop	{r3, pc}
   d5650:	0003022c 	.word	0x0003022c

000d5654 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5654:	b508      	push	{r3, lr}
   d5656:	4b02      	ldr	r3, [pc, #8]	; (d5660 <HAL_Pin_Mode+0xc>)
   d5658:	681b      	ldr	r3, [r3, #0]
   d565a:	689b      	ldr	r3, [r3, #8]
   d565c:	9301      	str	r3, [sp, #4]
   d565e:	bd08      	pop	{r3, pc}
   d5660:	0003022c 	.word	0x0003022c

000d5664 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5664:	b508      	push	{r3, lr}
   d5666:	4b02      	ldr	r3, [pc, #8]	; (d5670 <HAL_Get_Pin_Mode+0xc>)
   d5668:	681b      	ldr	r3, [r3, #0]
   d566a:	68db      	ldr	r3, [r3, #12]
   d566c:	9301      	str	r3, [sp, #4]
   d566e:	bd08      	pop	{r3, pc}
   d5670:	0003022c 	.word	0x0003022c

000d5674 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5674:	b508      	push	{r3, lr}
   d5676:	4b02      	ldr	r3, [pc, #8]	; (d5680 <HAL_GPIO_Write+0xc>)
   d5678:	681b      	ldr	r3, [r3, #0]
   d567a:	691b      	ldr	r3, [r3, #16]
   d567c:	9301      	str	r3, [sp, #4]
   d567e:	bd08      	pop	{r3, pc}
   d5680:	0003022c 	.word	0x0003022c

000d5684 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d5684:	b508      	push	{r3, lr}
   d5686:	4b02      	ldr	r3, [pc, #8]	; (d5690 <HAL_Interrupts_Attach+0xc>)
   d5688:	681b      	ldr	r3, [r3, #0]
   d568a:	699b      	ldr	r3, [r3, #24]
   d568c:	9301      	str	r3, [sp, #4]
   d568e:	bd08      	pop	{r3, pc}
   d5690:	0003022c 	.word	0x0003022c

000d5694 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d5694:	b508      	push	{r3, lr}
   d5696:	4b02      	ldr	r3, [pc, #8]	; (d56a0 <HAL_Interrupts_Detach+0xc>)
   d5698:	681b      	ldr	r3, [r3, #0]
   d569a:	69db      	ldr	r3, [r3, #28]
   d569c:	9301      	str	r3, [sp, #4]
   d569e:	bd08      	pop	{r3, pc}
   d56a0:	0003022c 	.word	0x0003022c

000d56a4 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d56a4:	b508      	push	{r3, lr}
   d56a6:	4b02      	ldr	r3, [pc, #8]	; (d56b0 <HAL_Interrupts_Enable_All+0xc>)
   d56a8:	681b      	ldr	r3, [r3, #0]
   d56aa:	6a1b      	ldr	r3, [r3, #32]
   d56ac:	9301      	str	r3, [sp, #4]
   d56ae:	bd08      	pop	{r3, pc}
   d56b0:	0003022c 	.word	0x0003022c

000d56b4 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d56b4:	b508      	push	{r3, lr}
   d56b6:	4b02      	ldr	r3, [pc, #8]	; (d56c0 <HAL_Interrupts_Disable_All+0xc>)
   d56b8:	681b      	ldr	r3, [r3, #0]
   d56ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d56bc:	9301      	str	r3, [sp, #4]
   d56be:	bd08      	pop	{r3, pc}
   d56c0:	0003022c 	.word	0x0003022c

000d56c4 <HAL_ADC_Read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d56c4:	b508      	push	{r3, lr}
   d56c6:	4b02      	ldr	r3, [pc, #8]	; (d56d0 <HAL_ADC_Read+0xc>)
   d56c8:	681b      	ldr	r3, [r3, #0]
   d56ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d56cc:	9301      	str	r3, [sp, #4]
   d56ce:	bd08      	pop	{r3, pc}
   d56d0:	0003022c 	.word	0x0003022c

000d56d4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d56d4:	b508      	push	{r3, lr}
   d56d6:	4b02      	ldr	r3, [pc, #8]	; (d56e0 <HAL_SPI_Init+0xc>)
   d56d8:	681b      	ldr	r3, [r3, #0]
   d56da:	69db      	ldr	r3, [r3, #28]
   d56dc:	9301      	str	r3, [sp, #4]
   d56de:	bd08      	pop	{r3, pc}
   d56e0:	00030230 	.word	0x00030230

000d56e4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d56e4:	b508      	push	{r3, lr}
   d56e6:	4b02      	ldr	r3, [pc, #8]	; (d56f0 <HAL_SPI_Is_Enabled+0xc>)
   d56e8:	681b      	ldr	r3, [r3, #0]
   d56ea:	6a1b      	ldr	r3, [r3, #32]
   d56ec:	9301      	str	r3, [sp, #4]
   d56ee:	bd08      	pop	{r3, pc}
   d56f0:	00030230 	.word	0x00030230

000d56f4 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d56f4:	b508      	push	{r3, lr}
   d56f6:	4b02      	ldr	r3, [pc, #8]	; (d5700 <if_index_to_name+0xc>)
   d56f8:	681b      	ldr	r3, [r3, #0]
   d56fa:	695b      	ldr	r3, [r3, #20]
   d56fc:	9301      	str	r3, [sp, #4]
   d56fe:	bd08      	pop	{r3, pc}
   d5700:	0003026c 	.word	0x0003026c

000d5704 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5704:	b508      	push	{r3, lr}
   d5706:	4b02      	ldr	r3, [pc, #8]	; (d5710 <HAL_RNG_GetRandomNumber+0xc>)
   d5708:	681b      	ldr	r3, [r3, #0]
   d570a:	685b      	ldr	r3, [r3, #4]
   d570c:	9301      	str	r3, [sp, #4]
   d570e:	bd08      	pop	{r3, pc}
   d5710:	00030218 	.word	0x00030218

000d5714 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d5714:	b508      	push	{r3, lr}
   d5716:	4b02      	ldr	r3, [pc, #8]	; (d5720 <HAL_Delay_Milliseconds+0xc>)
   d5718:	681b      	ldr	r3, [r3, #0]
   d571a:	689b      	ldr	r3, [r3, #8]
   d571c:	9301      	str	r3, [sp, #4]
   d571e:	bd08      	pop	{r3, pc}
   d5720:	00030218 	.word	0x00030218

000d5724 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5724:	b508      	push	{r3, lr}
   d5726:	4b02      	ldr	r3, [pc, #8]	; (d5730 <HAL_Delay_Microseconds+0xc>)
   d5728:	681b      	ldr	r3, [r3, #0]
   d572a:	68db      	ldr	r3, [r3, #12]
   d572c:	9301      	str	r3, [sp, #4]
   d572e:	bd08      	pop	{r3, pc}
   d5730:	00030218 	.word	0x00030218

000d5734 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5734:	b508      	push	{r3, lr}
   d5736:	4b02      	ldr	r3, [pc, #8]	; (d5740 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5738:	681b      	ldr	r3, [r3, #0]
   d573a:	695b      	ldr	r3, [r3, #20]
   d573c:	9301      	str	r3, [sp, #4]
   d573e:	bd08      	pop	{r3, pc}
   d5740:	00030218 	.word	0x00030218

000d5744 <HAL_disable_irq>:
DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
DYNALIB_FN(BASE_IDX + 11, hal, HAL_EEPROM_Length, size_t(void))

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
   d5744:	b508      	push	{r3, lr}
   d5746:	4b02      	ldr	r3, [pc, #8]	; (d5750 <HAL_disable_irq+0xc>)
   d5748:	681b      	ldr	r3, [r3, #0]
   d574a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d574c:	9301      	str	r3, [sp, #4]
   d574e:	bd08      	pop	{r3, pc}
   d5750:	00030218 	.word	0x00030218

000d5754 <HAL_enable_irq>:
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
   d5754:	b508      	push	{r3, lr}
   d5756:	4b02      	ldr	r3, [pc, #8]	; (d5760 <HAL_enable_irq+0xc>)
   d5758:	681b      	ldr	r3, [r3, #0]
   d575a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d575c:	9301      	str	r3, [sp, #4]
   d575e:	bd08      	pop	{r3, pc}
   d5760:	00030218 	.word	0x00030218

000d5764 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d5764:	b508      	push	{r3, lr}
   d5766:	4b02      	ldr	r3, [pc, #8]	; (d5770 <HAL_Core_System_Reset_Ex+0xc>)
   d5768:	681b      	ldr	r3, [r3, #0]
   d576a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d576c:	9301      	str	r3, [sp, #4]
   d576e:	bd08      	pop	{r3, pc}
   d5770:	00030234 	.word	0x00030234

000d5774 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d5774:	b508      	push	{r3, lr}
   d5776:	4b02      	ldr	r3, [pc, #8]	; (d5780 <os_thread_create+0xc>)
   d5778:	681b      	ldr	r3, [r3, #0]
   d577a:	685b      	ldr	r3, [r3, #4]
   d577c:	9301      	str	r3, [sp, #4]
   d577e:	bd08      	pop	{r3, pc}
   d5780:	00030248 	.word	0x00030248

000d5784 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5784:	b508      	push	{r3, lr}
   d5786:	4b02      	ldr	r3, [pc, #8]	; (d5790 <os_thread_is_current+0xc>)
   d5788:	681b      	ldr	r3, [r3, #0]
   d578a:	689b      	ldr	r3, [r3, #8]
   d578c:	9301      	str	r3, [sp, #4]
   d578e:	bd08      	pop	{r3, pc}
   d5790:	00030248 	.word	0x00030248

000d5794 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5794:	b508      	push	{r3, lr}
   d5796:	4b02      	ldr	r3, [pc, #8]	; (d57a0 <os_thread_join+0xc>)
   d5798:	681b      	ldr	r3, [r3, #0]
   d579a:	691b      	ldr	r3, [r3, #16]
   d579c:	9301      	str	r3, [sp, #4]
   d579e:	bd08      	pop	{r3, pc}
   d57a0:	00030248 	.word	0x00030248

000d57a4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d57a4:	b508      	push	{r3, lr}
   d57a6:	4b02      	ldr	r3, [pc, #8]	; (d57b0 <os_thread_cleanup+0xc>)
   d57a8:	681b      	ldr	r3, [r3, #0]
   d57aa:	695b      	ldr	r3, [r3, #20]
   d57ac:	9301      	str	r3, [sp, #4]
   d57ae:	bd08      	pop	{r3, pc}
   d57b0:	00030248 	.word	0x00030248

000d57b4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d57b4:	b508      	push	{r3, lr}
   d57b6:	4b02      	ldr	r3, [pc, #8]	; (d57c0 <os_mutex_recursive_create+0xc>)
   d57b8:	681b      	ldr	r3, [r3, #0]
   d57ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d57bc:	9301      	str	r3, [sp, #4]
   d57be:	bd08      	pop	{r3, pc}
   d57c0:	00030248 	.word	0x00030248

000d57c4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d57c4:	b508      	push	{r3, lr}
   d57c6:	4b02      	ldr	r3, [pc, #8]	; (d57d0 <os_mutex_recursive_destroy+0xc>)
   d57c8:	681b      	ldr	r3, [r3, #0]
   d57ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d57cc:	9301      	str	r3, [sp, #4]
   d57ce:	bd08      	pop	{r3, pc}
   d57d0:	00030248 	.word	0x00030248

000d57d4 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d57d4:	b508      	push	{r3, lr}
   d57d6:	4b02      	ldr	r3, [pc, #8]	; (d57e0 <os_thread_exit+0xc>)
   d57d8:	681b      	ldr	r3, [r3, #0]
   d57da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d57dc:	9301      	str	r3, [sp, #4]
   d57de:	bd08      	pop	{r3, pc}
   d57e0:	00030248 	.word	0x00030248

000d57e4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d57e4:	b508      	push	{r3, lr}
   d57e6:	4b02      	ldr	r3, [pc, #8]	; (d57f0 <inet_inet_ntop+0xc>)
   d57e8:	681b      	ldr	r3, [r3, #0]
   d57ea:	695b      	ldr	r3, [r3, #20]
   d57ec:	9301      	str	r3, [sp, #4]
   d57ee:	bd08      	pop	{r3, pc}
   d57f0:	00030264 	.word	0x00030264

000d57f4 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d57f4:	b508      	push	{r3, lr}
   d57f6:	4b02      	ldr	r3, [pc, #8]	; (d5800 <inet_htonl+0xc>)
   d57f8:	681b      	ldr	r3, [r3, #0]
   d57fa:	6a1b      	ldr	r3, [r3, #32]
   d57fc:	9301      	str	r3, [sp, #4]
   d57fe:	bd08      	pop	{r3, pc}
   d5800:	00030264 	.word	0x00030264

000d5804 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5804:	b508      	push	{r3, lr}
   d5806:	4b02      	ldr	r3, [pc, #8]	; (d5810 <inet_htons+0xc>)
   d5808:	681b      	ldr	r3, [r3, #0]
   d580a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d580c:	9301      	str	r3, [sp, #4]
   d580e:	bd08      	pop	{r3, pc}
   d5810:	00030264 	.word	0x00030264

000d5814 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5814:	b508      	push	{r3, lr}
   d5816:	4b02      	ldr	r3, [pc, #8]	; (d5820 <HAL_USART_Init+0xc>)
   d5818:	681b      	ldr	r3, [r3, #0]
   d581a:	681b      	ldr	r3, [r3, #0]
   d581c:	9301      	str	r3, [sp, #4]
   d581e:	bd08      	pop	{r3, pc}
   d5820:	0003023c 	.word	0x0003023c

000d5824 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5824:	b508      	push	{r3, lr}
   d5826:	4b02      	ldr	r3, [pc, #8]	; (d5830 <HAL_USART_Write_Data+0xc>)
   d5828:	681b      	ldr	r3, [r3, #0]
   d582a:	68db      	ldr	r3, [r3, #12]
   d582c:	9301      	str	r3, [sp, #4]
   d582e:	bd08      	pop	{r3, pc}
   d5830:	0003023c 	.word	0x0003023c

000d5834 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5834:	b508      	push	{r3, lr}
   d5836:	4b02      	ldr	r3, [pc, #8]	; (d5840 <HAL_USART_Available_Data+0xc>)
   d5838:	681b      	ldr	r3, [r3, #0]
   d583a:	691b      	ldr	r3, [r3, #16]
   d583c:	9301      	str	r3, [sp, #4]
   d583e:	bd08      	pop	{r3, pc}
   d5840:	0003023c 	.word	0x0003023c

000d5844 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5844:	b508      	push	{r3, lr}
   d5846:	4b02      	ldr	r3, [pc, #8]	; (d5850 <HAL_USART_Read_Data+0xc>)
   d5848:	681b      	ldr	r3, [r3, #0]
   d584a:	695b      	ldr	r3, [r3, #20]
   d584c:	9301      	str	r3, [sp, #4]
   d584e:	bd08      	pop	{r3, pc}
   d5850:	0003023c 	.word	0x0003023c

000d5854 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5854:	b508      	push	{r3, lr}
   d5856:	4b02      	ldr	r3, [pc, #8]	; (d5860 <HAL_USART_Peek_Data+0xc>)
   d5858:	681b      	ldr	r3, [r3, #0]
   d585a:	699b      	ldr	r3, [r3, #24]
   d585c:	9301      	str	r3, [sp, #4]
   d585e:	bd08      	pop	{r3, pc}
   d5860:	0003023c 	.word	0x0003023c

000d5864 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5864:	b508      	push	{r3, lr}
   d5866:	4b02      	ldr	r3, [pc, #8]	; (d5870 <HAL_USART_Flush_Data+0xc>)
   d5868:	681b      	ldr	r3, [r3, #0]
   d586a:	69db      	ldr	r3, [r3, #28]
   d586c:	9301      	str	r3, [sp, #4]
   d586e:	bd08      	pop	{r3, pc}
   d5870:	0003023c 	.word	0x0003023c

000d5874 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5874:	b508      	push	{r3, lr}
   d5876:	4b02      	ldr	r3, [pc, #8]	; (d5880 <HAL_USART_Is_Enabled+0xc>)
   d5878:	681b      	ldr	r3, [r3, #0]
   d587a:	6a1b      	ldr	r3, [r3, #32]
   d587c:	9301      	str	r3, [sp, #4]
   d587e:	bd08      	pop	{r3, pc}
   d5880:	0003023c 	.word	0x0003023c

000d5884 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5884:	b508      	push	{r3, lr}
   d5886:	4b02      	ldr	r3, [pc, #8]	; (d5890 <HAL_USART_Available_Data_For_Write+0xc>)
   d5888:	681b      	ldr	r3, [r3, #0]
   d588a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d588c:	9301      	str	r3, [sp, #4]
   d588e:	bd08      	pop	{r3, pc}
   d5890:	0003023c 	.word	0x0003023c

000d5894 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5894:	b508      	push	{r3, lr}
   d5896:	4b02      	ldr	r3, [pc, #8]	; (d58a0 <HAL_I2C_Begin+0xc>)
   d5898:	681b      	ldr	r3, [r3, #0]
   d589a:	68db      	ldr	r3, [r3, #12]
   d589c:	9301      	str	r3, [sp, #4]
   d589e:	bd08      	pop	{r3, pc}
   d58a0:	00030228 	.word	0x00030228

000d58a4 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d58a4:	b508      	push	{r3, lr}
   d58a6:	4b02      	ldr	r3, [pc, #8]	; (d58b0 <HAL_I2C_Begin_Transmission+0xc>)
   d58a8:	681b      	ldr	r3, [r3, #0]
   d58aa:	699b      	ldr	r3, [r3, #24]
   d58ac:	9301      	str	r3, [sp, #4]
   d58ae:	bd08      	pop	{r3, pc}
   d58b0:	00030228 	.word	0x00030228

000d58b4 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d58b4:	b508      	push	{r3, lr}
   d58b6:	4b02      	ldr	r3, [pc, #8]	; (d58c0 <HAL_I2C_End_Transmission+0xc>)
   d58b8:	681b      	ldr	r3, [r3, #0]
   d58ba:	69db      	ldr	r3, [r3, #28]
   d58bc:	9301      	str	r3, [sp, #4]
   d58be:	bd08      	pop	{r3, pc}
   d58c0:	00030228 	.word	0x00030228

000d58c4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d58c4:	b508      	push	{r3, lr}
   d58c6:	4b02      	ldr	r3, [pc, #8]	; (d58d0 <HAL_I2C_Write_Data+0xc>)
   d58c8:	681b      	ldr	r3, [r3, #0]
   d58ca:	6a1b      	ldr	r3, [r3, #32]
   d58cc:	9301      	str	r3, [sp, #4]
   d58ce:	bd08      	pop	{r3, pc}
   d58d0:	00030228 	.word	0x00030228

000d58d4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d58d4:	b508      	push	{r3, lr}
   d58d6:	4b02      	ldr	r3, [pc, #8]	; (d58e0 <HAL_I2C_Available_Data+0xc>)
   d58d8:	681b      	ldr	r3, [r3, #0]
   d58da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d58dc:	9301      	str	r3, [sp, #4]
   d58de:	bd08      	pop	{r3, pc}
   d58e0:	00030228 	.word	0x00030228

000d58e4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d58e4:	b508      	push	{r3, lr}
   d58e6:	4b02      	ldr	r3, [pc, #8]	; (d58f0 <HAL_I2C_Read_Data+0xc>)
   d58e8:	681b      	ldr	r3, [r3, #0]
   d58ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d58ec:	9301      	str	r3, [sp, #4]
   d58ee:	bd08      	pop	{r3, pc}
   d58f0:	00030228 	.word	0x00030228

000d58f4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d58f4:	b508      	push	{r3, lr}
   d58f6:	4b02      	ldr	r3, [pc, #8]	; (d5900 <HAL_I2C_Peek_Data+0xc>)
   d58f8:	681b      	ldr	r3, [r3, #0]
   d58fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d58fc:	9301      	str	r3, [sp, #4]
   d58fe:	bd08      	pop	{r3, pc}
   d5900:	00030228 	.word	0x00030228

000d5904 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5904:	b508      	push	{r3, lr}
   d5906:	4b02      	ldr	r3, [pc, #8]	; (d5910 <HAL_I2C_Flush_Data+0xc>)
   d5908:	681b      	ldr	r3, [r3, #0]
   d590a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d590c:	9301      	str	r3, [sp, #4]
   d590e:	bd08      	pop	{r3, pc}
   d5910:	00030228 	.word	0x00030228

000d5914 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5914:	b508      	push	{r3, lr}
   d5916:	4b02      	ldr	r3, [pc, #8]	; (d5920 <HAL_I2C_Is_Enabled+0xc>)
   d5918:	681b      	ldr	r3, [r3, #0]
   d591a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d591c:	9301      	str	r3, [sp, #4]
   d591e:	bd08      	pop	{r3, pc}
   d5920:	00030228 	.word	0x00030228

000d5924 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5924:	b508      	push	{r3, lr}
   d5926:	4b02      	ldr	r3, [pc, #8]	; (d5930 <HAL_I2C_Init+0xc>)
   d5928:	681b      	ldr	r3, [r3, #0]
   d592a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d592c:	9301      	str	r3, [sp, #4]
   d592e:	bd08      	pop	{r3, pc}
   d5930:	00030228 	.word	0x00030228

000d5934 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d5934:	b508      	push	{r3, lr}
   d5936:	4b02      	ldr	r3, [pc, #8]	; (d5940 <HAL_I2C_Request_Data_Ex+0xc>)
   d5938:	681b      	ldr	r3, [r3, #0]
   d593a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d593c:	9301      	str	r3, [sp, #4]
   d593e:	bd08      	pop	{r3, pc}
   d5940:	00030228 	.word	0x00030228

000d5944 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5944:	b508      	push	{r3, lr}
   d5946:	4b02      	ldr	r3, [pc, #8]	; (d5950 <sock_setsockopt+0xc>)
   d5948:	681b      	ldr	r3, [r3, #0]
   d594a:	699b      	ldr	r3, [r3, #24]
   d594c:	9301      	str	r3, [sp, #4]
   d594e:	bd08      	pop	{r3, pc}
   d5950:	00030238 	.word	0x00030238

000d5954 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5954:	b508      	push	{r3, lr}
   d5956:	4b02      	ldr	r3, [pc, #8]	; (d5960 <sock_close+0xc>)
   d5958:	681b      	ldr	r3, [r3, #0]
   d595a:	69db      	ldr	r3, [r3, #28]
   d595c:	9301      	str	r3, [sp, #4]
   d595e:	bd08      	pop	{r3, pc}
   d5960:	00030238 	.word	0x00030238

000d5964 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d5964:	b508      	push	{r3, lr}
   d5966:	4b02      	ldr	r3, [pc, #8]	; (d5970 <sock_connect+0xc>)
   d5968:	681b      	ldr	r3, [r3, #0]
   d596a:	6a1b      	ldr	r3, [r3, #32]
   d596c:	9301      	str	r3, [sp, #4]
   d596e:	bd08      	pop	{r3, pc}
   d5970:	00030238 	.word	0x00030238

000d5974 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d5974:	b508      	push	{r3, lr}
   d5976:	4b02      	ldr	r3, [pc, #8]	; (d5980 <sock_recv+0xc>)
   d5978:	681b      	ldr	r3, [r3, #0]
   d597a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d597c:	9301      	str	r3, [sp, #4]
   d597e:	bd08      	pop	{r3, pc}
   d5980:	00030238 	.word	0x00030238

000d5984 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d5984:	b508      	push	{r3, lr}
   d5986:	4b02      	ldr	r3, [pc, #8]	; (d5990 <sock_send+0xc>)
   d5988:	681b      	ldr	r3, [r3, #0]
   d598a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d598c:	9301      	str	r3, [sp, #4]
   d598e:	bd08      	pop	{r3, pc}
   d5990:	00030238 	.word	0x00030238

000d5994 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5994:	b508      	push	{r3, lr}
   d5996:	4b02      	ldr	r3, [pc, #8]	; (d59a0 <sock_socket+0xc>)
   d5998:	681b      	ldr	r3, [r3, #0]
   d599a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d599c:	9301      	str	r3, [sp, #4]
   d599e:	bd08      	pop	{r3, pc}
   d59a0:	00030238 	.word	0x00030238

000d59a4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d59a4:	b508      	push	{r3, lr}
   d59a6:	4b02      	ldr	r3, [pc, #8]	; (d59b0 <HAL_USB_USART_Init+0xc>)
   d59a8:	681b      	ldr	r3, [r3, #0]
   d59aa:	681b      	ldr	r3, [r3, #0]
   d59ac:	9301      	str	r3, [sp, #4]
   d59ae:	bd08      	pop	{r3, pc}
   d59b0:	0003024c 	.word	0x0003024c

000d59b4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d59b4:	b508      	push	{r3, lr}
   d59b6:	4b02      	ldr	r3, [pc, #8]	; (d59c0 <HAL_USB_USART_Available_Data+0xc>)
   d59b8:	681b      	ldr	r3, [r3, #0]
   d59ba:	691b      	ldr	r3, [r3, #16]
   d59bc:	9301      	str	r3, [sp, #4]
   d59be:	bd08      	pop	{r3, pc}
   d59c0:	0003024c 	.word	0x0003024c

000d59c4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d59c4:	b508      	push	{r3, lr}
   d59c6:	4b02      	ldr	r3, [pc, #8]	; (d59d0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d59c8:	681b      	ldr	r3, [r3, #0]
   d59ca:	695b      	ldr	r3, [r3, #20]
   d59cc:	9301      	str	r3, [sp, #4]
   d59ce:	bd08      	pop	{r3, pc}
   d59d0:	0003024c 	.word	0x0003024c

000d59d4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d59d4:	b508      	push	{r3, lr}
   d59d6:	4b02      	ldr	r3, [pc, #8]	; (d59e0 <HAL_USB_USART_Receive_Data+0xc>)
   d59d8:	681b      	ldr	r3, [r3, #0]
   d59da:	699b      	ldr	r3, [r3, #24]
   d59dc:	9301      	str	r3, [sp, #4]
   d59de:	bd08      	pop	{r3, pc}
   d59e0:	0003024c 	.word	0x0003024c

000d59e4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d59e4:	b508      	push	{r3, lr}
   d59e6:	4b02      	ldr	r3, [pc, #8]	; (d59f0 <HAL_USB_USART_Send_Data+0xc>)
   d59e8:	681b      	ldr	r3, [r3, #0]
   d59ea:	69db      	ldr	r3, [r3, #28]
   d59ec:	9301      	str	r3, [sp, #4]
   d59ee:	bd08      	pop	{r3, pc}
   d59f0:	0003024c 	.word	0x0003024c

000d59f4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d59f4:	b508      	push	{r3, lr}
   d59f6:	4b02      	ldr	r3, [pc, #8]	; (d5a00 <HAL_USB_USART_Flush_Data+0xc>)
   d59f8:	681b      	ldr	r3, [r3, #0]
   d59fa:	6a1b      	ldr	r3, [r3, #32]
   d59fc:	9301      	str	r3, [sp, #4]
   d59fe:	bd08      	pop	{r3, pc}
   d5a00:	0003024c 	.word	0x0003024c

000d5a04 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5a04:	b508      	push	{r3, lr}
   d5a06:	4b02      	ldr	r3, [pc, #8]	; (d5a10 <panic_+0xc>)
   d5a08:	681b      	ldr	r3, [r3, #0]
   d5a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5a0c:	9301      	str	r3, [sp, #4]
   d5a0e:	bd08      	pop	{r3, pc}
   d5a10:	00030260 	.word	0x00030260

000d5a14 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5a14:	b508      	push	{r3, lr}
   d5a16:	4b02      	ldr	r3, [pc, #8]	; (d5a20 <log_message+0xc>)
   d5a18:	681b      	ldr	r3, [r3, #0]
   d5a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5a1c:	9301      	str	r3, [sp, #4]
   d5a1e:	bd08      	pop	{r3, pc}
   d5a20:	00030260 	.word	0x00030260

000d5a24 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5a24:	b508      	push	{r3, lr}
   d5a26:	4b02      	ldr	r3, [pc, #8]	; (d5a30 <set_system_mode+0xc>)
   d5a28:	681b      	ldr	r3, [r3, #0]
   d5a2a:	685b      	ldr	r3, [r3, #4]
   d5a2c:	9301      	str	r3, [sp, #4]
   d5a2e:	bd08      	pop	{r3, pc}
   d5a30:	00030220 	.word	0x00030220

000d5a34 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5a34:	b508      	push	{r3, lr}
   d5a36:	4b02      	ldr	r3, [pc, #8]	; (d5a40 <system_delay_ms+0xc>)
   d5a38:	681b      	ldr	r3, [r3, #0]
   d5a3a:	695b      	ldr	r3, [r3, #20]
   d5a3c:	9301      	str	r3, [sp, #4]
   d5a3e:	bd08      	pop	{r3, pc}
   d5a40:	00030220 	.word	0x00030220

000d5a44 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5a44:	b508      	push	{r3, lr}
   d5a46:	4b03      	ldr	r3, [pc, #12]	; (d5a54 <system_ctrl_set_app_request_handler+0x10>)
   d5a48:	681b      	ldr	r3, [r3, #0]
   d5a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5a4e:	9301      	str	r3, [sp, #4]
   d5a50:	bd08      	pop	{r3, pc}
   d5a52:	0000      	.short	0x0000
   d5a54:	00030220 	.word	0x00030220

000d5a58 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5a58:	b508      	push	{r3, lr}
   d5a5a:	4b03      	ldr	r3, [pc, #12]	; (d5a68 <system_ctrl_set_result+0x10>)
   d5a5c:	681b      	ldr	r3, [r3, #0]
   d5a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5a62:	9301      	str	r3, [sp, #4]
   d5a64:	bd08      	pop	{r3, pc}
   d5a66:	0000      	.short	0x0000
   d5a68:	00030220 	.word	0x00030220

000d5a6c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5a6c:	b508      	push	{r3, lr}
   d5a6e:	4b02      	ldr	r3, [pc, #8]	; (d5a78 <network_connect+0xc>)
   d5a70:	681b      	ldr	r3, [r3, #0]
   d5a72:	685b      	ldr	r3, [r3, #4]
   d5a74:	9301      	str	r3, [sp, #4]
   d5a76:	bd08      	pop	{r3, pc}
   d5a78:	00030240 	.word	0x00030240

000d5a7c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5a7c:	b508      	push	{r3, lr}
   d5a7e:	4b02      	ldr	r3, [pc, #8]	; (d5a88 <network_connecting+0xc>)
   d5a80:	681b      	ldr	r3, [r3, #0]
   d5a82:	689b      	ldr	r3, [r3, #8]
   d5a84:	9301      	str	r3, [sp, #4]
   d5a86:	bd08      	pop	{r3, pc}
   d5a88:	00030240 	.word	0x00030240

000d5a8c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5a8c:	b508      	push	{r3, lr}
   d5a8e:	4b02      	ldr	r3, [pc, #8]	; (d5a98 <network_disconnect+0xc>)
   d5a90:	681b      	ldr	r3, [r3, #0]
   d5a92:	68db      	ldr	r3, [r3, #12]
   d5a94:	9301      	str	r3, [sp, #4]
   d5a96:	bd08      	pop	{r3, pc}
   d5a98:	00030240 	.word	0x00030240

000d5a9c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5a9c:	b508      	push	{r3, lr}
   d5a9e:	4b02      	ldr	r3, [pc, #8]	; (d5aa8 <network_ready+0xc>)
   d5aa0:	681b      	ldr	r3, [r3, #0]
   d5aa2:	691b      	ldr	r3, [r3, #16]
   d5aa4:	9301      	str	r3, [sp, #4]
   d5aa6:	bd08      	pop	{r3, pc}
   d5aa8:	00030240 	.word	0x00030240

000d5aac <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5aac:	b508      	push	{r3, lr}
   d5aae:	4b02      	ldr	r3, [pc, #8]	; (d5ab8 <network_on+0xc>)
   d5ab0:	681b      	ldr	r3, [r3, #0]
   d5ab2:	695b      	ldr	r3, [r3, #20]
   d5ab4:	9301      	str	r3, [sp, #4]
   d5ab6:	bd08      	pop	{r3, pc}
   d5ab8:	00030240 	.word	0x00030240

000d5abc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5abc:	b508      	push	{r3, lr}
   d5abe:	4b02      	ldr	r3, [pc, #8]	; (d5ac8 <network_off+0xc>)
   d5ac0:	681b      	ldr	r3, [r3, #0]
   d5ac2:	699b      	ldr	r3, [r3, #24]
   d5ac4:	9301      	str	r3, [sp, #4]
   d5ac6:	bd08      	pop	{r3, pc}
   d5ac8:	00030240 	.word	0x00030240

000d5acc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5acc:	b508      	push	{r3, lr}
   d5ace:	4b02      	ldr	r3, [pc, #8]	; (d5ad8 <network_listen+0xc>)
   d5ad0:	681b      	ldr	r3, [r3, #0]
   d5ad2:	69db      	ldr	r3, [r3, #28]
   d5ad4:	9301      	str	r3, [sp, #4]
   d5ad6:	bd08      	pop	{r3, pc}
   d5ad8:	00030240 	.word	0x00030240

000d5adc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5adc:	b508      	push	{r3, lr}
   d5ade:	4b02      	ldr	r3, [pc, #8]	; (d5ae8 <network_listening+0xc>)
   d5ae0:	681b      	ldr	r3, [r3, #0]
   d5ae2:	6a1b      	ldr	r3, [r3, #32]
   d5ae4:	9301      	str	r3, [sp, #4]
   d5ae6:	bd08      	pop	{r3, pc}
   d5ae8:	00030240 	.word	0x00030240

000d5aec <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5aec:	b508      	push	{r3, lr}
   d5aee:	4b02      	ldr	r3, [pc, #8]	; (d5af8 <network_set_listen_timeout+0xc>)
   d5af0:	681b      	ldr	r3, [r3, #0]
   d5af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5af4:	9301      	str	r3, [sp, #4]
   d5af6:	bd08      	pop	{r3, pc}
   d5af8:	00030240 	.word	0x00030240

000d5afc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5afc:	b508      	push	{r3, lr}
   d5afe:	4b02      	ldr	r3, [pc, #8]	; (d5b08 <network_get_listen_timeout+0xc>)
   d5b00:	681b      	ldr	r3, [r3, #0]
   d5b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5b04:	9301      	str	r3, [sp, #4]
   d5b06:	bd08      	pop	{r3, pc}
   d5b08:	00030240 	.word	0x00030240

000d5b0c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5b0c:	b508      	push	{r3, lr}
   d5b0e:	4b02      	ldr	r3, [pc, #8]	; (d5b18 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5b10:	681b      	ldr	r3, [r3, #0]
   d5b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5b14:	9301      	str	r3, [sp, #4]
   d5b16:	bd08      	pop	{r3, pc}
   d5b18:	00030244 	.word	0x00030244

000d5b1c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5b1c:	b508      	push	{r3, lr}
   d5b1e:	4b02      	ldr	r3, [pc, #8]	; (d5b28 <malloc+0xc>)
   d5b20:	681b      	ldr	r3, [r3, #0]
   d5b22:	681b      	ldr	r3, [r3, #0]
   d5b24:	9301      	str	r3, [sp, #4]
   d5b26:	bd08      	pop	{r3, pc}
   d5b28:	0003021c 	.word	0x0003021c

000d5b2c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5b2c:	b508      	push	{r3, lr}
   d5b2e:	4b02      	ldr	r3, [pc, #8]	; (d5b38 <free+0xc>)
   d5b30:	681b      	ldr	r3, [r3, #0]
   d5b32:	685b      	ldr	r3, [r3, #4]
   d5b34:	9301      	str	r3, [sp, #4]
   d5b36:	bd08      	pop	{r3, pc}
   d5b38:	0003021c 	.word	0x0003021c

000d5b3c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5b3c:	b508      	push	{r3, lr}
   d5b3e:	4b02      	ldr	r3, [pc, #8]	; (d5b48 <realloc+0xc>)
   d5b40:	681b      	ldr	r3, [r3, #0]
   d5b42:	689b      	ldr	r3, [r3, #8]
   d5b44:	9301      	str	r3, [sp, #4]
   d5b46:	bd08      	pop	{r3, pc}
   d5b48:	0003021c 	.word	0x0003021c

000d5b4c <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5b4c:	b508      	push	{r3, lr}
   d5b4e:	4b02      	ldr	r3, [pc, #8]	; (d5b58 <abort+0xc>)
   d5b50:	681b      	ldr	r3, [r3, #0]
   d5b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5b54:	9301      	str	r3, [sp, #4]
   d5b56:	bd08      	pop	{r3, pc}
   d5b58:	0003021c 	.word	0x0003021c

000d5b5c <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5b5c:	b508      	push	{r3, lr}
   d5b5e:	4b02      	ldr	r3, [pc, #8]	; (d5b68 <__errno+0xc>)
   d5b60:	681b      	ldr	r3, [r3, #0]
   d5b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5b64:	9301      	str	r3, [sp, #4]
   d5b66:	bd08      	pop	{r3, pc}
   d5b68:	0003021c 	.word	0x0003021c

000d5b6c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5b6c:	2200      	movs	r2, #0
   d5b6e:	4611      	mov	r1, r2
   d5b70:	6840      	ldr	r0, [r0, #4]
   d5b72:	f7ff bfb3 	b.w	d5adc <network_listening>

000d5b76 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5b76:	2200      	movs	r2, #0
   d5b78:	4611      	mov	r1, r2
   d5b7a:	6840      	ldr	r0, [r0, #4]
   d5b7c:	f7ff bfbe 	b.w	d5afc <network_get_listen_timeout>

000d5b80 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5b80:	2200      	movs	r2, #0
   d5b82:	6840      	ldr	r0, [r0, #4]
   d5b84:	f7ff bfb2 	b.w	d5aec <network_set_listen_timeout>

000d5b88 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5b88:	2200      	movs	r2, #0
   d5b8a:	f081 0101 	eor.w	r1, r1, #1
   d5b8e:	6840      	ldr	r0, [r0, #4]
   d5b90:	f7ff bf9c 	b.w	d5acc <network_listen>

000d5b94 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5b94:	2300      	movs	r3, #0
   d5b96:	461a      	mov	r2, r3
   d5b98:	4619      	mov	r1, r3
   d5b9a:	6840      	ldr	r0, [r0, #4]
   d5b9c:	f7ff bf8e 	b.w	d5abc <network_off>

000d5ba0 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5ba0:	2300      	movs	r3, #0
   d5ba2:	461a      	mov	r2, r3
   d5ba4:	4619      	mov	r1, r3
   d5ba6:	6840      	ldr	r0, [r0, #4]
   d5ba8:	f7ff bf80 	b.w	d5aac <network_on>

000d5bac <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5bac:	2200      	movs	r2, #0
   d5bae:	4611      	mov	r1, r2
   d5bb0:	6840      	ldr	r0, [r0, #4]
   d5bb2:	f7ff bf73 	b.w	d5a9c <network_ready>

000d5bb6 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5bb6:	2200      	movs	r2, #0
   d5bb8:	4611      	mov	r1, r2
   d5bba:	6840      	ldr	r0, [r0, #4]
   d5bbc:	f7ff bf5e 	b.w	d5a7c <network_connecting>

000d5bc0 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5bc0:	2200      	movs	r2, #0
   d5bc2:	2102      	movs	r1, #2
   d5bc4:	6840      	ldr	r0, [r0, #4]
   d5bc6:	f7ff bf61 	b.w	d5a8c <network_disconnect>

000d5bca <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5bca:	2300      	movs	r3, #0
   d5bcc:	461a      	mov	r2, r3
   d5bce:	6840      	ldr	r0, [r0, #4]
   d5bd0:	f7ff bf4c 	b.w	d5a6c <network_connect>

000d5bd4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5bd4:	4b02      	ldr	r3, [pc, #8]	; (d5be0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5bd6:	2203      	movs	r2, #3
   d5bd8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5bda:	4a02      	ldr	r2, [pc, #8]	; (d5be4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5bdc:	601a      	str	r2, [r3, #0]
   d5bde:	4770      	bx	lr
   d5be0:	2003e4d0 	.word	0x2003e4d0
   d5be4:	000d8218 	.word	0x000d8218

000d5be8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5be8:	b510      	push	{r4, lr}
   d5bea:	4604      	mov	r4, r0
{
    _spi = spi;
   d5bec:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d5bee:	4608      	mov	r0, r1
   d5bf0:	f7ff fd70 	bl	d56d4 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5bf4:	2300      	movs	r3, #0
   d5bf6:	6063      	str	r3, [r4, #4]
}
   d5bf8:	4620      	mov	r0, r4
   d5bfa:	bd10      	pop	{r4, pc}

000d5bfc <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d5bfc:	7800      	ldrb	r0, [r0, #0]
   d5bfe:	f7ff bd71 	b.w	d56e4 <HAL_SPI_Is_Enabled>

000d5c02 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5c02:	b510      	push	{r4, lr}
   d5c04:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5c06:	6800      	ldr	r0, [r0, #0]
   d5c08:	b118      	cbz	r0, d5c12 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d5c0a:	f7ff ff8f 	bl	d5b2c <free>
            wakeupSource_ = nullptr;
   d5c0e:	2300      	movs	r3, #0
   d5c10:	6023      	str	r3, [r4, #0]
   d5c12:	bd10      	pop	{r4, pc}

000d5c14 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5c14:	b510      	push	{r4, lr}
   d5c16:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d5c18:	f7ff fff3 	bl	d5c02 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5c1c:	4620      	mov	r0, r4
   d5c1e:	bd10      	pop	{r4, pc}

000d5c20 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d5c20:	4601      	mov	r1, r0
   d5c22:	2200      	movs	r2, #0
   d5c24:	208c      	movs	r0, #140	; 0x8c
   d5c26:	f7ff bd9d 	b.w	d5764 <HAL_Core_System_Reset_Ex>

000d5c2a <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d5c2a:	2000      	movs	r0, #0
   d5c2c:	f7ff bff8 	b.w	d5c20 <_ZN11SystemClass5resetEm>

000d5c30 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5c30:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5c32:	4c09      	ldr	r4, [pc, #36]	; (d5c58 <_GLOBAL__sub_I_System+0x28>)
   d5c34:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5c36:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5c3a:	6020      	str	r0, [r4, #0]
   d5c3c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5c3e:	71a0      	strb	r0, [r4, #6]
   d5c40:	8120      	strh	r0, [r4, #8]
   d5c42:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5c44:	f7ff feee 	bl	d5a24 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5c48:	4620      	mov	r0, r4
   d5c4a:	4a04      	ldr	r2, [pc, #16]	; (d5c5c <_GLOBAL__sub_I_System+0x2c>)
   d5c4c:	4904      	ldr	r1, [pc, #16]	; (d5c60 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5c4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5c52:	f001 ba71 	b.w	d7138 <__aeabi_atexit>
   d5c56:	bf00      	nop
   d5c58:	2003e4d8 	.word	0x2003e4d8
   d5c5c:	2003e408 	.word	0x2003e408
   d5c60:	000d5c15 	.word	0x000d5c15

000d5c64 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d5c64:	b510      	push	{r4, lr}
   d5c66:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d5c68:	f002 fa8e 	bl	d8188 <strlen>
   d5c6c:	3801      	subs	r0, #1
   d5c6e:	1823      	adds	r3, r4, r0
   d5c70:	4620      	mov	r0, r4
	while(i<j){
   d5c72:	4298      	cmp	r0, r3
   d5c74:	d206      	bcs.n	d5c84 <_Z11str_reversePc+0x20>
		c = *i;
   d5c76:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d5c78:	7819      	ldrb	r1, [r3, #0]
   d5c7a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d5c7e:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d5c82:	e7f6      	b.n	d5c72 <_Z11str_reversePc+0xe>
   d5c84:	bd10      	pop	{r4, pc}

000d5c86 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5c86:	b570      	push	{r4, r5, r6, lr}
   d5c88:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d5c8a:	1e91      	subs	r1, r2, #2
   d5c8c:	2922      	cmp	r1, #34	; 0x22
   d5c8e:	d820      	bhi.n	d5cd2 <ultoa+0x4c>
   d5c90:	4625      	mov	r5, r4
   d5c92:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5c94:	b910      	cbnz	r0, d5c9c <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5c96:	4423      	add	r3, r4
            *ptr++ = '0';
   d5c98:	2230      	movs	r2, #48	; 0x30
   d5c9a:	e00e      	b.n	d5cba <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d5c9c:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d5ca0:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d5ca4:	b2c1      	uxtb	r1, r0
   d5ca6:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d5caa:	2809      	cmp	r0, #9
                *ptr += '0';
   d5cac:	bf94      	ite	ls
   d5cae:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d5cb0:	3157      	addhi	r1, #87	; 0x57
   d5cb2:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d5cb6:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5cb8:	e7eb      	b.n	d5c92 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5cba:	4299      	cmp	r1, r3
   d5cbc:	d202      	bcs.n	d5cc4 <ultoa+0x3e>
            *ptr++ = '0';
   d5cbe:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5cc2:	e7fa      	b.n	d5cba <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d5cc4:	2300      	movs	r3, #0
	str_reverse(buffer);
   d5cc6:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d5cc8:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d5cca:	f7ff ffcb 	bl	d5c64 <_Z11str_reversePc>
	return buffer;
   d5cce:	4620      	mov	r0, r4
   d5cd0:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d5cd2:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d5cd4:	bd70      	pop	{r4, r5, r6, pc}

000d5cd6 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d5cd6:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d5cd8:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d5cda:	460c      	mov	r4, r1
   d5cdc:	4615      	mov	r5, r2
	if(a<0){
   d5cde:	da0b      	bge.n	d5cf8 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d5ce0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d5ce4:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d5ce8:	bf14      	ite	ne
   d5cea:	4258      	negne	r0, r3
   d5cec:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d5cee:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d5cf0:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d5cf2:	462a      	mov	r2, r5
   d5cf4:	4419      	add	r1, r3
   d5cf6:	e000      	b.n	d5cfa <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d5cf8:	2301      	movs	r3, #1
   d5cfa:	f7ff ffc4 	bl	d5c86 <ultoa>
	}
	return buffer;
}
   d5cfe:	4620      	mov	r0, r4
   d5d00:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5d04 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d5d04:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5d08:	ec59 8b10 	vmov	r8, r9, d0
   d5d0c:	4607      	mov	r7, r0
   d5d0e:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   d5d10:	2200      	movs	r2, #0
   d5d12:	2300      	movs	r3, #0
   d5d14:	ee10 0a10 	vmov	r0, s0
   d5d18:	4649      	mov	r1, r9
   d5d1a:	f001 ffa3 	bl	d7c64 <__aeabi_dcmplt>
   d5d1e:	b128      	cbz	r0, d5d2c <_Z4dtoadhPc+0x28>
        val = -val;
   d5d20:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d5d24:	4699      	mov	r9, r3
        *sout++ = '-';
   d5d26:	232d      	movs	r3, #45	; 0x2d
   d5d28:	7033      	strb	r3, [r6, #0]
   d5d2a:	3601      	adds	r6, #1
   d5d2c:	2300      	movs	r3, #0
    }
    long scale = 1;
   d5d2e:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d5d30:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d5d32:	b2d9      	uxtb	r1, r3
   d5d34:	428f      	cmp	r7, r1
   d5d36:	d902      	bls.n	d5d3e <_Z4dtoadhPc+0x3a>
        scale *= 10;
   d5d38:	4354      	muls	r4, r2
   d5d3a:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d5d3c:	e7f9      	b.n	d5d32 <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   d5d3e:	4620      	mov	r0, r4
   d5d40:	f001 fcb8 	bl	d76b4 <__aeabi_i2d>
   d5d44:	4642      	mov	r2, r8
   d5d46:	464b      	mov	r3, r9
   d5d48:	f001 fd1a 	bl	d7780 <__aeabi_dmul>
   d5d4c:	4682      	mov	sl, r0
   d5d4e:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   d5d50:	f002 f838 	bl	d7dc4 <__aeabi_d2ulz>
   d5d54:	4680      	mov	r8, r0
   d5d56:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   d5d58:	f001 fcdc 	bl	d7714 <__aeabi_ul2d>
   d5d5c:	4602      	mov	r2, r0
   d5d5e:	460b      	mov	r3, r1
   d5d60:	4650      	mov	r0, sl
   d5d62:	4659      	mov	r1, fp
   d5d64:	f001 fb58 	bl	d7418 <__aeabi_dsub>
   d5d68:	2200      	movs	r2, #0
   d5d6a:	4b17      	ldr	r3, [pc, #92]	; (d5dc8 <_Z4dtoadhPc+0xc4>)
   d5d6c:	f001 ff8e 	bl	d7c8c <__aeabi_dcmpge>
   d5d70:	b118      	cbz	r0, d5d7a <_Z4dtoadhPc+0x76>
        fixed++;
   d5d72:	f118 0801 	adds.w	r8, r8, #1
   d5d76:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d5d7a:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d5d7c:	4622      	mov	r2, r4
   d5d7e:	462b      	mov	r3, r5
   d5d80:	4640      	mov	r0, r8
   d5d82:	4649      	mov	r1, r9
   d5d84:	f002 f806 	bl	d7d94 <__aeabi_uldivmod>
   d5d88:	2301      	movs	r3, #1
   d5d8a:	220a      	movs	r2, #10
   d5d8c:	4631      	mov	r1, r6
   d5d8e:	f7ff ff7a 	bl	d5c86 <ultoa>
    if (prec) {
   d5d92:	b1af      	cbz	r7, d5dc0 <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   d5d94:	4630      	mov	r0, r6
   d5d96:	f002 f9f7 	bl	d8188 <strlen>
        *sout++ = '.';
   d5d9a:	232e      	movs	r3, #46	; 0x2e
   d5d9c:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   d5d9e:	3001      	adds	r0, #1
   d5da0:	4406      	add	r6, r0
   d5da2:	4622      	mov	r2, r4
   d5da4:	462b      	mov	r3, r5
   d5da6:	4640      	mov	r0, r8
   d5da8:	4649      	mov	r1, r9
   d5daa:	f001 fff3 	bl	d7d94 <__aeabi_uldivmod>
   d5dae:	463b      	mov	r3, r7
   d5db0:	4610      	mov	r0, r2
   d5db2:	4631      	mov	r1, r6
   d5db4:	220a      	movs	r2, #10
    }
}
   d5db6:	b001      	add	sp, #4
   d5db8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   d5dbc:	f7ff bf63 	b.w	d5c86 <ultoa>
    }
}
   d5dc0:	b001      	add	sp, #4
   d5dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5dc6:	bf00      	nop
   d5dc8:	3fe00000 	.word	0x3fe00000

000d5dcc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5dcc:	b510      	push	{r4, lr}
   d5dce:	4604      	mov	r4, r0
{
	free(buffer);
   d5dd0:	6800      	ldr	r0, [r0, #0]
   d5dd2:	f7ff feab 	bl	d5b2c <free>
}
   d5dd6:	4620      	mov	r0, r4
   d5dd8:	bd10      	pop	{r4, pc}

000d5dda <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5dda:	b510      	push	{r4, lr}
   d5ddc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5dde:	6800      	ldr	r0, [r0, #0]
   d5de0:	b108      	cbz	r0, d5de6 <_ZN6String10invalidateEv+0xc>
   d5de2:	f7ff fea3 	bl	d5b2c <free>
	buffer = NULL;
   d5de6:	2300      	movs	r3, #0
   d5de8:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5dea:	60a3      	str	r3, [r4, #8]
   d5dec:	6063      	str	r3, [r4, #4]
   d5dee:	bd10      	pop	{r4, pc}

000d5df0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5df0:	b538      	push	{r3, r4, r5, lr}
   d5df2:	4604      	mov	r4, r0
   d5df4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5df6:	6800      	ldr	r0, [r0, #0]
   d5df8:	3101      	adds	r1, #1
   d5dfa:	f7ff fe9f 	bl	d5b3c <realloc>
	if (newbuffer) {
   d5dfe:	b110      	cbz	r0, d5e06 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5e00:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5e04:	2001      	movs	r0, #1
	}
	return 0;
}
   d5e06:	bd38      	pop	{r3, r4, r5, pc}

000d5e08 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5e08:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5e0a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5e0c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5e0e:	b113      	cbz	r3, d5e16 <_ZN6String7reserveEj+0xe>
   d5e10:	6843      	ldr	r3, [r0, #4]
   d5e12:	428b      	cmp	r3, r1
   d5e14:	d207      	bcs.n	d5e26 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5e16:	4620      	mov	r0, r4
   d5e18:	f7ff ffea 	bl	d5df0 <_ZN6String12changeBufferEj>
   d5e1c:	b120      	cbz	r0, d5e28 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5e1e:	68a3      	ldr	r3, [r4, #8]
   d5e20:	b90b      	cbnz	r3, d5e26 <_ZN6String7reserveEj+0x1e>
   d5e22:	6822      	ldr	r2, [r4, #0]
   d5e24:	7013      	strb	r3, [r2, #0]
   d5e26:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5e28:	bd10      	pop	{r4, pc}

000d5e2a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5e2a:	b570      	push	{r4, r5, r6, lr}
   d5e2c:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5e2e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5e30:	4604      	mov	r4, r0
   d5e32:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5e34:	f7ff ffe8 	bl	d5e08 <_ZN6String7reserveEj>
   d5e38:	b918      	cbnz	r0, d5e42 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5e3a:	4620      	mov	r0, r4
   d5e3c:	f7ff ffcd 	bl	d5dda <_ZN6String10invalidateEv>
		return *this;
   d5e40:	e009      	b.n	d5e56 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5e42:	462a      	mov	r2, r5
   d5e44:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5e46:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5e48:	6820      	ldr	r0, [r4, #0]
   d5e4a:	f002 f961 	bl	d8110 <memcpy>
	buffer[len] = 0;
   d5e4e:	6822      	ldr	r2, [r4, #0]
   d5e50:	68a3      	ldr	r3, [r4, #8]
   d5e52:	2100      	movs	r1, #0
   d5e54:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5e56:	4620      	mov	r0, r4
   d5e58:	bd70      	pop	{r4, r5, r6, pc}

000d5e5a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5e5a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5e5c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5e5e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5e60:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5e62:	6043      	str	r3, [r0, #4]
	len = 0;
   d5e64:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5e66:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5e68:	460d      	mov	r5, r1
   d5e6a:	b139      	cbz	r1, d5e7c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5e6c:	4608      	mov	r0, r1
   d5e6e:	f002 f98b 	bl	d8188 <strlen>
   d5e72:	4629      	mov	r1, r5
   d5e74:	4602      	mov	r2, r0
   d5e76:	4620      	mov	r0, r4
   d5e78:	f7ff ffd7 	bl	d5e2a <_ZN6String4copyEPKcj>
}
   d5e7c:	4620      	mov	r0, r4
   d5e7e:	bd38      	pop	{r3, r4, r5, pc}

000d5e80 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5e80:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d5e82:	b510      	push	{r4, lr}
   d5e84:	460b      	mov	r3, r1
   d5e86:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5e88:	d007      	beq.n	d5e9a <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5e8a:	6809      	ldr	r1, [r1, #0]
   d5e8c:	b119      	cbz	r1, d5e96 <_ZN6StringaSERKS_+0x16>
   d5e8e:	689a      	ldr	r2, [r3, #8]
   d5e90:	f7ff ffcb 	bl	d5e2a <_ZN6String4copyEPKcj>
   d5e94:	e001      	b.n	d5e9a <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d5e96:	f7ff ffa0 	bl	d5dda <_ZN6String10invalidateEv>

	return *this;
}
   d5e9a:	4620      	mov	r0, r4
   d5e9c:	bd10      	pop	{r4, pc}

000d5e9e <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5e9e:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5ea0:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5ea2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5ea4:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5ea6:	6043      	str	r3, [r0, #4]
	len = 0;
   d5ea8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5eaa:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5eac:	f7ff ffe8 	bl	d5e80 <_ZN6StringaSERKS_>
}
   d5eb0:	4620      	mov	r0, r4
   d5eb2:	bd10      	pop	{r4, pc}

000d5eb4 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5eb4:	b538      	push	{r3, r4, r5, lr}
   d5eb6:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5eb8:	460c      	mov	r4, r1
   d5eba:	b141      	cbz	r1, d5ece <_ZN6StringaSEPKc+0x1a>
   d5ebc:	4608      	mov	r0, r1
   d5ebe:	f002 f963 	bl	d8188 <strlen>
   d5ec2:	4621      	mov	r1, r4
   d5ec4:	4602      	mov	r2, r0
   d5ec6:	4628      	mov	r0, r5
   d5ec8:	f7ff ffaf 	bl	d5e2a <_ZN6String4copyEPKcj>
   d5ecc:	e001      	b.n	d5ed2 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5ece:	f7ff ff84 	bl	d5dda <_ZN6String10invalidateEv>

	return *this;
}
   d5ed2:	4628      	mov	r0, r5
   d5ed4:	bd38      	pop	{r3, r4, r5, pc}

000d5ed6 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5ed6:	b510      	push	{r4, lr}
   d5ed8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5eda:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5edc:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5ede:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d5ee0:	6063      	str	r3, [r4, #4]
	len = 0;
   d5ee2:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5ee4:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5ee6:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d5ee8:	a901      	add	r1, sp, #4
   d5eea:	f7ff fef4 	bl	d5cd6 <itoa>
	*this = buf;
   d5eee:	a901      	add	r1, sp, #4
   d5ef0:	4620      	mov	r0, r4
   d5ef2:	f7ff ffdf 	bl	d5eb4 <_ZN6StringaSEPKc>
}
   d5ef6:	4620      	mov	r0, r4
   d5ef8:	b00a      	add	sp, #40	; 0x28
   d5efa:	bd10      	pop	{r4, pc}

000d5efc <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d5efc:	b530      	push	{r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5efe:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d5f00:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5f02:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5f04:	6043      	str	r3, [r0, #4]
	len = 0;
   d5f06:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5f08:	7303      	strb	r3, [r0, #12]
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d5f0a:	4604      	mov	r4, r0
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d5f0c:	ee10 0a10 	vmov	r0, s0
   d5f10:	b2cd      	uxtb	r5, r1
   d5f12:	f001 fbe1 	bl	d76d8 <__aeabi_f2d>
   d5f16:	ec41 0b10 	vmov	d0, r0, r1
   d5f1a:	a901      	add	r1, sp, #4
   d5f1c:	4628      	mov	r0, r5
   d5f1e:	f7ff fef1 	bl	d5d04 <_Z4dtoadhPc>
        *this = buf;
   d5f22:	a901      	add	r1, sp, #4
   d5f24:	4620      	mov	r0, r4
   d5f26:	f7ff ffc5 	bl	d5eb4 <_ZN6StringaSEPKc>
}
   d5f2a:	4620      	mov	r0, r4
   d5f2c:	b00b      	add	sp, #44	; 0x2c
   d5f2e:	bd30      	pop	{r4, r5, pc}

000d5f30 <_ZN6StringC1Edi>:

String::String(double value, int decimalPlaces)
   d5f30:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5f32:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   d5f34:	b08a      	sub	sp, #40	; 0x28
   d5f36:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5f38:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5f3a:	6043      	str	r3, [r0, #4]
	len = 0;
   d5f3c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5f3e:	7303      	strb	r3, [r0, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d5f40:	b2c8      	uxtb	r0, r1
   d5f42:	a901      	add	r1, sp, #4
   d5f44:	f7ff fede 	bl	d5d04 <_Z4dtoadhPc>
        *this = buf;
   d5f48:	a901      	add	r1, sp, #4
   d5f4a:	4620      	mov	r0, r4
   d5f4c:	f7ff ffb2 	bl	d5eb4 <_ZN6StringaSEPKc>
}
   d5f50:	4620      	mov	r0, r4
   d5f52:	b00a      	add	sp, #40	; 0x28
   d5f54:	bd10      	pop	{r4, pc}

000d5f56 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5f56:	b510      	push	{r4, lr}
   d5f58:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5f5a:	6800      	ldr	r0, [r0, #0]
   d5f5c:	b108      	cbz	r0, d5f62 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5f5e:	f7ff fc31 	bl	d57c4 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5f62:	4620      	mov	r0, r4
   d5f64:	bd10      	pop	{r4, pc}
	...

000d5f68 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5f68:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5f6a:	4c06      	ldr	r4, [pc, #24]	; (d5f84 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5f6c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d5f6e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5f70:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5f72:	f7ff fc1f 	bl	d57b4 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5f76:	4620      	mov	r0, r4
   d5f78:	4a03      	ldr	r2, [pc, #12]	; (d5f88 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5f7a:	4904      	ldr	r1, [pc, #16]	; (d5f8c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5f80:	f001 b8da 	b.w	d7138 <__aeabi_atexit>
   d5f84:	2003e4e4 	.word	0x2003e4e4
   d5f88:	2003e408 	.word	0x2003e408
   d5f8c:	000d5f57 	.word	0x000d5f57

000d5f90 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5f92:	4606      	mov	r6, r0
   d5f94:	460d      	mov	r5, r1
   d5f96:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5f98:	2400      	movs	r4, #0
  while (size--) {
   d5f9a:	42bd      	cmp	r5, r7
   d5f9c:	d00c      	beq.n	d5fb8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5f9e:	6833      	ldr	r3, [r6, #0]
   d5fa0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5fa4:	689b      	ldr	r3, [r3, #8]
   d5fa6:	4630      	mov	r0, r6
   d5fa8:	4798      	blx	r3
     if (chunk>=0)
   d5faa:	2800      	cmp	r0, #0
   d5fac:	db01      	blt.n	d5fb2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5fae:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5fb0:	e7f3      	b.n	d5f9a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5fb2:	2c00      	cmp	r4, #0
   d5fb4:	bf08      	it	eq
   d5fb6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5fb8:	4620      	mov	r0, r4
   d5fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5fbc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5fbc:	b570      	push	{r4, r5, r6, lr}
   d5fbe:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5fc0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5fc2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5fc4:	b149      	cbz	r1, d5fda <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5fc6:	f002 f8df 	bl	d8188 <strlen>
   d5fca:	682b      	ldr	r3, [r5, #0]
   d5fcc:	4602      	mov	r2, r0
   d5fce:	4621      	mov	r1, r4
   d5fd0:	4628      	mov	r0, r5
   d5fd2:	68db      	ldr	r3, [r3, #12]
    }
   d5fd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5fd8:	4718      	bx	r3
    }
   d5fda:	bd70      	pop	{r4, r5, r6, pc}

000d5fdc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5fdc:	6803      	ldr	r3, [r0, #0]
   d5fde:	689b      	ldr	r3, [r3, #8]
   d5fe0:	4718      	bx	r3

000d5fe2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5fe2:	b530      	push	{r4, r5, lr}
   d5fe4:	b08b      	sub	sp, #44	; 0x2c
   d5fe6:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5fe8:	2100      	movs	r1, #0
   d5fea:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5fee:	2a01      	cmp	r2, #1
   d5ff0:	bf98      	it	ls
   d5ff2:	220a      	movls	r2, #10
   d5ff4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5ff8:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5ffc:	fb05 3312 	mls	r3, r5, r2, r3
   d6000:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6004:	2b09      	cmp	r3, #9
   d6006:	bf94      	ite	ls
   d6008:	3330      	addls	r3, #48	; 0x30
   d600a:	3337      	addhi	r3, #55	; 0x37
   d600c:	b2db      	uxtb	r3, r3
   d600e:	4621      	mov	r1, r4
   d6010:	f804 3901 	strb.w	r3, [r4], #-1
   d6014:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6016:	2d00      	cmp	r5, #0
   d6018:	d1ee      	bne.n	d5ff8 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d601a:	f7ff ffcf 	bl	d5fbc <_ZN5Print5writeEPKc>
}
   d601e:	b00b      	add	sp, #44	; 0x2c
   d6020:	bd30      	pop	{r4, r5, pc}
	...

000d6024 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6024:	4b01      	ldr	r3, [pc, #4]	; (d602c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6026:	4a02      	ldr	r2, [pc, #8]	; (d6030 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6028:	601a      	str	r2, [r3, #0]
   d602a:	4770      	bx	lr
   d602c:	2003e4e8 	.word	0x2003e4e8
   d6030:	000d82b7 	.word	0x000d82b7

000d6034 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6034:	4b02      	ldr	r3, [pc, #8]	; (d6040 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6036:	681a      	ldr	r2, [r3, #0]
   d6038:	4b02      	ldr	r3, [pc, #8]	; (d6044 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d603a:	601a      	str	r2, [r3, #0]
   d603c:	4770      	bx	lr
   d603e:	bf00      	nop
   d6040:	2003e3a0 	.word	0x2003e3a0
   d6044:	2003e4ec 	.word	0x2003e4ec

000d6048 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6048:	2100      	movs	r1, #0
   d604a:	f7ff bcf3 	b.w	d5a34 <system_delay_ms>

000d604e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d604e:	b510      	push	{r4, lr}
   d6050:	4604      	mov	r4, r0
   d6052:	f7fe f85e 	bl	d4112 <_ZNSt14_Function_baseD1Ev>
   d6056:	4620      	mov	r0, r4
   d6058:	bd10      	pop	{r4, pc}

000d605a <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d605a:	b513      	push	{r0, r1, r4, lr}
   d605c:	460b      	mov	r3, r1
   d605e:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6060:	c803      	ldmia	r0, {r0, r1}
   d6062:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6066:	e893 0003 	ldmia.w	r3, {r0, r1}
   d606a:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d606e:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d6072:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6076:	b002      	add	sp, #8
   d6078:	bd10      	pop	{r4, pc}
	...

000d607c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d607c:	4803      	ldr	r0, [pc, #12]	; (d608c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d607e:	4a04      	ldr	r2, [pc, #16]	; (d6090 <_GLOBAL__sub_I_RGB+0x14>)
   d6080:	4904      	ldr	r1, [pc, #16]	; (d6094 <_GLOBAL__sub_I_RGB+0x18>)
   d6082:	2300      	movs	r3, #0
   d6084:	6083      	str	r3, [r0, #8]
   d6086:	f001 b857 	b.w	d7138 <__aeabi_atexit>
   d608a:	bf00      	nop
   d608c:	2003e4f0 	.word	0x2003e4f0
   d6090:	2003e408 	.word	0x2003e408
   d6094:	000d604f 	.word	0x000d604f

000d6098 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6098:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d609a:	4b0c      	ldr	r3, [pc, #48]	; (d60cc <serialEventRun+0x34>)
   d609c:	b133      	cbz	r3, d60ac <serialEventRun+0x14>
   d609e:	f000 f973 	bl	d6388 <_Z16_fetch_usbserialv>
   d60a2:	6803      	ldr	r3, [r0, #0]
   d60a4:	691b      	ldr	r3, [r3, #16]
   d60a6:	4798      	blx	r3
   d60a8:	2800      	cmp	r0, #0
   d60aa:	dc09      	bgt.n	d60c0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d60ac:	4b08      	ldr	r3, [pc, #32]	; (d60d0 <serialEventRun+0x38>)
   d60ae:	b163      	cbz	r3, d60ca <serialEventRun+0x32>
   d60b0:	f000 fa1a 	bl	d64e8 <_Z22__fetch_global_Serial1v>
   d60b4:	6803      	ldr	r3, [r0, #0]
   d60b6:	691b      	ldr	r3, [r3, #16]
   d60b8:	4798      	blx	r3
   d60ba:	2800      	cmp	r0, #0
   d60bc:	dc03      	bgt.n	d60c6 <serialEventRun+0x2e>
   d60be:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d60c0:	f3af 8000 	nop.w
   d60c4:	e7f2      	b.n	d60ac <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d60c6:	f3af 8000 	nop.w
   d60ca:	bd08      	pop	{r3, pc}
	...

000d60d4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d60d4:	b508      	push	{r3, lr}
	serialEventRun();
   d60d6:	f7ff ffdf 	bl	d6098 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d60da:	f7ff fb2b 	bl	d5734 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d60de:	4b01      	ldr	r3, [pc, #4]	; (d60e4 <_post_loop+0x10>)
   d60e0:	6018      	str	r0, [r3, #0]
   d60e2:	bd08      	pop	{r3, pc}
   d60e4:	2003e730 	.word	0x2003e730

000d60e8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d60e8:	4802      	ldr	r0, [pc, #8]	; (d60f4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d60ea:	4a03      	ldr	r2, [pc, #12]	; (d60f8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d60ec:	4903      	ldr	r1, [pc, #12]	; (d60fc <_Z33system_initialize_user_backup_ramv+0x14>)
   d60ee:	1a12      	subs	r2, r2, r0
   d60f0:	f002 b80e 	b.w	d8110 <memcpy>
   d60f4:	2003f400 	.word	0x2003f400
   d60f8:	2003f404 	.word	0x2003f404
   d60fc:	000d85c8 	.word	0x000d85c8

000d6100 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6100:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6102:	2300      	movs	r3, #0
   d6104:	9300      	str	r3, [sp, #0]
   d6106:	461a      	mov	r2, r3
   d6108:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d610c:	f7ff fca4 	bl	d5a58 <system_ctrl_set_result>
}
   d6110:	b003      	add	sp, #12
   d6112:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6118 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6118:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d611a:	8843      	ldrh	r3, [r0, #2]
   d611c:	2b0a      	cmp	r3, #10
   d611e:	d008      	beq.n	d6132 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6120:	2b50      	cmp	r3, #80	; 0x50
   d6122:	d109      	bne.n	d6138 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6124:	4b09      	ldr	r3, [pc, #36]	; (d614c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6126:	681b      	ldr	r3, [r3, #0]
   d6128:	b13b      	cbz	r3, d613a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d612a:	b003      	add	sp, #12
   d612c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6130:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6132:	f7ff ffe5 	bl	d6100 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6136:	e006      	b.n	d6146 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6138:	2300      	movs	r3, #0
   d613a:	9300      	str	r3, [sp, #0]
   d613c:	461a      	mov	r2, r3
   d613e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6142:	f7ff fc89 	bl	d5a58 <system_ctrl_set_result>
        break;
    }
}
   d6146:	b003      	add	sp, #12
   d6148:	f85d fb04 	ldr.w	pc, [sp], #4
   d614c:	2003e500 	.word	0x2003e500

000d6150 <module_user_init_hook>:

void module_user_init_hook()
{
   d6150:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6152:	4c10      	ldr	r4, [pc, #64]	; (d6194 <module_user_init_hook+0x44>)
   d6154:	4d10      	ldr	r5, [pc, #64]	; (d6198 <module_user_init_hook+0x48>)
   d6156:	6823      	ldr	r3, [r4, #0]
   d6158:	42ab      	cmp	r3, r5
   d615a:	4b10      	ldr	r3, [pc, #64]	; (d619c <module_user_init_hook+0x4c>)
   d615c:	bf0c      	ite	eq
   d615e:	2201      	moveq	r2, #1
   d6160:	2200      	movne	r2, #0
   d6162:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6164:	d002      	beq.n	d616c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d6166:	f7ff ffbf 	bl	d60e8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d616a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d616c:	f7ff faca 	bl	d5704 <HAL_RNG_GetRandomNumber>
   d6170:	4604      	mov	r4, r0
    srand(seed);
   d6172:	f001 ffe1 	bl	d8138 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6176:	4b0a      	ldr	r3, [pc, #40]	; (d61a0 <module_user_init_hook+0x50>)
   d6178:	b113      	cbz	r3, d6180 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d617a:	4620      	mov	r0, r4
   d617c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6180:	2100      	movs	r1, #0
   d6182:	4807      	ldr	r0, [pc, #28]	; (d61a0 <module_user_init_hook+0x50>)
   d6184:	f7ff fcc2 	bl	d5b0c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6188:	2100      	movs	r1, #0
   d618a:	4806      	ldr	r0, [pc, #24]	; (d61a4 <module_user_init_hook+0x54>)
}
   d618c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6190:	f7ff bc58 	b.w	d5a44 <system_ctrl_set_app_request_handler>
   d6194:	2003f400 	.word	0x2003f400
   d6198:	9a271c1e 	.word	0x9a271c1e
   d619c:	2003e504 	.word	0x2003e504
   d61a0:	00000000 	.word	0x00000000
   d61a4:	000d6119 	.word	0x000d6119

000d61a8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d61a8:	4770      	bx	lr

000d61aa <_ZN9IPAddressD0Ev>:
   d61aa:	b510      	push	{r4, lr}
   d61ac:	2118      	movs	r1, #24
   d61ae:	4604      	mov	r4, r0
   d61b0:	f000 ffd0 	bl	d7154 <_ZdlPvj>
   d61b4:	4620      	mov	r0, r4
   d61b6:	bd10      	pop	{r4, pc}

000d61b8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d61b8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d61ba:	7d03      	ldrb	r3, [r0, #20]
   d61bc:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d61be:	b08d      	sub	sp, #52	; 0x34
   d61c0:	460e      	mov	r6, r1
   d61c2:	f100 0704 	add.w	r7, r0, #4
   d61c6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d61ca:	d002      	beq.n	d61d2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d61cc:	f100 0508 	add.w	r5, r0, #8
   d61d0:	e018      	b.n	d6204 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d61d2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d61d4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d61d6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d61da:	232f      	movs	r3, #47	; 0x2f
   d61dc:	462a      	mov	r2, r5
   d61de:	200a      	movs	r0, #10
   d61e0:	f7ff fb00 	bl	d57e4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d61e4:	4628      	mov	r0, r5
   d61e6:	f001 ffcf 	bl	d8188 <strlen>
   d61ea:	6833      	ldr	r3, [r6, #0]
   d61ec:	4602      	mov	r2, r0
   d61ee:	68db      	ldr	r3, [r3, #12]
   d61f0:	4629      	mov	r1, r5
   d61f2:	4630      	mov	r0, r6
   d61f4:	4798      	blx	r3
   d61f6:	e00f      	b.n	d6218 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d61f8:	b124      	cbz	r4, d6204 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d61fa:	212e      	movs	r1, #46	; 0x2e
   d61fc:	4630      	mov	r0, r6
   d61fe:	f7ff feed 	bl	d5fdc <_ZN5Print5printEc>
   d6202:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6204:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6208:	220a      	movs	r2, #10
   d620a:	4630      	mov	r0, r6
   d620c:	f7ff fee9 	bl	d5fe2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6210:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6212:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6214:	d1f0      	bne.n	d61f8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6216:	4620      	mov	r0, r4
    }
    return n;
}
   d6218:	b00d      	add	sp, #52	; 0x34
   d621a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d621c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d621c:	b510      	push	{r4, lr}
   d621e:	4b05      	ldr	r3, [pc, #20]	; (d6234 <_ZN9IPAddressC1Ev+0x18>)
   d6220:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6222:	2211      	movs	r2, #17
   d6224:	f840 3b04 	str.w	r3, [r0], #4
   d6228:	2100      	movs	r1, #0
   d622a:	f001 ff7c 	bl	d8126 <memset>
{
    clear();
}
   d622e:	4620      	mov	r0, r4
   d6230:	bd10      	pop	{r4, pc}
   d6232:	bf00      	nop
   d6234:	000d8354 	.word	0x000d8354

000d6238 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6238:	4603      	mov	r3, r0
   d623a:	4a07      	ldr	r2, [pc, #28]	; (d6258 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d623c:	b510      	push	{r4, lr}
   d623e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6242:	f101 0210 	add.w	r2, r1, #16
   d6246:	f851 4b04 	ldr.w	r4, [r1], #4
   d624a:	f843 4b04 	str.w	r4, [r3], #4
   d624e:	4291      	cmp	r1, r2
   d6250:	d1f9      	bne.n	d6246 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6252:	780a      	ldrb	r2, [r1, #0]
   d6254:	701a      	strb	r2, [r3, #0]
}
   d6256:	bd10      	pop	{r4, pc}
   d6258:	000d8354 	.word	0x000d8354

000d625c <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d625c:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d625e:	2b04      	cmp	r3, #4
   d6260:	d101      	bne.n	d6266 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d6262:	6840      	ldr	r0, [r0, #4]
   d6264:	e008      	b.n	d6278 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d6266:	2b06      	cmp	r3, #6
   d6268:	d10a      	bne.n	d6280 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d626a:	6843      	ldr	r3, [r0, #4]
   d626c:	b953      	cbnz	r3, d6284 <_ZNK9IPAddresscvbEv+0x28>
   d626e:	6883      	ldr	r3, [r0, #8]
   d6270:	b943      	cbnz	r3, d6284 <_ZNK9IPAddresscvbEv+0x28>
   d6272:	68c3      	ldr	r3, [r0, #12]
   d6274:	b933      	cbnz	r3, d6284 <_ZNK9IPAddresscvbEv+0x28>
   d6276:	6900      	ldr	r0, [r0, #16]
   d6278:	3000      	adds	r0, #0
   d627a:	bf18      	it	ne
   d627c:	2001      	movne	r0, #1
   d627e:	4770      	bx	lr
    } else {
        return false;
   d6280:	2000      	movs	r0, #0
   d6282:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6284:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d6286:	4770      	bx	lr

000d6288 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6288:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d628a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d628e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6292:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6296:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d629a:	2304      	movs	r3, #4
   d629c:	6041      	str	r1, [r0, #4]
   d629e:	7503      	strb	r3, [r0, #20]
   d62a0:	bd10      	pop	{r4, pc}

000d62a2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d62a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d62a4:	780d      	ldrb	r5, [r1, #0]
   d62a6:	788b      	ldrb	r3, [r1, #2]
   d62a8:	784a      	ldrb	r2, [r1, #1]
   d62aa:	78c9      	ldrb	r1, [r1, #3]
   d62ac:	9100      	str	r1, [sp, #0]
   d62ae:	4629      	mov	r1, r5
   d62b0:	f7ff ffea 	bl	d6288 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d62b4:	b003      	add	sp, #12
   d62b6:	bd30      	pop	{r4, r5, pc}

000d62b8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
   d62b8:	b510      	push	{r4, lr}
   d62ba:	4b03      	ldr	r3, [pc, #12]	; (d62c8 <_ZN9IPAddressC1EPKh+0x10>)
   d62bc:	6003      	str	r3, [r0, #0]
   d62be:	4604      	mov	r4, r0
{
    *this = address;
   d62c0:	f7ff ffef 	bl	d62a2 <_ZN9IPAddressaSEPKh>
}
   d62c4:	4620      	mov	r0, r4
   d62c6:	bd10      	pop	{r4, pc}
   d62c8:	000d8354 	.word	0x000d8354

000d62cc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d62cc:	7441      	strb	r1, [r0, #17]
   d62ce:	4770      	bx	lr

000d62d0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d62d0:	4770      	bx	lr

000d62d2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d62d2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d62d4:	2100      	movs	r1, #0
   d62d6:	7c00      	ldrb	r0, [r0, #16]
   d62d8:	f7ff fb7c 	bl	d59d4 <HAL_USB_USART_Receive_Data>
}
   d62dc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d62e0:	bf28      	it	cs
   d62e2:	f04f 30ff 	movcs.w	r0, #4294967295
   d62e6:	bd08      	pop	{r3, pc}

000d62e8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d62e8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d62ea:	2101      	movs	r1, #1
   d62ec:	7c00      	ldrb	r0, [r0, #16]
   d62ee:	f7ff fb71 	bl	d59d4 <HAL_USB_USART_Receive_Data>
}
   d62f2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d62f6:	bf28      	it	cs
   d62f8:	f04f 30ff 	movcs.w	r0, #4294967295
   d62fc:	bd08      	pop	{r3, pc}

000d62fe <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d62fe:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6300:	7c00      	ldrb	r0, [r0, #16]
   d6302:	f7ff fb5f 	bl	d59c4 <HAL_USB_USART_Available_Data_For_Write>
}
   d6306:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d630a:	bd08      	pop	{r3, pc}

000d630c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d630c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d630e:	7c00      	ldrb	r0, [r0, #16]
   d6310:	f7ff fb50 	bl	d59b4 <HAL_USB_USART_Available_Data>
}
   d6314:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6318:	bd08      	pop	{r3, pc}

000d631a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d631a:	7c00      	ldrb	r0, [r0, #16]
   d631c:	f7ff bb6a 	b.w	d59f4 <HAL_USB_USART_Flush_Data>

000d6320 <_ZN9USBSerialD0Ev>:
   d6320:	b510      	push	{r4, lr}
   d6322:	2114      	movs	r1, #20
   d6324:	4604      	mov	r4, r0
   d6326:	f000 ff15 	bl	d7154 <_ZdlPvj>
   d632a:	4620      	mov	r0, r4
   d632c:	bd10      	pop	{r4, pc}

000d632e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d632e:	b538      	push	{r3, r4, r5, lr}
   d6330:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6332:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6334:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6336:	f7ff fb45 	bl	d59c4 <HAL_USB_USART_Available_Data_For_Write>
   d633a:	2800      	cmp	r0, #0
   d633c:	dc01      	bgt.n	d6342 <_ZN9USBSerial5writeEh+0x14>
   d633e:	7c60      	ldrb	r0, [r4, #17]
   d6340:	b128      	cbz	r0, d634e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6342:	4629      	mov	r1, r5
   d6344:	7c20      	ldrb	r0, [r4, #16]
   d6346:	f7ff fb4d 	bl	d59e4 <HAL_USB_USART_Send_Data>
   d634a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d634e:	bd38      	pop	{r3, r4, r5, pc}

000d6350 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6350:	b510      	push	{r4, lr}
   d6352:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6354:	2300      	movs	r3, #0
   d6356:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6358:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d635c:	60a3      	str	r3, [r4, #8]
   d635e:	4b05      	ldr	r3, [pc, #20]	; (d6374 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6360:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6362:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6364:	4608      	mov	r0, r1
{
  _serial = serial;
   d6366:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6368:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d636a:	4611      	mov	r1, r2
   d636c:	f7ff fb1a 	bl	d59a4 <HAL_USB_USART_Init>
}
   d6370:	4620      	mov	r0, r4
   d6372:	bd10      	pop	{r4, pc}
   d6374:	000d8368 	.word	0x000d8368

000d6378 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6378:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d637a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d637c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d637e:	2100      	movs	r1, #0
   d6380:	f001 fed1 	bl	d8126 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6384:	4620      	mov	r0, r4
   d6386:	bd10      	pop	{r4, pc}

000d6388 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6388:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d638a:	4d0e      	ldr	r5, [pc, #56]	; (d63c4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d638c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d638e:	a801      	add	r0, sp, #4
   d6390:	f7ff fff2 	bl	d6378 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6394:	6829      	ldr	r1, [r5, #0]
   d6396:	f011 0401 	ands.w	r4, r1, #1
   d639a:	d110      	bne.n	d63be <_Z16_fetch_usbserialv+0x36>
   d639c:	4628      	mov	r0, r5
   d639e:	f7fd fe82 	bl	d40a6 <__cxa_guard_acquire>
   d63a2:	b160      	cbz	r0, d63be <_Z16_fetch_usbserialv+0x36>
   d63a4:	aa01      	add	r2, sp, #4
   d63a6:	4621      	mov	r1, r4
   d63a8:	4807      	ldr	r0, [pc, #28]	; (d63c8 <_Z16_fetch_usbserialv+0x40>)
   d63aa:	f7ff ffd1 	bl	d6350 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d63ae:	4628      	mov	r0, r5
   d63b0:	f7fd fe7e 	bl	d40b0 <__cxa_guard_release>
   d63b4:	4a05      	ldr	r2, [pc, #20]	; (d63cc <_Z16_fetch_usbserialv+0x44>)
   d63b6:	4906      	ldr	r1, [pc, #24]	; (d63d0 <_Z16_fetch_usbserialv+0x48>)
   d63b8:	4803      	ldr	r0, [pc, #12]	; (d63c8 <_Z16_fetch_usbserialv+0x40>)
   d63ba:	f000 febd 	bl	d7138 <__aeabi_atexit>
	return _usbserial;
}
   d63be:	4802      	ldr	r0, [pc, #8]	; (d63c8 <_Z16_fetch_usbserialv+0x40>)
   d63c0:	b007      	add	sp, #28
   d63c2:	bd30      	pop	{r4, r5, pc}
   d63c4:	2003e508 	.word	0x2003e508
   d63c8:	2003e50c 	.word	0x2003e50c
   d63cc:	2003e408 	.word	0x2003e408
   d63d0:	000d62d1 	.word	0x000d62d1

000d63d4 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d63d4:	4700      	bx	r0
	...

000d63d8 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d63d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d63da:	b085      	sub	sp, #20
   d63dc:	461c      	mov	r4, r3
   d63de:	460e      	mov	r6, r1
   d63e0:	4617      	mov	r7, r2
   d63e2:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   d63e4:	f7ff f956 	bl	d5694 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d63e8:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d63ea:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d63ec:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d63f0:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d63f2:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d63f6:	bfa5      	ittet	ge
   d63f8:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d63fc:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d6400:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d6402:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d6404:	9300      	str	r3, [sp, #0]
   d6406:	4632      	mov	r2, r6
   d6408:	463b      	mov	r3, r7
   d640a:	4906      	ldr	r1, [pc, #24]	; (d6424 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d640c:	bfa8      	it	ge
   d640e:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d6412:	4628      	mov	r0, r5
   d6414:	f7ff f936 	bl	d5684 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d6418:	fab0 f080 	clz	r0, r0
   d641c:	0940      	lsrs	r0, r0, #5
   d641e:	b005      	add	sp, #20
   d6420:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6422:	bf00      	nop
   d6424:	000d63d5 	.word	0x000d63d5

000d6428 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d6428:	f7ff b944 	b.w	d56b4 <HAL_Interrupts_Disable_All>

000d642c <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d642c:	f7ff b93a 	b.w	d56a4 <HAL_Interrupts_Enable_All>

000d6430 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6430:	4770      	bx	lr

000d6432 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6432:	7441      	strb	r1, [r0, #17]
   d6434:	4770      	bx	lr

000d6436 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6436:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6438:	7c00      	ldrb	r0, [r0, #16]
   d643a:	f7ff fa23 	bl	d5884 <HAL_USART_Available_Data_For_Write>
}
   d643e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6442:	bd08      	pop	{r3, pc}

000d6444 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6444:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6446:	7c00      	ldrb	r0, [r0, #16]
   d6448:	f7ff f9f4 	bl	d5834 <HAL_USART_Available_Data>
}
   d644c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6450:	bd08      	pop	{r3, pc}

000d6452 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6452:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6454:	7c00      	ldrb	r0, [r0, #16]
   d6456:	f7ff f9fd 	bl	d5854 <HAL_USART_Peek_Data>
}
   d645a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d645e:	bf28      	it	cs
   d6460:	f04f 30ff 	movcs.w	r0, #4294967295
   d6464:	bd08      	pop	{r3, pc}

000d6466 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6466:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6468:	7c00      	ldrb	r0, [r0, #16]
   d646a:	f7ff f9eb 	bl	d5844 <HAL_USART_Read_Data>
}
   d646e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6472:	bf28      	it	cs
   d6474:	f04f 30ff 	movcs.w	r0, #4294967295
   d6478:	bd08      	pop	{r3, pc}

000d647a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d647a:	7c00      	ldrb	r0, [r0, #16]
   d647c:	f7ff b9f2 	b.w	d5864 <HAL_USART_Flush_Data>

000d6480 <_ZN11USARTSerialD0Ev>:
   d6480:	b510      	push	{r4, lr}
   d6482:	2114      	movs	r1, #20
   d6484:	4604      	mov	r4, r0
   d6486:	f000 fe65 	bl	d7154 <_ZdlPvj>
   d648a:	4620      	mov	r0, r4
   d648c:	bd10      	pop	{r4, pc}

000d648e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d648e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6490:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6492:	4604      	mov	r4, r0
   d6494:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6496:	b925      	cbnz	r5, d64a2 <_ZN11USARTSerial5writeEh+0x14>
   d6498:	7c00      	ldrb	r0, [r0, #16]
   d649a:	f7ff f9f3 	bl	d5884 <HAL_USART_Available_Data_For_Write>
   d649e:	2800      	cmp	r0, #0
   d64a0:	dd05      	ble.n	d64ae <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d64a2:	4631      	mov	r1, r6
   d64a4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d64a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d64aa:	f7ff b9bb 	b.w	d5824 <HAL_USART_Write_Data>
  }
  return 0;
}
   d64ae:	4628      	mov	r0, r5
   d64b0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d64b4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d64b4:	b510      	push	{r4, lr}
   d64b6:	4604      	mov	r4, r0
   d64b8:	4608      	mov	r0, r1
   d64ba:	4611      	mov	r1, r2
   d64bc:	2200      	movs	r2, #0
   d64be:	6062      	str	r2, [r4, #4]
   d64c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d64c4:	60a2      	str	r2, [r4, #8]
   d64c6:	4a05      	ldr	r2, [pc, #20]	; (d64dc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d64c8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d64ca:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d64cc:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d64ce:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d64d0:	461a      	mov	r2, r3
   d64d2:	f7ff f99f 	bl	d5814 <HAL_USART_Init>
}
   d64d6:	4620      	mov	r0, r4
   d64d8:	bd10      	pop	{r4, pc}
   d64da:	bf00      	nop
   d64dc:	000d8398 	.word	0x000d8398

000d64e0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d64e0:	7c00      	ldrb	r0, [r0, #16]
   d64e2:	f7ff b9c7 	b.w	d5874 <HAL_USART_Is_Enabled>
	...

000d64e8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d64e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d64ea:	4c19      	ldr	r4, [pc, #100]	; (d6550 <_Z22__fetch_global_Serial1v+0x68>)
   d64ec:	6825      	ldr	r5, [r4, #0]
   d64ee:	b94d      	cbnz	r5, d6504 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d64f0:	2084      	movs	r0, #132	; 0x84
   d64f2:	f7fd fdd0 	bl	d4096 <_Znwj>
   d64f6:	4606      	mov	r6, r0
   d64f8:	b118      	cbz	r0, d6502 <_Z22__fetch_global_Serial1v+0x1a>
   d64fa:	2284      	movs	r2, #132	; 0x84
   d64fc:	4629      	mov	r1, r5
   d64fe:	f001 fe12 	bl	d8126 <memset>
   d6502:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d6504:	4d13      	ldr	r5, [pc, #76]	; (d6554 <_Z22__fetch_global_Serial1v+0x6c>)
   d6506:	682e      	ldr	r6, [r5, #0]
   d6508:	b94e      	cbnz	r6, d651e <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d650a:	2084      	movs	r0, #132	; 0x84
   d650c:	f7fd fdc3 	bl	d4096 <_Znwj>
   d6510:	4607      	mov	r7, r0
   d6512:	b118      	cbz	r0, d651c <_Z22__fetch_global_Serial1v+0x34>
   d6514:	2284      	movs	r2, #132	; 0x84
   d6516:	4631      	mov	r1, r6
   d6518:	f001 fe05 	bl	d8126 <memset>
   d651c:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d651e:	4f0e      	ldr	r7, [pc, #56]	; (d6558 <_Z22__fetch_global_Serial1v+0x70>)
   d6520:	6839      	ldr	r1, [r7, #0]
   d6522:	f011 0601 	ands.w	r6, r1, #1
   d6526:	d111      	bne.n	d654c <_Z22__fetch_global_Serial1v+0x64>
   d6528:	4638      	mov	r0, r7
   d652a:	f7fd fdbc 	bl	d40a6 <__cxa_guard_acquire>
   d652e:	b168      	cbz	r0, d654c <_Z22__fetch_global_Serial1v+0x64>
   d6530:	6822      	ldr	r2, [r4, #0]
   d6532:	682b      	ldr	r3, [r5, #0]
   d6534:	4809      	ldr	r0, [pc, #36]	; (d655c <_Z22__fetch_global_Serial1v+0x74>)
   d6536:	4631      	mov	r1, r6
   d6538:	f7ff ffbc 	bl	d64b4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d653c:	4638      	mov	r0, r7
   d653e:	f7fd fdb7 	bl	d40b0 <__cxa_guard_release>
   d6542:	4a07      	ldr	r2, [pc, #28]	; (d6560 <_Z22__fetch_global_Serial1v+0x78>)
   d6544:	4907      	ldr	r1, [pc, #28]	; (d6564 <_Z22__fetch_global_Serial1v+0x7c>)
   d6546:	4805      	ldr	r0, [pc, #20]	; (d655c <_Z22__fetch_global_Serial1v+0x74>)
   d6548:	f000 fdf6 	bl	d7138 <__aeabi_atexit>
#endif
	return serial1;
}
   d654c:	4803      	ldr	r0, [pc, #12]	; (d655c <_Z22__fetch_global_Serial1v+0x74>)
   d654e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6550:	2003e53c 	.word	0x2003e53c
   d6554:	2003e534 	.word	0x2003e534
   d6558:	2003e538 	.word	0x2003e538
   d655c:	2003e520 	.word	0x2003e520
   d6560:	2003e408 	.word	0x2003e408
   d6564:	000d6431 	.word	0x000d6431

000d6568 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d6568:	4770      	bx	lr

000d656a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d656a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d656c:	4606      	mov	r6, r0
   d656e:	4615      	mov	r5, r2
   d6570:	460c      	mov	r4, r1
   d6572:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6574:	42bc      	cmp	r4, r7
   d6576:	d006      	beq.n	d6586 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6578:	6833      	ldr	r3, [r6, #0]
   d657a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d657e:	689b      	ldr	r3, [r3, #8]
   d6580:	4630      	mov	r0, r6
   d6582:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6584:	e7f6      	b.n	d6574 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6586:	4628      	mov	r0, r5
   d6588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d658a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d658a:	2200      	movs	r2, #0
   d658c:	7c00      	ldrb	r0, [r0, #16]
   d658e:	f7ff b999 	b.w	d58c4 <HAL_I2C_Write_Data>

000d6592 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6592:	2100      	movs	r1, #0
   d6594:	7c00      	ldrb	r0, [r0, #16]
   d6596:	f7ff b99d 	b.w	d58d4 <HAL_I2C_Available_Data>

000d659a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d659a:	2100      	movs	r1, #0
   d659c:	7c00      	ldrb	r0, [r0, #16]
   d659e:	f7ff b9a1 	b.w	d58e4 <HAL_I2C_Read_Data>

000d65a2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d65a2:	2100      	movs	r1, #0
   d65a4:	7c00      	ldrb	r0, [r0, #16]
   d65a6:	f7ff b9a5 	b.w	d58f4 <HAL_I2C_Peek_Data>

000d65aa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d65aa:	2100      	movs	r1, #0
   d65ac:	7c00      	ldrb	r0, [r0, #16]
   d65ae:	f7ff b9a9 	b.w	d5904 <HAL_I2C_Flush_Data>

000d65b2 <_ZN7TwoWireD0Ev>:
   d65b2:	b510      	push	{r4, lr}
   d65b4:	2114      	movs	r1, #20
   d65b6:	4604      	mov	r4, r0
   d65b8:	f000 fdcc 	bl	d7154 <_ZdlPvj>
   d65bc:	4620      	mov	r0, r4
   d65be:	bd10      	pop	{r4, pc}

000d65c0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d65c0:	b510      	push	{r4, lr}
   d65c2:	4604      	mov	r4, r0
   d65c4:	2300      	movs	r3, #0
   d65c6:	6063      	str	r3, [r4, #4]
   d65c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d65cc:	60a3      	str	r3, [r4, #8]
   d65ce:	4b04      	ldr	r3, [pc, #16]	; (d65e0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d65d0:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d65d2:	4608      	mov	r0, r1
   d65d4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d65d6:	4611      	mov	r1, r2
   d65d8:	f7ff f9a4 	bl	d5924 <HAL_I2C_Init>
}
   d65dc:	4620      	mov	r0, r4
   d65de:	bd10      	pop	{r4, pc}
   d65e0:	000d83c8 	.word	0x000d83c8

000d65e4 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d65e4:	2300      	movs	r3, #0
   d65e6:	461a      	mov	r2, r3
   d65e8:	4619      	mov	r1, r3
   d65ea:	7c00      	ldrb	r0, [r0, #16]
   d65ec:	f7ff b952 	b.w	d5894 <HAL_I2C_Begin>

000d65f0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d65f0:	b570      	push	{r4, r5, r6, lr}
   d65f2:	460c      	mov	r4, r1
   d65f4:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d65f6:	2514      	movs	r5, #20
   d65f8:	4606      	mov	r6, r0
   d65fa:	462a      	mov	r2, r5
   d65fc:	2100      	movs	r1, #0
   d65fe:	a801      	add	r0, sp, #4
   d6600:	f001 fd91 	bl	d8126 <memset>
   d6604:	7823      	ldrb	r3, [r4, #0]
   d6606:	f88d 3008 	strb.w	r3, [sp, #8]
   d660a:	6863      	ldr	r3, [r4, #4]
   d660c:	9303      	str	r3, [sp, #12]
   d660e:	68e3      	ldr	r3, [r4, #12]
   d6610:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d6612:	2200      	movs	r2, #0
   d6614:	7a23      	ldrb	r3, [r4, #8]
   d6616:	7c30      	ldrb	r0, [r6, #16]
   d6618:	f8ad 5004 	strh.w	r5, [sp, #4]
   d661c:	a901      	add	r1, sp, #4
   d661e:	9305      	str	r3, [sp, #20]
   d6620:	f7ff f988 	bl	d5934 <HAL_I2C_Request_Data_Ex>
}
   d6624:	b006      	add	sp, #24
   d6626:	bd70      	pop	{r4, r5, r6, pc}

000d6628 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d6628:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d662a:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d662c:	f88d 1000 	strb.w	r1, [sp]
   d6630:	f04f 0164 	mov.w	r1, #100	; 0x64
   d6634:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6636:	bf18      	it	ne
   d6638:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d663a:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d663c:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d663e:	f88d 3008 	strb.w	r3, [sp, #8]
   d6642:	f7ff ffd5 	bl	d65f0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6646:	b005      	add	sp, #20
   d6648:	f85d fb04 	ldr.w	pc, [sp], #4

000d664c <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d664c:	2301      	movs	r3, #1
   d664e:	f7ff bfeb 	b.w	d6628 <_ZN7TwoWire11requestFromEhjh>

000d6652 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d6652:	2200      	movs	r2, #0
   d6654:	7c00      	ldrb	r0, [r0, #16]
   d6656:	f7ff b925 	b.w	d58a4 <HAL_I2C_Begin_Transmission>

000d665a <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d665a:	2200      	movs	r2, #0
   d665c:	7c00      	ldrb	r0, [r0, #16]
   d665e:	f7ff b929 	b.w	d58b4 <HAL_I2C_End_Transmission>

000d6662 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d6662:	2101      	movs	r1, #1
   d6664:	f7ff bff9 	b.w	d665a <_ZN7TwoWire15endTransmissionEh>

000d6668 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6668:	2100      	movs	r1, #0
   d666a:	7c00      	ldrb	r0, [r0, #16]
   d666c:	f7ff b952 	b.w	d5914 <HAL_I2C_Is_Enabled>

000d6670 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6670:	2200      	movs	r2, #0
   d6672:	4611      	mov	r1, r2
   d6674:	6840      	ldr	r0, [r0, #4]
   d6676:	f7ff ba31 	b.w	d5adc <network_listening>

000d667a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d667a:	2200      	movs	r2, #0
   d667c:	4611      	mov	r1, r2
   d667e:	6840      	ldr	r0, [r0, #4]
   d6680:	f7ff ba3c 	b.w	d5afc <network_get_listen_timeout>

000d6684 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6684:	2200      	movs	r2, #0
   d6686:	6840      	ldr	r0, [r0, #4]
   d6688:	f7ff ba30 	b.w	d5aec <network_set_listen_timeout>

000d668c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d668c:	2200      	movs	r2, #0
   d668e:	f081 0101 	eor.w	r1, r1, #1
   d6692:	6840      	ldr	r0, [r0, #4]
   d6694:	f7ff ba1a 	b.w	d5acc <network_listen>

000d6698 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6698:	2300      	movs	r3, #0
   d669a:	461a      	mov	r2, r3
   d669c:	2101      	movs	r1, #1
   d669e:	6840      	ldr	r0, [r0, #4]
   d66a0:	f7ff ba0c 	b.w	d5abc <network_off>

000d66a4 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d66a4:	2300      	movs	r3, #0
   d66a6:	461a      	mov	r2, r3
   d66a8:	4619      	mov	r1, r3
   d66aa:	6840      	ldr	r0, [r0, #4]
   d66ac:	f7ff b9fe 	b.w	d5aac <network_on>

000d66b0 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d66b0:	2200      	movs	r2, #0
   d66b2:	4611      	mov	r1, r2
   d66b4:	6840      	ldr	r0, [r0, #4]
   d66b6:	f7ff b9f1 	b.w	d5a9c <network_ready>

000d66ba <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d66ba:	2200      	movs	r2, #0
   d66bc:	4611      	mov	r1, r2
   d66be:	6840      	ldr	r0, [r0, #4]
   d66c0:	f7ff b9dc 	b.w	d5a7c <network_connecting>

000d66c4 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d66c4:	2200      	movs	r2, #0
   d66c6:	2102      	movs	r1, #2
   d66c8:	6840      	ldr	r0, [r0, #4]
   d66ca:	f7ff b9df 	b.w	d5a8c <network_disconnect>

000d66ce <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d66ce:	2300      	movs	r3, #0
   d66d0:	461a      	mov	r2, r3
   d66d2:	6840      	ldr	r0, [r0, #4]
   d66d4:	f7ff b9ca 	b.w	d5a6c <network_connect>

000d66d8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d66d8:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d66da:	4605      	mov	r5, r0
   d66dc:	b188      	cbz	r0, d6702 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d66de:	6804      	ldr	r4, [r0, #0]
   d66e0:	b14c      	cbz	r4, d66f6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d66e2:	68a3      	ldr	r3, [r4, #8]
   d66e4:	b11b      	cbz	r3, d66ee <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d66e6:	2203      	movs	r2, #3
   d66e8:	4621      	mov	r1, r4
   d66ea:	4620      	mov	r0, r4
   d66ec:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d66ee:	2110      	movs	r1, #16
   d66f0:	4620      	mov	r0, r4
   d66f2:	f000 fd2f 	bl	d7154 <_ZdlPvj>
   d66f6:	4628      	mov	r0, r5
   d66f8:	2114      	movs	r1, #20
      }
   d66fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d66fe:	f000 bd29 	b.w	d7154 <_ZdlPvj>
   d6702:	bd38      	pop	{r3, r4, r5, pc}

000d6704 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6704:	b110      	cbz	r0, d670c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6706:	6803      	ldr	r3, [r0, #0]
   d6708:	685b      	ldr	r3, [r3, #4]
   d670a:	4718      	bx	r3
   d670c:	4770      	bx	lr

000d670e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d670e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6710:	6803      	ldr	r3, [r0, #0]
   d6712:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6714:	b1bb      	cbz	r3, d6746 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6716:	6858      	ldr	r0, [r3, #4]
   d6718:	f7ff f834 	bl	d5784 <os_thread_is_current>
   d671c:	b978      	cbnz	r0, d673e <_ZN6ThreadD1Ev+0x30>
   d671e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6720:	7c5a      	ldrb	r2, [r3, #17]
   d6722:	b912      	cbnz	r2, d672a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6724:	6858      	ldr	r0, [r3, #4]
   d6726:	f7ff f835 	bl	d5794 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d672a:	6823      	ldr	r3, [r4, #0]
   d672c:	6858      	ldr	r0, [r3, #4]
   d672e:	f7ff f839 	bl	d57a4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6732:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6734:	2300      	movs	r3, #0
   d6736:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6738:	b128      	cbz	r0, d6746 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d673a:	f7ff ffcd 	bl	d66d8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d673e:	6820      	ldr	r0, [r4, #0]
   d6740:	b108      	cbz	r0, d6746 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6742:	f7ff ffc9 	bl	d66d8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6746:	4620      	mov	r0, r4
   d6748:	bd10      	pop	{r4, pc}

000d674a <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d674a:	b538      	push	{r3, r4, r5, lr}
   d674c:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d674e:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d6752:	b108      	cbz	r0, d6758 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6754:	f7fd fca5 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6758:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d675c:	b108      	cbz	r0, d6762 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d675e:	f7ff f831 	bl	d57c4 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6762:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d6766:	b135      	cbz	r5, d6776 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6768:	4628      	mov	r0, r5
   d676a:	f7ff ffd0 	bl	d670e <_ZN6ThreadD1Ev>
   d676e:	2104      	movs	r1, #4
   d6770:	4628      	mov	r0, r5
   d6772:	f000 fcef 	bl	d7154 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6776:	6820      	ldr	r0, [r4, #0]
   d6778:	b108      	cbz	r0, d677e <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d677a:	f7ff ffc3 	bl	d6704 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d677e:	4620      	mov	r0, r4
   d6780:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6784 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6784:	b510      	push	{r4, lr}
   d6786:	4b04      	ldr	r3, [pc, #16]	; (d6798 <_ZN5spark9MeshClassD1Ev+0x14>)
   d6788:	4604      	mov	r4, r0
   d678a:	f840 3b08 	str.w	r3, [r0], #8
   d678e:	f7ff ffdc 	bl	d674a <_ZN5spark11MeshPublishD1Ev>
   d6792:	4620      	mov	r0, r4
   d6794:	bd10      	pop	{r4, pc}
   d6796:	bf00      	nop
   d6798:	000d83f0 	.word	0x000d83f0

000d679c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d679c:	b538      	push	{r3, r4, r5, lr}
   d679e:	4c0e      	ldr	r4, [pc, #56]	; (d67d8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d67a0:	4b0e      	ldr	r3, [pc, #56]	; (d67dc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d67a2:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d67a4:	2500      	movs	r5, #0
   d67a6:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d67a8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d67ac:	6063      	str	r3, [r4, #4]
   d67ae:	60a5      	str	r5, [r4, #8]
   d67b0:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d67b4:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d67b8:	f7fe fffc 	bl	d57b4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d67bc:	4b08      	ldr	r3, [pc, #32]	; (d67e0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d67be:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d67c2:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d67c6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d67c8:	4620      	mov	r0, r4
   d67ca:	4a06      	ldr	r2, [pc, #24]	; (d67e4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d67cc:	4906      	ldr	r1, [pc, #24]	; (d67e8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d67ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d67d2:	f000 bcb1 	b.w	d7138 <__aeabi_atexit>
   d67d6:	bf00      	nop
   d67d8:	2003e540 	.word	0x2003e540
   d67dc:	000d84d8 	.word	0x000d84d8
   d67e0:	000d83f0 	.word	0x000d83f0
   d67e4:	2003e408 	.word	0x2003e408
   d67e8:	000d6785 	.word	0x000d6785

000d67ec <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d67ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d67ee:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d67f0:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d67f2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d67f6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d67f8:	2201      	movs	r2, #1
   d67fa:	f04f 33ff 	mov.w	r3, #4294967295
   d67fe:	4621      	mov	r1, r4
   d6800:	47a8      	blx	r5
}
   d6802:	b003      	add	sp, #12
   d6804:	bd30      	pop	{r4, r5, pc}

000d6806 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d6806:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6808:	6803      	ldr	r3, [r0, #0]
   d680a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d680c:	f04f 33ff 	mov.w	r3, #4294967295
   d6810:	46a4      	mov	ip, r4
}
   d6812:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6816:	4760      	bx	ip

000d6818 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6818:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d681a:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d681c:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d681e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d6822:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d6824:	4621      	mov	r1, r4
   d6826:	4613      	mov	r3, r2
   d6828:	2201      	movs	r2, #1
   d682a:	47a8      	blx	r5
}
   d682c:	b003      	add	sp, #12
   d682e:	bd30      	pop	{r4, r5, pc}

000d6830 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d6830:	4770      	bx	lr

000d6832 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6832:	b538      	push	{r3, r4, r5, lr}
   d6834:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d6836:	681a      	ldr	r2, [r3, #0]
   d6838:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d683a:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d683c:	da05      	bge.n	d684a <_ZN9TCPClient9connectedEv+0x18>
   d683e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6842:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6846:	429a      	cmp	r2, r3
   d6848:	d001      	beq.n	d684e <_ZN9TCPClient9connectedEv+0x1c>
   d684a:	2501      	movs	r5, #1
   d684c:	e00b      	b.n	d6866 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d684e:	6803      	ldr	r3, [r0, #0]
   d6850:	691b      	ldr	r3, [r3, #16]
   d6852:	4798      	blx	r3
   d6854:	2800      	cmp	r0, #0
   d6856:	bf14      	ite	ne
   d6858:	2501      	movne	r5, #1
   d685a:	2500      	moveq	r5, #0
        if (!rv) {
   d685c:	d103      	bne.n	d6866 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d685e:	6823      	ldr	r3, [r4, #0]
   d6860:	4620      	mov	r0, r4
   d6862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6864:	4798      	blx	r3
        }
    }
    return rv;
}
   d6866:	4628      	mov	r0, r5
   d6868:	bd38      	pop	{r3, r4, r5, pc}

000d686a <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d686a:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d686c:	6818      	ldr	r0, [r3, #0]
}
   d686e:	43c0      	mvns	r0, r0
   d6870:	0fc0      	lsrs	r0, r0, #31
   d6872:	4770      	bx	lr

000d6874 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6874:	4770      	bx	lr

000d6876 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6876:	2000      	movs	r0, #0
   d6878:	4770      	bx	lr

000d687a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d687a:	b510      	push	{r4, lr}
   d687c:	2114      	movs	r1, #20
   d687e:	4604      	mov	r4, r0
   d6880:	f000 fc68 	bl	d7154 <_ZdlPvj>
   d6884:	4620      	mov	r0, r4
   d6886:	bd10      	pop	{r4, pc}

000d6888 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6888:	f7fd bc09 	b.w	d409e <_ZdlPv>

000d688c <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d688c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d688e:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d6890:	2200      	movs	r2, #0
   d6892:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d6894:	9202      	str	r2, [sp, #8]
   d6896:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6898:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d689a:	4604      	mov	r4, r0
   d689c:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d689e:	d008      	beq.n	d68b2 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d68a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d68a4:	fbb3 f1f2 	udiv	r1, r3, r2
   d68a8:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d68aa:	fb02 3111 	mls	r1, r2, r1, r3
   d68ae:	434a      	muls	r2, r1
   d68b0:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d68b2:	6960      	ldr	r0, [r4, #20]
   d68b4:	2308      	movs	r3, #8
   d68b6:	9300      	str	r3, [sp, #0]
   d68b8:	f241 0205 	movw	r2, #4101	; 0x1005
   d68bc:	446b      	add	r3, sp
   d68be:	f640 71ff 	movw	r1, #4095	; 0xfff
   d68c2:	6800      	ldr	r0, [r0, #0]
   d68c4:	f7ff f83e 	bl	d5944 <sock_setsockopt>
    if (ret < 0) {
   d68c8:	2800      	cmp	r0, #0
   d68ca:	db08      	blt.n	d68de <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d68cc:	6960      	ldr	r0, [r4, #20]
   d68ce:	2300      	movs	r3, #0
   d68d0:	4632      	mov	r2, r6
   d68d2:	4629      	mov	r1, r5
   d68d4:	6800      	ldr	r0, [r0, #0]
   d68d6:	f7ff f855 	bl	d5984 <sock_send>
    if (ret < 0) {
   d68da:	2800      	cmp	r0, #0
   d68dc:	da04      	bge.n	d68e8 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d68de:	f7ff f93d 	bl	d5b5c <__errno>
   d68e2:	6803      	ldr	r3, [r0, #0]
   d68e4:	6063      	str	r3, [r4, #4]
   d68e6:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d68e8:	b004      	add	sp, #16
   d68ea:	bd70      	pop	{r4, r5, r6, pc}

000d68ec <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d68ec:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d68ee:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d68f0:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d68f2:	689b      	ldr	r3, [r3, #8]
   d68f4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d68f6:	68a3      	ldr	r3, [r4, #8]
   d68f8:	3b01      	subs	r3, #1
   d68fa:	60a3      	str	r3, [r4, #8]
   d68fc:	b92b      	cbnz	r3, d690a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d68fe:	6823      	ldr	r3, [r4, #0]
   d6900:	4620      	mov	r0, r4
   d6902:	68db      	ldr	r3, [r3, #12]
        }
    }
   d6904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d6908:	4718      	bx	r3
   d690a:	bd10      	pop	{r4, pc}

000d690c <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d690c:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d690e:	4604      	mov	r4, r0
   d6910:	694d      	ldr	r5, [r1, #20]
   d6912:	4b05      	ldr	r3, [pc, #20]	; (d6928 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d6914:	f844 3b04 	str.w	r3, [r4], #4
   d6918:	358c      	adds	r5, #140	; 0x8c
   d691a:	4606      	mov	r6, r0
   d691c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d691e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6920:	682b      	ldr	r3, [r5, #0]
   d6922:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d6924:	4630      	mov	r0, r6
   d6926:	bd70      	pop	{r4, r5, r6, pc}
   d6928:	000d8354 	.word	0x000d8354

000d692c <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d692c:	b510      	push	{r4, lr}
   d692e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6930:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6934:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6938:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d693a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d693c:	d005      	beq.n	d694a <_ZN9TCPClient4peekEv+0x1e>
   d693e:	6962      	ldr	r2, [r4, #20]
   d6940:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6944:	4413      	add	r3, r2
   d6946:	7918      	ldrb	r0, [r3, #4]
   d6948:	bd10      	pop	{r4, pc}
   d694a:	6803      	ldr	r3, [r0, #0]
   d694c:	691b      	ldr	r3, [r3, #16]
   d694e:	4798      	blx	r3
   d6950:	2800      	cmp	r0, #0
   d6952:	d1f4      	bne.n	d693e <_ZN9TCPClient4peekEv+0x12>
   d6954:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6958:	bd10      	pop	{r4, pc}

000d695a <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d695a:	b510      	push	{r4, lr}
   d695c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d695e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6962:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6966:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d6968:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d696a:	d008      	beq.n	d697e <_ZN9TCPClient4readEv+0x24>
   d696c:	6962      	ldr	r2, [r4, #20]
   d696e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6972:	1c59      	adds	r1, r3, #1
   d6974:	4413      	add	r3, r2
   d6976:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d697a:	7918      	ldrb	r0, [r3, #4]
   d697c:	bd10      	pop	{r4, pc}
   d697e:	6803      	ldr	r3, [r0, #0]
   d6980:	691b      	ldr	r3, [r3, #16]
   d6982:	4798      	blx	r3
   d6984:	2800      	cmp	r0, #0
   d6986:	d1f1      	bne.n	d696c <_ZN9TCPClient4readEv+0x12>
   d6988:	f04f 30ff 	mov.w	r0, #4294967295
}
   d698c:	bd10      	pop	{r4, pc}

000d698e <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d698e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6990:	6943      	ldr	r3, [r0, #20]
   d6992:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d6994:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6998:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d699c:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d699e:	4605      	mov	r5, r0
   d69a0:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d69a2:	d106      	bne.n	d69b2 <_ZN9TCPClient4readEPhj+0x24>
   d69a4:	6803      	ldr	r3, [r0, #0]
   d69a6:	691b      	ldr	r3, [r3, #16]
   d69a8:	4798      	blx	r3
   d69aa:	b910      	cbnz	r0, d69b2 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d69ac:	f04f 34ff 	mov.w	r4, #4294967295
   d69b0:	e014      	b.n	d69dc <_ZN9TCPClient4readEPhj+0x4e>
   d69b2:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d69b4:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d69b8:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d69bc:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d69be:	42bc      	cmp	r4, r7
   d69c0:	bf28      	it	cs
   d69c2:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d69c4:	4419      	add	r1, r3
   d69c6:	4622      	mov	r2, r4
   d69c8:	3104      	adds	r1, #4
   d69ca:	4630      	mov	r0, r6
   d69cc:	f001 fba0 	bl	d8110 <memcpy>
   d69d0:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d69d2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d69d6:	4423      	add	r3, r4
   d69d8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d69dc:	4620      	mov	r0, r4
   d69de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d69e0 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d69e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d69e4:	4698      	mov	r8, r3
    stop();
   d69e6:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d69e8:	b093      	sub	sp, #76	; 0x4c
    stop();
   d69ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d69ec:	460d      	mov	r5, r1
   d69ee:	4606      	mov	r6, r0
   d69f0:	4617      	mov	r7, r2
    stop();
   d69f2:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d69f4:	ab12      	add	r3, sp, #72	; 0x48
   d69f6:	2400      	movs	r4, #0
   d69f8:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d69fc:	4622      	mov	r2, r4
   d69fe:	4621      	mov	r1, r4
   d6a00:	4628      	mov	r0, r5
   d6a02:	f7fe fe0f 	bl	d5624 <netdb_getaddrinfo>
   d6a06:	4681      	mov	r9, r0
   d6a08:	2800      	cmp	r0, #0
   d6a0a:	d13d      	bne.n	d6a88 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d6a0c:	9b00      	ldr	r3, [sp, #0]
   d6a0e:	2b00      	cmp	r3, #0
   d6a10:	d056      	beq.n	d6ac0 <_ZN9TCPClient7connectEPKctm+0xe0>
   d6a12:	695b      	ldr	r3, [r3, #20]
   d6a14:	2b00      	cmp	r3, #0
   d6a16:	d053      	beq.n	d6ac0 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d6a18:	a806      	add	r0, sp, #24
   d6a1a:	f7ff fbff 	bl	d621c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6a1e:	9b00      	ldr	r3, [sp, #0]
   d6a20:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d6a22:	7863      	ldrb	r3, [r4, #1]
   d6a24:	2b02      	cmp	r3, #2
   d6a26:	d101      	bne.n	d6a2c <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d6a28:	1d21      	adds	r1, r4, #4
   d6a2a:	e013      	b.n	d6a54 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d6a2c:	2b0a      	cmp	r3, #10
   d6a2e:	d114      	bne.n	d6a5a <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d6a30:	2211      	movs	r2, #17
   d6a32:	4649      	mov	r1, r9
   d6a34:	a801      	add	r0, sp, #4
   d6a36:	f001 fb76 	bl	d8126 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6a3a:	68a3      	ldr	r3, [r4, #8]
   d6a3c:	bb33      	cbnz	r3, d6a8c <_ZN9TCPClient7connectEPKctm+0xac>
   d6a3e:	68e3      	ldr	r3, [r4, #12]
   d6a40:	bb23      	cbnz	r3, d6a8c <_ZN9TCPClient7connectEPKctm+0xac>
   d6a42:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d6a46:	6925      	ldr	r5, [r4, #16]
   d6a48:	f7fe fed4 	bl	d57f4 <inet_htonl>
   d6a4c:	4285      	cmp	r5, r0
   d6a4e:	d11d      	bne.n	d6a8c <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d6a50:	f104 0114 	add.w	r1, r4, #20
   d6a54:	a806      	add	r0, sp, #24
   d6a56:	f7ff fc24 	bl	d62a2 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d6a5a:	a806      	add	r0, sp, #24
   d6a5c:	f7ff fbfe 	bl	d625c <_ZNK9IPAddresscvbEv>
        if (addr) {
   d6a60:	2800      	cmp	r0, #0
   d6a62:	d02d      	beq.n	d6ac0 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d6a64:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6a66:	ad07      	add	r5, sp, #28
   d6a68:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d6a6c:	4b18      	ldr	r3, [pc, #96]	; (d6ad0 <_ZN9TCPClient7connectEPKctm+0xf0>)
   d6a6e:	930c      	str	r3, [sp, #48]	; 0x30
   d6a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6a72:	ac0d      	add	r4, sp, #52	; 0x34
   d6a74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6a76:	682b      	ldr	r3, [r5, #0]
   d6a78:	7023      	strb	r3, [r4, #0]
   d6a7a:	463a      	mov	r2, r7
   d6a7c:	4643      	mov	r3, r8
   d6a7e:	a90c      	add	r1, sp, #48	; 0x30
   d6a80:	4630      	mov	r0, r6
   d6a82:	47c8      	blx	r9
   d6a84:	4681      	mov	r9, r0
   d6a86:	e01b      	b.n	d6ac0 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6a88:	46a1      	mov	r9, r4
   d6a8a:	e019      	b.n	d6ac0 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6a8c:	f104 0308 	add.w	r3, r4, #8
   d6a90:	ad01      	add	r5, sp, #4
   d6a92:	3418      	adds	r4, #24
   d6a94:	6818      	ldr	r0, [r3, #0]
   d6a96:	6859      	ldr	r1, [r3, #4]
   d6a98:	462a      	mov	r2, r5
   d6a9a:	c203      	stmia	r2!, {r0, r1}
   d6a9c:	3308      	adds	r3, #8
   d6a9e:	42a3      	cmp	r3, r4
   d6aa0:	4615      	mov	r5, r2
   d6aa2:	d1f7      	bne.n	d6a94 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d6aa4:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d6aa6:	a901      	add	r1, sp, #4
   d6aa8:	a80c      	add	r0, sp, #48	; 0x30
   d6aaa:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d6aac:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d6ab0:	f7ff fbc2 	bl	d6238 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6ab4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6ab6:	ac07      	add	r4, sp, #28
   d6ab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6aba:	682b      	ldr	r3, [r5, #0]
   d6abc:	7023      	strb	r3, [r4, #0]
   d6abe:	e7cc      	b.n	d6a5a <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d6ac0:	9800      	ldr	r0, [sp, #0]
   d6ac2:	f7fe fda7 	bl	d5614 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d6ac6:	4648      	mov	r0, r9
   d6ac8:	b013      	add	sp, #76	; 0x4c
   d6aca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6ace:	bf00      	nop
   d6ad0:	000d8354 	.word	0x000d8354

000d6ad4 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d6ad4:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d6ad6:	2300      	movs	r3, #0
   d6ad8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d6adc:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d6ade:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d6ae2:	4770      	bx	lr

000d6ae4 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6ae8:	461e      	mov	r6, r3
    stop();
   d6aea:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6aec:	460c      	mov	r4, r1
   d6aee:	b08a      	sub	sp, #40	; 0x28
    stop();
   d6af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6af2:	4605      	mov	r5, r0
   d6af4:	4617      	mov	r7, r2
    stop();
   d6af6:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d6af8:	7d23      	ldrb	r3, [r4, #20]
   d6afa:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d6afe:	2b04      	cmp	r3, #4
   d6b00:	bf0c      	ite	eq
   d6b02:	2002      	moveq	r0, #2
   d6b04:	200a      	movne	r0, #10
   d6b06:	2206      	movs	r2, #6
   d6b08:	2101      	movs	r1, #1
   d6b0a:	f7fe ff43 	bl	d5994 <sock_socket>
   d6b0e:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d6b12:	696b      	ldr	r3, [r5, #20]
   d6b14:	681b      	ldr	r3, [r3, #0]
   d6b16:	2b00      	cmp	r3, #0
   d6b18:	db18      	blt.n	d6b4c <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d6b1a:	4628      	mov	r0, r5
   d6b1c:	f7ff ffda 	bl	d6ad4 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d6b20:	b1d6      	cbz	r6, d6b58 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d6b22:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6b24:	a903      	add	r1, sp, #12
   d6b26:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d6b28:	9303      	str	r3, [sp, #12]
   d6b2a:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6b2e:	f7fe fde1 	bl	d56f4 <if_index_to_name>
   d6b32:	b958      	cbnz	r0, d6b4c <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d6b34:	6968      	ldr	r0, [r5, #20]
   d6b36:	2306      	movs	r3, #6
   d6b38:	9300      	str	r3, [sp, #0]
   d6b3a:	f241 020b 	movw	r2, #4107	; 0x100b
   d6b3e:	ab03      	add	r3, sp, #12
   d6b40:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6b44:	6800      	ldr	r0, [r0, #0]
   d6b46:	f7fe fefd 	bl	d5944 <sock_setsockopt>
   d6b4a:	b128      	cbz	r0, d6b58 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d6b4c:	682b      	ldr	r3, [r5, #0]
   d6b4e:	4628      	mov	r0, r5
   d6b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6b52:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d6b54:	4798      	blx	r3
   d6b56:	e03b      	b.n	d6bd0 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d6b58:	261c      	movs	r6, #28
   d6b5a:	4632      	mov	r2, r6
   d6b5c:	2100      	movs	r1, #0
   d6b5e:	a803      	add	r0, sp, #12
   d6b60:	f001 fae1 	bl	d8126 <memset>
    if (ip.version() == 4) {
   d6b64:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d6b66:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d6b6a:	2b04      	cmp	r3, #4
   d6b6c:	d10c      	bne.n	d6b88 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d6b6e:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d6b70:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d6b72:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d6b76:	f7fe fe45 	bl	d5804 <inet_htons>
   d6b7a:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d6b7e:	6860      	ldr	r0, [r4, #4]
   d6b80:	f7fe fe38 	bl	d57f4 <inet_htonl>
   d6b84:	9004      	str	r0, [sp, #16]
   d6b86:	e013      	b.n	d6bb0 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d6b88:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d6b8a:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d6b8c:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d6b90:	f7fe fe38 	bl	d5804 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6b94:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d6b96:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6b9a:	1d23      	adds	r3, r4, #4
   d6b9c:	f104 0714 	add.w	r7, r4, #20
   d6ba0:	6818      	ldr	r0, [r3, #0]
   d6ba2:	6859      	ldr	r1, [r3, #4]
   d6ba4:	4632      	mov	r2, r6
   d6ba6:	c203      	stmia	r2!, {r0, r1}
   d6ba8:	3308      	adds	r3, #8
   d6baa:	42bb      	cmp	r3, r7
   d6bac:	4616      	mov	r6, r2
   d6bae:	d1f7      	bne.n	d6ba0 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d6bb0:	696b      	ldr	r3, [r5, #20]
   d6bb2:	221c      	movs	r2, #28
   d6bb4:	a903      	add	r1, sp, #12
   d6bb6:	6818      	ldr	r0, [r3, #0]
   d6bb8:	f7fe fed4 	bl	d5964 <sock_connect>
   d6bbc:	2800      	cmp	r0, #0
   d6bbe:	d1c5      	bne.n	d6b4c <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d6bc0:	3404      	adds	r4, #4
   d6bc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6bc4:	696d      	ldr	r5, [r5, #20]
   d6bc6:	358c      	adds	r5, #140	; 0x8c
   d6bc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6bca:	6823      	ldr	r3, [r4, #0]
   d6bcc:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d6bce:	2401      	movs	r4, #1
}
   d6bd0:	4620      	mov	r0, r4
   d6bd2:	b00a      	add	sp, #40	; 0x28
   d6bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6bd8 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d6bd8:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d6bda:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d6bdc:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d6bde:	6818      	ldr	r0, [r3, #0]
   d6be0:	2800      	cmp	r0, #0
   d6be2:	db01      	blt.n	d6be8 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d6be4:	f7fe feb6 	bl	d5954 <sock_close>
   d6be8:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d6bea:	f04f 32ff 	mov.w	r2, #4294967295
   d6bee:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6bf0:	6960      	ldr	r0, [r4, #20]
   d6bf2:	2211      	movs	r2, #17
   d6bf4:	2100      	movs	r1, #0
   d6bf6:	308c      	adds	r0, #140	; 0x8c
   d6bf8:	f001 fa95 	bl	d8126 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d6bfc:	4620      	mov	r0, r4
}
   d6bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d6c02:	f7ff bf67 	b.w	d6ad4 <_ZN9TCPClient12flush_bufferEv>
	...

000d6c08 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d6c08:	b530      	push	{r4, r5, lr}
   d6c0a:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d6c0c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d6c10:	b08b      	sub	sp, #44	; 0x2c
   d6c12:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d6c14:	b11b      	cbz	r3, d6c1e <_ZN9TCPClient9availableEv+0x16>
   d6c16:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d6c1a:	429a      	cmp	r2, r3
   d6c1c:	d040      	beq.n	d6ca0 <_ZN9TCPClient9availableEv+0x98>
   d6c1e:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d6c20:	6818      	ldr	r0, [r3, #0]
   d6c22:	2800      	cmp	r0, #0
   d6c24:	db3f      	blt.n	d6ca6 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d6c26:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d6c2a:	2d7f      	cmp	r5, #127	; 0x7f
   d6c2c:	d83b      	bhi.n	d6ca6 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d6c2e:	1d19      	adds	r1, r3, #4
   d6c30:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d6c34:	2308      	movs	r3, #8
   d6c36:	4429      	add	r1, r5
   d6c38:	f7fe fe9c 	bl	d5974 <sock_recv>
            if (ret > 0) {
   d6c3c:	2800      	cmp	r0, #0
   d6c3e:	dd0c      	ble.n	d6c5a <_ZN9TCPClient9availableEv+0x52>
   d6c40:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d6c42:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6c46:	b90a      	cbnz	r2, d6c4c <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d6c48:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d6c4c:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d6c4e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d6c52:	4418      	add	r0, r3
   d6c54:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d6c58:	e025      	b.n	d6ca6 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d6c5a:	f7fe ff7f 	bl	d5b5c <__errno>
   d6c5e:	6803      	ldr	r3, [r0, #0]
   d6c60:	2b0b      	cmp	r3, #11
   d6c62:	d020      	beq.n	d6ca6 <_ZN9TCPClient9availableEv+0x9e>
   d6c64:	f7fe ff7a 	bl	d5b5c <__errno>
   d6c68:	6803      	ldr	r3, [r0, #0]
   d6c6a:	2b0b      	cmp	r3, #11
   d6c6c:	d01b      	beq.n	d6ca6 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d6c6e:	2320      	movs	r3, #32
   d6c70:	2500      	movs	r5, #0
   d6c72:	9302      	str	r3, [sp, #8]
   d6c74:	9503      	str	r5, [sp, #12]
   d6c76:	f7fe ff71 	bl	d5b5c <__errno>
   d6c7a:	6803      	ldr	r3, [r0, #0]
   d6c7c:	9301      	str	r3, [sp, #4]
   d6c7e:	4b0e      	ldr	r3, [pc, #56]	; (d6cb8 <_ZN9TCPClient9availableEv+0xb0>)
   d6c80:	9300      	str	r3, [sp, #0]
   d6c82:	aa02      	add	r2, sp, #8
   d6c84:	462b      	mov	r3, r5
   d6c86:	490d      	ldr	r1, [pc, #52]	; (d6cbc <_ZN9TCPClient9availableEv+0xb4>)
   d6c88:	2032      	movs	r0, #50	; 0x32
   d6c8a:	f7fe fec3 	bl	d5a14 <log_message>
                    sock_close(d_->sock);
   d6c8e:	6963      	ldr	r3, [r4, #20]
   d6c90:	6818      	ldr	r0, [r3, #0]
   d6c92:	f7fe fe5f 	bl	d5954 <sock_close>
   d6c96:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d6c98:	f04f 32ff 	mov.w	r2, #4294967295
   d6c9c:	601a      	str	r2, [r3, #0]
   d6c9e:	e002      	b.n	d6ca6 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d6ca0:	f7ff ff18 	bl	d6ad4 <_ZN9TCPClient12flush_bufferEv>
   d6ca4:	e7bb      	b.n	d6c1e <_ZN9TCPClient9availableEv+0x16>
   d6ca6:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d6ca8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d6cac:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d6cb0:	1a18      	subs	r0, r3, r0
}
   d6cb2:	b00b      	add	sp, #44	; 0x2c
   d6cb4:	bd30      	pop	{r4, r5, pc}
   d6cb6:	bf00      	nop
   d6cb8:	000d848b 	.word	0x000d848b
   d6cbc:	000d8484 	.word	0x000d8484

000d6cc0 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d6cc0:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d6cc2:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d6cc4:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d6cc6:	6001      	str	r1, [r0, #0]
   d6cc8:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d6ccc:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d6cd0:	3088      	adds	r0, #136	; 0x88
   d6cd2:	f7ff faa3 	bl	d621c <_ZN9IPAddressC1Ev>
}
   d6cd6:	4620      	mov	r0, r4
   d6cd8:	bd10      	pop	{r4, pc}
	...

000d6cdc <_ZN9TCPClientC1Ei>:
   d6cdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d6ce0:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6ce2:	2300      	movs	r3, #0
   d6ce4:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d6ce6:	4a14      	ldr	r2, [pc, #80]	; (d6d38 <_ZN9TCPClientC1Ei+0x5c>)
   d6ce8:	6043      	str	r3, [r0, #4]
   d6cea:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6cec:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6cee:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d6cf0:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6cf2:	20a0      	movs	r0, #160	; 0xa0
   d6cf4:	460e      	mov	r6, r1
   d6cf6:	f7fd f9ce 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6cfa:	4605      	mov	r5, r0
   d6cfc:	b110      	cbz	r0, d6d04 <_ZN9TCPClientC1Ei+0x28>
   d6cfe:	4631      	mov	r1, r6
   d6d00:	f7ff ffde 	bl	d6cc0 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6d04:	2014      	movs	r0, #20
   d6d06:	f7fd f9c6 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6d0a:	4603      	mov	r3, r0
   d6d0c:	b128      	cbz	r0, d6d1a <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6d0e:	2201      	movs	r2, #1
   d6d10:	6042      	str	r2, [r0, #4]
   d6d12:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6d14:	4a09      	ldr	r2, [pc, #36]	; (d6d3c <_ZN9TCPClientC1Ei+0x60>)
   d6d16:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6d18:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6d1a:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6d1c:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6d1e:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d6d20:	b128      	cbz	r0, d6d2e <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d6d22:	6843      	ldr	r3, [r0, #4]
   d6d24:	3b01      	subs	r3, #1
   d6d26:	6043      	str	r3, [r0, #4]
   d6d28:	b90b      	cbnz	r3, d6d2e <_ZN9TCPClientC1Ei+0x52>
   d6d2a:	f7ff fddf 	bl	d68ec <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d6d2e:	4620      	mov	r0, r4
   d6d30:	f7ff fed0 	bl	d6ad4 <_ZN9TCPClient12flush_bufferEv>
}
   d6d34:	4620      	mov	r0, r4
   d6d36:	bd70      	pop	{r4, r5, r6, pc}
   d6d38:	000d8440 	.word	0x000d8440
   d6d3c:	000d8424 	.word	0x000d8424

000d6d40 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d6d40:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d6d42:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d6d46:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d6d48:	f7ff ffc8 	bl	d6cdc <_ZN9TCPClientC1Ei>
}
   d6d4c:	4620      	mov	r0, r4
   d6d4e:	bd10      	pop	{r4, pc}

000d6d50 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d6d50:	b510      	push	{r4, lr}
   d6d52:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d6d54:	6800      	ldr	r0, [r0, #0]
   d6d56:	2800      	cmp	r0, #0
   d6d58:	db01      	blt.n	d6d5e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d6d5a:	f7fe fdfb 	bl	d5954 <sock_close>
    }
}
   d6d5e:	4620      	mov	r0, r4
   d6d60:	bd10      	pop	{r4, pc}

000d6d62 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6d62:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6d64:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d6d66:	4620      	mov	r0, r4
   d6d68:	f7ff fff2 	bl	d6d50 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d6d6c:	b124      	cbz	r4, d6d78 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6d6e:	4620      	mov	r0, r4
   d6d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6d74:	f7fd b993 	b.w	d409e <_ZdlPv>
   d6d78:	bd10      	pop	{r4, pc}

000d6d7a <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6d7a:	2200      	movs	r2, #0
   d6d7c:	4611      	mov	r1, r2
   d6d7e:	6840      	ldr	r0, [r0, #4]
   d6d80:	f7fe be8c 	b.w	d5a9c <network_ready>

000d6d84 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6d84:	2200      	movs	r2, #0
   d6d86:	4611      	mov	r1, r2
   d6d88:	6840      	ldr	r0, [r0, #4]
   d6d8a:	f7fe bea7 	b.w	d5adc <network_listening>

000d6d8e <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6d8e:	2200      	movs	r2, #0
   d6d90:	4611      	mov	r1, r2
   d6d92:	6840      	ldr	r0, [r0, #4]
   d6d94:	f7fe beb2 	b.w	d5afc <network_get_listen_timeout>

000d6d98 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6d98:	2200      	movs	r2, #0
   d6d9a:	6840      	ldr	r0, [r0, #4]
   d6d9c:	f7fe bea6 	b.w	d5aec <network_set_listen_timeout>

000d6da0 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6da0:	2200      	movs	r2, #0
   d6da2:	f081 0101 	eor.w	r1, r1, #1
   d6da6:	6840      	ldr	r0, [r0, #4]
   d6da8:	f7fe be90 	b.w	d5acc <network_listen>

000d6dac <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6dac:	2300      	movs	r3, #0
   d6dae:	461a      	mov	r2, r3
   d6db0:	4619      	mov	r1, r3
   d6db2:	6840      	ldr	r0, [r0, #4]
   d6db4:	f7fe be82 	b.w	d5abc <network_off>

000d6db8 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6db8:	2300      	movs	r3, #0
   d6dba:	461a      	mov	r2, r3
   d6dbc:	4619      	mov	r1, r3
   d6dbe:	6840      	ldr	r0, [r0, #4]
   d6dc0:	f7fe be74 	b.w	d5aac <network_on>

000d6dc4 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6dc4:	2200      	movs	r2, #0
   d6dc6:	4611      	mov	r1, r2
   d6dc8:	6840      	ldr	r0, [r0, #4]
   d6dca:	f7fe be57 	b.w	d5a7c <network_connecting>

000d6dce <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6dce:	2200      	movs	r2, #0
   d6dd0:	2102      	movs	r1, #2
   d6dd2:	6840      	ldr	r0, [r0, #4]
   d6dd4:	f7fe be5a 	b.w	d5a8c <network_disconnect>

000d6dd8 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6dd8:	2300      	movs	r3, #0
   d6dda:	461a      	mov	r2, r3
   d6ddc:	6840      	ldr	r0, [r0, #4]
   d6dde:	f7fe be45 	b.w	d5a6c <network_connect>
	...

000d6de4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6de4:	4b02      	ldr	r3, [pc, #8]	; (d6df0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6de6:	2204      	movs	r2, #4
   d6de8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6dea:	4a02      	ldr	r2, [pc, #8]	; (d6df4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6dec:	601a      	str	r2, [r3, #0]
   d6dee:	4770      	bx	lr
   d6df0:	2003e714 	.word	0x2003e714
   d6df4:	000d84a4 	.word	0x000d84a4

000d6df8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6df8:	2300      	movs	r3, #0
   d6dfa:	461a      	mov	r2, r3
   d6dfc:	6840      	ldr	r0, [r0, #4]
   d6dfe:	f7fe be35 	b.w	d5a6c <network_connect>

000d6e02 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6e02:	2200      	movs	r2, #0
   d6e04:	2102      	movs	r1, #2
   d6e06:	6840      	ldr	r0, [r0, #4]
   d6e08:	f7fe be40 	b.w	d5a8c <network_disconnect>

000d6e0c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6e0c:	2200      	movs	r2, #0
   d6e0e:	4611      	mov	r1, r2
   d6e10:	6840      	ldr	r0, [r0, #4]
   d6e12:	f7fe be33 	b.w	d5a7c <network_connecting>

000d6e16 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6e16:	2200      	movs	r2, #0
   d6e18:	4611      	mov	r1, r2
   d6e1a:	6840      	ldr	r0, [r0, #4]
   d6e1c:	f7fe be3e 	b.w	d5a9c <network_ready>

000d6e20 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6e20:	2300      	movs	r3, #0
   d6e22:	461a      	mov	r2, r3
   d6e24:	4619      	mov	r1, r3
   d6e26:	6840      	ldr	r0, [r0, #4]
   d6e28:	f7fe be40 	b.w	d5aac <network_on>

000d6e2c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6e2c:	2300      	movs	r3, #0
   d6e2e:	461a      	mov	r2, r3
   d6e30:	4619      	mov	r1, r3
   d6e32:	6840      	ldr	r0, [r0, #4]
   d6e34:	f7fe be42 	b.w	d5abc <network_off>

000d6e38 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6e38:	2200      	movs	r2, #0
   d6e3a:	f081 0101 	eor.w	r1, r1, #1
   d6e3e:	6840      	ldr	r0, [r0, #4]
   d6e40:	f7fe be44 	b.w	d5acc <network_listen>

000d6e44 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6e44:	2200      	movs	r2, #0
   d6e46:	6840      	ldr	r0, [r0, #4]
   d6e48:	f7fe be50 	b.w	d5aec <network_set_listen_timeout>

000d6e4c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6e4c:	2200      	movs	r2, #0
   d6e4e:	4611      	mov	r1, r2
   d6e50:	6840      	ldr	r0, [r0, #4]
   d6e52:	f7fe be53 	b.w	d5afc <network_get_listen_timeout>

000d6e56 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6e56:	2200      	movs	r2, #0
   d6e58:	4611      	mov	r1, r2
   d6e5a:	6840      	ldr	r0, [r0, #4]
   d6e5c:	f7fe be3e 	b.w	d5adc <network_listening>

000d6e60 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6e64:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6e66:	b095      	sub	sp, #84	; 0x54
   d6e68:	4616      	mov	r6, r2
   d6e6a:	460d      	mov	r5, r1
   d6e6c:	4607      	mov	r7, r0
    IPAddress addr;
   d6e6e:	f7ff f9d5 	bl	d621c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6e72:	4621      	mov	r1, r4
   d6e74:	2220      	movs	r2, #32
   d6e76:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6e78:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6e7a:	f001 f954 	bl	d8126 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6e7e:	2340      	movs	r3, #64	; 0x40
   d6e80:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6e82:	4621      	mov	r1, r4
   d6e84:	466b      	mov	r3, sp
   d6e86:	aa0c      	add	r2, sp, #48	; 0x30
   d6e88:	4630      	mov	r0, r6
   d6e8a:	f7fe fbcb 	bl	d5624 <netdb_getaddrinfo>
    if (!r) {
   d6e8e:	4604      	mov	r4, r0
   d6e90:	2800      	cmp	r0, #0
   d6e92:	d144      	bne.n	d6f1e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6e94:	4602      	mov	r2, r0
   d6e96:	2101      	movs	r1, #1
   d6e98:	6868      	ldr	r0, [r5, #4]
   d6e9a:	f7fe fdff 	bl	d5a9c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6e9e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6ea0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6ea2:	4622      	mov	r2, r4
   d6ea4:	6868      	ldr	r0, [r5, #4]
   d6ea6:	f7fe fdf9 	bl	d5a9c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6eaa:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6eac:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6eae:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6eb0:	2e00      	cmp	r6, #0
   d6eb2:	d034      	beq.n	d6f1e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6eb4:	2900      	cmp	r1, #0
   d6eb6:	d132      	bne.n	d6f1e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6eb8:	6873      	ldr	r3, [r6, #4]
   d6eba:	2b02      	cmp	r3, #2
   d6ebc:	d002      	beq.n	d6ec4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6ebe:	2b0a      	cmp	r3, #10
   d6ec0:	d009      	beq.n	d6ed6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6ec2:	e02a      	b.n	d6f1a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6ec4:	f1b8 0f00 	cmp.w	r8, #0
   d6ec8:	d027      	beq.n	d6f1a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6eca:	6971      	ldr	r1, [r6, #20]
   d6ecc:	4638      	mov	r0, r7
   d6ece:	3104      	adds	r1, #4
   d6ed0:	f7ff f9e7 	bl	d62a2 <_ZN9IPAddressaSEPKh>
   d6ed4:	e020      	b.n	d6f18 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6ed6:	f1b9 0f00 	cmp.w	r9, #0
   d6eda:	d01e      	beq.n	d6f1a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6edc:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6ede:	2211      	movs	r2, #17
   d6ee0:	a801      	add	r0, sp, #4
   d6ee2:	f001 f920 	bl	d8126 <memset>
                    a.v = 6;
   d6ee6:	2306      	movs	r3, #6
   d6ee8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6eec:	ad01      	add	r5, sp, #4
   d6eee:	f104 0308 	add.w	r3, r4, #8
   d6ef2:	3418      	adds	r4, #24
   d6ef4:	6818      	ldr	r0, [r3, #0]
   d6ef6:	6859      	ldr	r1, [r3, #4]
   d6ef8:	462a      	mov	r2, r5
   d6efa:	c203      	stmia	r2!, {r0, r1}
   d6efc:	3308      	adds	r3, #8
   d6efe:	42a3      	cmp	r3, r4
   d6f00:	4615      	mov	r5, r2
   d6f02:	d1f7      	bne.n	d6ef4 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6f04:	a901      	add	r1, sp, #4
   d6f06:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6f08:	ad07      	add	r5, sp, #28
   d6f0a:	f7ff f995 	bl	d6238 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6f0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6f10:	1d3c      	adds	r4, r7, #4
   d6f12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6f14:	682b      	ldr	r3, [r5, #0]
   d6f16:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6f18:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6f1a:	69f6      	ldr	r6, [r6, #28]
   d6f1c:	e7c8      	b.n	d6eb0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6f1e:	9800      	ldr	r0, [sp, #0]
   d6f20:	f7fe fb78 	bl	d5614 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6f24:	4638      	mov	r0, r7
   d6f26:	b015      	add	sp, #84	; 0x54
   d6f28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6f2c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6f2c:	4b02      	ldr	r3, [pc, #8]	; (d6f38 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6f2e:	4a03      	ldr	r2, [pc, #12]	; (d6f3c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6f30:	601a      	str	r2, [r3, #0]
   d6f32:	2200      	movs	r2, #0
   d6f34:	605a      	str	r2, [r3, #4]
   d6f36:	4770      	bx	lr
   d6f38:	2003e71c 	.word	0x2003e71c
   d6f3c:	000d84d8 	.word	0x000d84d8

000d6f40 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6f40:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6f42:	4e18      	ldr	r6, [pc, #96]	; (d6fa4 <pinAvailable+0x64>)
   d6f44:	6831      	ldr	r1, [r6, #0]
   d6f46:	f011 0501 	ands.w	r5, r1, #1
   d6f4a:	4604      	mov	r4, r0
   d6f4c:	d10a      	bne.n	d6f64 <pinAvailable+0x24>
   d6f4e:	4630      	mov	r0, r6
   d6f50:	f7fd f8a9 	bl	d40a6 <__cxa_guard_acquire>
   d6f54:	b130      	cbz	r0, d6f64 <pinAvailable+0x24>
   d6f56:	4629      	mov	r1, r5
   d6f58:	4813      	ldr	r0, [pc, #76]	; (d6fa8 <pinAvailable+0x68>)
   d6f5a:	f7fe fe45 	bl	d5be8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6f5e:	4630      	mov	r0, r6
   d6f60:	f7fd f8a6 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d6f64:	4810      	ldr	r0, [pc, #64]	; (d6fa8 <pinAvailable+0x68>)
   d6f66:	f7fe fe49 	bl	d5bfc <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6f6a:	b128      	cbz	r0, d6f78 <pinAvailable+0x38>
   d6f6c:	f1a4 030b 	sub.w	r3, r4, #11
   d6f70:	2b02      	cmp	r3, #2
   d6f72:	d801      	bhi.n	d6f78 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d6f74:	2000      	movs	r0, #0
   d6f76:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6f78:	f000 f8b8 	bl	d70ec <_Z19__fetch_global_Wirev>
   d6f7c:	f7ff fb74 	bl	d6668 <_ZN7TwoWire9isEnabledEv>
   d6f80:	b108      	cbz	r0, d6f86 <pinAvailable+0x46>
   d6f82:	2c01      	cmp	r4, #1
   d6f84:	d9f6      	bls.n	d6f74 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6f86:	f7ff faaf 	bl	d64e8 <_Z22__fetch_global_Serial1v>
   d6f8a:	f7ff faa9 	bl	d64e0 <_ZN11USARTSerial9isEnabledEv>
   d6f8e:	b118      	cbz	r0, d6f98 <pinAvailable+0x58>
   d6f90:	f1a4 0309 	sub.w	r3, r4, #9
   d6f94:	2b01      	cmp	r3, #1
   d6f96:	d9ed      	bls.n	d6f74 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6f98:	2c23      	cmp	r4, #35	; 0x23
   d6f9a:	bf8c      	ite	hi
   d6f9c:	2000      	movhi	r0, #0
   d6f9e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6fa0:	bd70      	pop	{r4, r5, r6, pc}
   d6fa2:	bf00      	nop
   d6fa4:	2003e724 	.word	0x2003e724
   d6fa8:	2003e728 	.word	0x2003e728

000d6fac <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6fac:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6fae:	b538      	push	{r3, r4, r5, lr}
   d6fb0:	4604      	mov	r4, r0
   d6fb2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6fb4:	d80a      	bhi.n	d6fcc <pinMode+0x20>
   d6fb6:	29ff      	cmp	r1, #255	; 0xff
   d6fb8:	d008      	beq.n	d6fcc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6fba:	f7ff ffc1 	bl	d6f40 <pinAvailable>
   d6fbe:	b128      	cbz	r0, d6fcc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6fc0:	4629      	mov	r1, r5
   d6fc2:	4620      	mov	r0, r4
}
   d6fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6fc8:	f7fe bb44 	b.w	d5654 <HAL_Pin_Mode>
   d6fcc:	bd38      	pop	{r3, r4, r5, pc}

000d6fce <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6fce:	b538      	push	{r3, r4, r5, lr}
   d6fd0:	4604      	mov	r4, r0
   d6fd2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6fd4:	f7fe fb46 	bl	d5664 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6fd8:	28ff      	cmp	r0, #255	; 0xff
   d6fda:	d010      	beq.n	d6ffe <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6fdc:	2806      	cmp	r0, #6
   d6fde:	d804      	bhi.n	d6fea <digitalWrite+0x1c>
   d6fe0:	234d      	movs	r3, #77	; 0x4d
   d6fe2:	fa23 f000 	lsr.w	r0, r3, r0
   d6fe6:	07c3      	lsls	r3, r0, #31
   d6fe8:	d409      	bmi.n	d6ffe <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6fea:	4620      	mov	r0, r4
   d6fec:	f7ff ffa8 	bl	d6f40 <pinAvailable>
   d6ff0:	b128      	cbz	r0, d6ffe <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6ff2:	4629      	mov	r1, r5
   d6ff4:	4620      	mov	r0, r4
}
   d6ff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6ffa:	f7fe bb3b 	b.w	d5674 <HAL_GPIO_Write>
   d6ffe:	bd38      	pop	{r3, r4, r5, pc}

000d7000 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7000:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d7002:	b510      	push	{r4, lr}
   d7004:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7006:	bf9c      	itt	ls
   d7008:	340e      	addls	r4, #14
   d700a:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d700c:	4620      	mov	r0, r4
   d700e:	f7ff ff97 	bl	d6f40 <pinAvailable>
   d7012:	b150      	cbz	r0, d702a <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7014:	2103      	movs	r1, #3
   d7016:	4620      	mov	r0, r4
   d7018:	f7fe fb14 	bl	d5644 <HAL_Validate_Pin_Function>
   d701c:	2803      	cmp	r0, #3
   d701e:	d104      	bne.n	d702a <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7020:	4620      	mov	r0, r4
}
   d7022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7026:	f7fe bb4d 	b.w	d56c4 <HAL_ADC_Read>
}
   d702a:	2000      	movs	r0, #0
   d702c:	bd10      	pop	{r4, pc}
	...

000d7030 <_ZN19ApplicationWatchdog4loopEv>:
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
   d7030:	b530      	push	{r4, r5, lr}
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
   d7032:	4d1c      	ldr	r5, [pc, #112]	; (d70a4 <_ZN19ApplicationWatchdog4loopEv+0x74>)
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
   d7034:	b089      	sub	sp, #36	; 0x24
   d7036:	4604      	mov	r4, r0
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
   d7038:	6820      	ldr	r0, [r4, #0]
   d703a:	f7fe fb6b 	bl	d5714 <HAL_Delay_Milliseconds>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d703e:	f7fe fb79 	bl	d5734 <HAL_Timer_Get_Milli_Seconds>
		now = current_time();
		done = (now-last_checkin)>=timeout;
   d7042:	682b      	ldr	r3, [r5, #0]
   d7044:	6822      	ldr	r2, [r4, #0]

void ApplicationWatchdog::loop()
{
	bool done = false;
	system_tick_t now;
	while (!done) {
   d7046:	1ac0      	subs	r0, r0, r3
   d7048:	4290      	cmp	r0, r2
   d704a:	d3f5      	bcc.n	d7038 <_ZN19ApplicationWatchdog4loopEv+0x8>
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
	}

	if (timeout>0 && timeout_fn) {
   d704c:	6823      	ldr	r3, [r4, #0]
   d704e:	b333      	cbz	r3, d709e <_ZN19ApplicationWatchdog4loopEv+0x6e>
   d7050:	68e3      	ldr	r3, [r4, #12]
   d7052:	b323      	cbz	r3, d709e <_ZN19ApplicationWatchdog4loopEv+0x6e>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7054:	1d25      	adds	r5, r4, #4
   d7056:	6923      	ldr	r3, [r4, #16]
   d7058:	4628      	mov	r0, r5
   d705a:	4798      	blx	r3
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d705c:	2300      	movs	r3, #0
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d705e:	a904      	add	r1, sp, #16
   d7060:	4668      	mov	r0, sp
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7062:	9302      	str	r3, [sp, #8]
   d7064:	9306      	str	r3, [sp, #24]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7066:	f7fe fff8 	bl	d605a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d706a:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d706c:	9a06      	ldr	r2, [sp, #24]
   d706e:	9202      	str	r2, [sp, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7070:	9306      	str	r3, [sp, #24]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7072:	9a07      	ldr	r2, [sp, #28]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7074:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d7076:	9307      	str	r3, [sp, #28]
   d7078:	4629      	mov	r1, r5
   d707a:	a804      	add	r0, sp, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d707c:	9203      	str	r2, [sp, #12]
   d707e:	f7fe ffec 	bl	d605a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7082:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d7084:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7086:	60e3      	str	r3, [r4, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7088:	9b07      	ldr	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d708a:	9206      	str	r2, [sp, #24]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d708c:	a804      	add	r0, sp, #16
   d708e:	6922      	ldr	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7090:	6123      	str	r3, [r4, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7092:	9207      	str	r2, [sp, #28]
   d7094:	f7fd f83d 	bl	d4112 <_ZNSt14_Function_baseD1Ev>
   d7098:	4668      	mov	r0, sp
   d709a:	f7fd f83a 	bl	d4112 <_ZNSt14_Function_baseD1Ev>
		timeout_fn();
		timeout_fn = std::function<void(void)>();
	}
}
   d709e:	b009      	add	sp, #36	; 0x24
   d70a0:	bd30      	pop	{r4, r5, pc}
   d70a2:	bf00      	nop
   d70a4:	2003e730 	.word	0x2003e730

000d70a8 <_ZN19ApplicationWatchdog5startEPv>:
#if PLATFORM_THREADING

volatile system_tick_t ApplicationWatchdog::last_checkin;

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
   d70a8:	b508      	push	{r3, lr}
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
   d70aa:	f7ff ffc1 	bl	d7030 <_ZN19ApplicationWatchdog4loopEv>
	os_thread_cleanup(nullptr);
   d70ae:	2000      	movs	r0, #0
}
   d70b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
	os_thread_cleanup(nullptr);
   d70b4:	f7fe bb76 	b.w	d57a4 <os_thread_cleanup>

000d70b8 <_Z17acquireWireBufferv>:
   d70b8:	b570      	push	{r4, r5, r6, lr}
   d70ba:	4604      	mov	r4, r0
   d70bc:	2514      	movs	r5, #20
   d70be:	462a      	mov	r2, r5
   d70c0:	4e09      	ldr	r6, [pc, #36]	; (d70e8 <_Z17acquireWireBufferv+0x30>)
   d70c2:	2100      	movs	r1, #0
   d70c4:	f001 f82f 	bl	d8126 <memset>
   d70c8:	8025      	strh	r5, [r4, #0]
   d70ca:	2520      	movs	r5, #32
   d70cc:	4631      	mov	r1, r6
   d70ce:	60a5      	str	r5, [r4, #8]
   d70d0:	6125      	str	r5, [r4, #16]
   d70d2:	4628      	mov	r0, r5
   d70d4:	f000 f840 	bl	d7158 <_ZnajRKSt9nothrow_t>
   d70d8:	4631      	mov	r1, r6
   d70da:	6060      	str	r0, [r4, #4]
   d70dc:	4628      	mov	r0, r5
   d70de:	f000 f83b 	bl	d7158 <_ZnajRKSt9nothrow_t>
   d70e2:	60e0      	str	r0, [r4, #12]
   d70e4:	4620      	mov	r0, r4
   d70e6:	bd70      	pop	{r4, r5, r6, pc}
   d70e8:	000d8504 	.word	0x000d8504

000d70ec <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d70ec:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d70ee:	4d0e      	ldr	r5, [pc, #56]	; (d7128 <_Z19__fetch_global_Wirev+0x3c>)
   d70f0:	6829      	ldr	r1, [r5, #0]
   d70f2:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d70f6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d70f8:	d113      	bne.n	d7122 <_Z19__fetch_global_Wirev+0x36>
   d70fa:	4628      	mov	r0, r5
   d70fc:	f7fc ffd3 	bl	d40a6 <__cxa_guard_acquire>
   d7100:	b178      	cbz	r0, d7122 <_Z19__fetch_global_Wirev+0x36>
   d7102:	a801      	add	r0, sp, #4
   d7104:	f7ff ffd8 	bl	d70b8 <_Z17acquireWireBufferv>
   d7108:	aa01      	add	r2, sp, #4
   d710a:	4621      	mov	r1, r4
   d710c:	4807      	ldr	r0, [pc, #28]	; (d712c <_Z19__fetch_global_Wirev+0x40>)
   d710e:	f7ff fa57 	bl	d65c0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d7112:	4628      	mov	r0, r5
   d7114:	f7fc ffcc 	bl	d40b0 <__cxa_guard_release>
   d7118:	4a05      	ldr	r2, [pc, #20]	; (d7130 <_Z19__fetch_global_Wirev+0x44>)
   d711a:	4906      	ldr	r1, [pc, #24]	; (d7134 <_Z19__fetch_global_Wirev+0x48>)
   d711c:	4803      	ldr	r0, [pc, #12]	; (d712c <_Z19__fetch_global_Wirev+0x40>)
   d711e:	f000 f80b 	bl	d7138 <__aeabi_atexit>
	return wire;
}
   d7122:	4802      	ldr	r0, [pc, #8]	; (d712c <_Z19__fetch_global_Wirev+0x40>)
   d7124:	b007      	add	sp, #28
   d7126:	bd30      	pop	{r4, r5, pc}
   d7128:	2003e734 	.word	0x2003e734
   d712c:	2003e738 	.word	0x2003e738
   d7130:	2003e408 	.word	0x2003e408
   d7134:	000d6569 	.word	0x000d6569

000d7138 <__aeabi_atexit>:
   d7138:	460b      	mov	r3, r1
   d713a:	4601      	mov	r1, r0
   d713c:	4618      	mov	r0, r3
   d713e:	f000 bfd9 	b.w	d80f4 <__cxa_atexit>
	...

000d7144 <_ZSt15get_new_handlerv>:
   d7144:	4b02      	ldr	r3, [pc, #8]	; (d7150 <_ZSt15get_new_handlerv+0xc>)
   d7146:	6818      	ldr	r0, [r3, #0]
   d7148:	f3bf 8f5f 	dmb	sy
   d714c:	4770      	bx	lr
   d714e:	bf00      	nop
   d7150:	2003e74c 	.word	0x2003e74c

000d7154 <_ZdlPvj>:
   d7154:	f7fc bfa3 	b.w	d409e <_ZdlPv>

000d7158 <_ZnajRKSt9nothrow_t>:
   d7158:	f000 b800 	b.w	d715c <_ZnwjRKSt9nothrow_t>

000d715c <_ZnwjRKSt9nothrow_t>:
   d715c:	b510      	push	{r4, lr}
   d715e:	2800      	cmp	r0, #0
   d7160:	bf14      	ite	ne
   d7162:	4604      	movne	r4, r0
   d7164:	2401      	moveq	r4, #1
   d7166:	4620      	mov	r0, r4
   d7168:	f7fe fcd8 	bl	d5b1c <malloc>
   d716c:	b920      	cbnz	r0, d7178 <_ZnwjRKSt9nothrow_t+0x1c>
   d716e:	f7ff ffe9 	bl	d7144 <_ZSt15get_new_handlerv>
   d7172:	b108      	cbz	r0, d7178 <_ZnwjRKSt9nothrow_t+0x1c>
   d7174:	4780      	blx	r0
   d7176:	e7f6      	b.n	d7166 <_ZnwjRKSt9nothrow_t+0xa>
   d7178:	bd10      	pop	{r4, pc}

000d717a <_ZSt25__throw_bad_function_callv>:
   d717a:	b508      	push	{r3, lr}
   d717c:	f7fe fce6 	bl	d5b4c <abort>

000d7180 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7180:	4b18      	ldr	r3, [pc, #96]	; (d71e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7182:	681a      	ldr	r2, [r3, #0]
   d7184:	07d1      	lsls	r1, r2, #31
   d7186:	bf5c      	itt	pl
   d7188:	2201      	movpl	r2, #1
   d718a:	601a      	strpl	r2, [r3, #0]
   d718c:	4b16      	ldr	r3, [pc, #88]	; (d71e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d718e:	681a      	ldr	r2, [r3, #0]
   d7190:	07d2      	lsls	r2, r2, #31
   d7192:	bf5c      	itt	pl
   d7194:	2201      	movpl	r2, #1
   d7196:	601a      	strpl	r2, [r3, #0]
   d7198:	4b14      	ldr	r3, [pc, #80]	; (d71ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d719a:	681a      	ldr	r2, [r3, #0]
   d719c:	07d0      	lsls	r0, r2, #31
   d719e:	bf5c      	itt	pl
   d71a0:	2201      	movpl	r2, #1
   d71a2:	601a      	strpl	r2, [r3, #0]
   d71a4:	4b12      	ldr	r3, [pc, #72]	; (d71f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d71a6:	681a      	ldr	r2, [r3, #0]
   d71a8:	07d1      	lsls	r1, r2, #31
   d71aa:	bf5c      	itt	pl
   d71ac:	2201      	movpl	r2, #1
   d71ae:	601a      	strpl	r2, [r3, #0]
   d71b0:	4b10      	ldr	r3, [pc, #64]	; (d71f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d71b2:	681a      	ldr	r2, [r3, #0]
   d71b4:	07d2      	lsls	r2, r2, #31
   d71b6:	bf5c      	itt	pl
   d71b8:	2201      	movpl	r2, #1
   d71ba:	601a      	strpl	r2, [r3, #0]
   d71bc:	4b0e      	ldr	r3, [pc, #56]	; (d71f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d71be:	681a      	ldr	r2, [r3, #0]
   d71c0:	07d0      	lsls	r0, r2, #31
   d71c2:	bf5c      	itt	pl
   d71c4:	2201      	movpl	r2, #1
   d71c6:	601a      	strpl	r2, [r3, #0]
   d71c8:	4b0c      	ldr	r3, [pc, #48]	; (d71fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d71ca:	681a      	ldr	r2, [r3, #0]
   d71cc:	07d1      	lsls	r1, r2, #31
   d71ce:	bf5c      	itt	pl
   d71d0:	2201      	movpl	r2, #1
   d71d2:	601a      	strpl	r2, [r3, #0]
   d71d4:	4b0a      	ldr	r3, [pc, #40]	; (d7200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d71d6:	681a      	ldr	r2, [r3, #0]
   d71d8:	07d2      	lsls	r2, r2, #31
   d71da:	bf5c      	itt	pl
   d71dc:	2201      	movpl	r2, #1
   d71de:	601a      	strpl	r2, [r3, #0]
   d71e0:	4770      	bx	lr
   d71e2:	bf00      	nop
   d71e4:	2003e76c 	.word	0x2003e76c
   d71e8:	2003e768 	.word	0x2003e768
   d71ec:	2003e764 	.word	0x2003e764
   d71f0:	2003e760 	.word	0x2003e760
   d71f4:	2003e75c 	.word	0x2003e75c
   d71f8:	2003e758 	.word	0x2003e758
   d71fc:	2003e754 	.word	0x2003e754
   d7200:	2003e750 	.word	0x2003e750

000d7204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7204:	4b24      	ldr	r3, [pc, #144]	; (d7298 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7206:	681a      	ldr	r2, [r3, #0]
   d7208:	07d0      	lsls	r0, r2, #31
   d720a:	bf5c      	itt	pl
   d720c:	2201      	movpl	r2, #1
   d720e:	601a      	strpl	r2, [r3, #0]
   d7210:	4b22      	ldr	r3, [pc, #136]	; (d729c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7212:	681a      	ldr	r2, [r3, #0]
   d7214:	07d1      	lsls	r1, r2, #31
   d7216:	bf5c      	itt	pl
   d7218:	2201      	movpl	r2, #1
   d721a:	601a      	strpl	r2, [r3, #0]
   d721c:	4b20      	ldr	r3, [pc, #128]	; (d72a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d721e:	681a      	ldr	r2, [r3, #0]
   d7220:	07d2      	lsls	r2, r2, #31
   d7222:	bf5c      	itt	pl
   d7224:	2201      	movpl	r2, #1
   d7226:	601a      	strpl	r2, [r3, #0]
   d7228:	4b1e      	ldr	r3, [pc, #120]	; (d72a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d722a:	681a      	ldr	r2, [r3, #0]
   d722c:	07d0      	lsls	r0, r2, #31
   d722e:	bf5c      	itt	pl
   d7230:	2201      	movpl	r2, #1
   d7232:	601a      	strpl	r2, [r3, #0]
   d7234:	4b1c      	ldr	r3, [pc, #112]	; (d72a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7236:	681a      	ldr	r2, [r3, #0]
   d7238:	07d1      	lsls	r1, r2, #31
   d723a:	bf5c      	itt	pl
   d723c:	2201      	movpl	r2, #1
   d723e:	601a      	strpl	r2, [r3, #0]
   d7240:	4b1a      	ldr	r3, [pc, #104]	; (d72ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7242:	681a      	ldr	r2, [r3, #0]
   d7244:	07d2      	lsls	r2, r2, #31
   d7246:	bf5c      	itt	pl
   d7248:	2201      	movpl	r2, #1
   d724a:	601a      	strpl	r2, [r3, #0]
   d724c:	4b18      	ldr	r3, [pc, #96]	; (d72b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d724e:	681a      	ldr	r2, [r3, #0]
   d7250:	07d0      	lsls	r0, r2, #31
   d7252:	bf5c      	itt	pl
   d7254:	2201      	movpl	r2, #1
   d7256:	601a      	strpl	r2, [r3, #0]
   d7258:	4b16      	ldr	r3, [pc, #88]	; (d72b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d725a:	681a      	ldr	r2, [r3, #0]
   d725c:	07d1      	lsls	r1, r2, #31
   d725e:	bf5c      	itt	pl
   d7260:	2201      	movpl	r2, #1
   d7262:	601a      	strpl	r2, [r3, #0]
   d7264:	4b14      	ldr	r3, [pc, #80]	; (d72b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7266:	681a      	ldr	r2, [r3, #0]
   d7268:	07d2      	lsls	r2, r2, #31
   d726a:	bf5c      	itt	pl
   d726c:	2201      	movpl	r2, #1
   d726e:	601a      	strpl	r2, [r3, #0]
   d7270:	4b12      	ldr	r3, [pc, #72]	; (d72bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7272:	681a      	ldr	r2, [r3, #0]
   d7274:	07d0      	lsls	r0, r2, #31
   d7276:	bf5c      	itt	pl
   d7278:	2201      	movpl	r2, #1
   d727a:	601a      	strpl	r2, [r3, #0]
   d727c:	4b10      	ldr	r3, [pc, #64]	; (d72c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d727e:	681a      	ldr	r2, [r3, #0]
   d7280:	07d1      	lsls	r1, r2, #31
   d7282:	bf5c      	itt	pl
   d7284:	2201      	movpl	r2, #1
   d7286:	601a      	strpl	r2, [r3, #0]
   d7288:	4b0e      	ldr	r3, [pc, #56]	; (d72c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d728a:	681a      	ldr	r2, [r3, #0]
   d728c:	07d2      	lsls	r2, r2, #31
   d728e:	bf5c      	itt	pl
   d7290:	2201      	movpl	r2, #1
   d7292:	601a      	strpl	r2, [r3, #0]
   d7294:	4770      	bx	lr
   d7296:	bf00      	nop
   d7298:	2003e79c 	.word	0x2003e79c
   d729c:	2003e798 	.word	0x2003e798
   d72a0:	2003e794 	.word	0x2003e794
   d72a4:	2003e790 	.word	0x2003e790
   d72a8:	2003e78c 	.word	0x2003e78c
   d72ac:	2003e788 	.word	0x2003e788
   d72b0:	2003e784 	.word	0x2003e784
   d72b4:	2003e780 	.word	0x2003e780
   d72b8:	2003e77c 	.word	0x2003e77c
   d72bc:	2003e778 	.word	0x2003e778
   d72c0:	2003e774 	.word	0x2003e774
   d72c4:	2003e770 	.word	0x2003e770

000d72c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d72c8:	4b24      	ldr	r3, [pc, #144]	; (d735c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d72ca:	681a      	ldr	r2, [r3, #0]
   d72cc:	07d0      	lsls	r0, r2, #31
   d72ce:	bf5c      	itt	pl
   d72d0:	2201      	movpl	r2, #1
   d72d2:	601a      	strpl	r2, [r3, #0]
   d72d4:	4b22      	ldr	r3, [pc, #136]	; (d7360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d72d6:	681a      	ldr	r2, [r3, #0]
   d72d8:	07d1      	lsls	r1, r2, #31
   d72da:	bf5c      	itt	pl
   d72dc:	2201      	movpl	r2, #1
   d72de:	601a      	strpl	r2, [r3, #0]
   d72e0:	4b20      	ldr	r3, [pc, #128]	; (d7364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d72e2:	681a      	ldr	r2, [r3, #0]
   d72e4:	07d2      	lsls	r2, r2, #31
   d72e6:	bf5c      	itt	pl
   d72e8:	2201      	movpl	r2, #1
   d72ea:	601a      	strpl	r2, [r3, #0]
   d72ec:	4b1e      	ldr	r3, [pc, #120]	; (d7368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d72ee:	681a      	ldr	r2, [r3, #0]
   d72f0:	07d0      	lsls	r0, r2, #31
   d72f2:	bf5c      	itt	pl
   d72f4:	2201      	movpl	r2, #1
   d72f6:	601a      	strpl	r2, [r3, #0]
   d72f8:	4b1c      	ldr	r3, [pc, #112]	; (d736c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d72fa:	681a      	ldr	r2, [r3, #0]
   d72fc:	07d1      	lsls	r1, r2, #31
   d72fe:	bf5c      	itt	pl
   d7300:	2201      	movpl	r2, #1
   d7302:	601a      	strpl	r2, [r3, #0]
   d7304:	4b1a      	ldr	r3, [pc, #104]	; (d7370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7306:	681a      	ldr	r2, [r3, #0]
   d7308:	07d2      	lsls	r2, r2, #31
   d730a:	bf5c      	itt	pl
   d730c:	2201      	movpl	r2, #1
   d730e:	601a      	strpl	r2, [r3, #0]
   d7310:	4b18      	ldr	r3, [pc, #96]	; (d7374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7312:	681a      	ldr	r2, [r3, #0]
   d7314:	07d0      	lsls	r0, r2, #31
   d7316:	bf5c      	itt	pl
   d7318:	2201      	movpl	r2, #1
   d731a:	601a      	strpl	r2, [r3, #0]
   d731c:	4b16      	ldr	r3, [pc, #88]	; (d7378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d731e:	681a      	ldr	r2, [r3, #0]
   d7320:	07d1      	lsls	r1, r2, #31
   d7322:	bf5c      	itt	pl
   d7324:	2201      	movpl	r2, #1
   d7326:	601a      	strpl	r2, [r3, #0]
   d7328:	4b14      	ldr	r3, [pc, #80]	; (d737c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d732a:	681a      	ldr	r2, [r3, #0]
   d732c:	07d2      	lsls	r2, r2, #31
   d732e:	bf5c      	itt	pl
   d7330:	2201      	movpl	r2, #1
   d7332:	601a      	strpl	r2, [r3, #0]
   d7334:	4b12      	ldr	r3, [pc, #72]	; (d7380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7336:	681a      	ldr	r2, [r3, #0]
   d7338:	07d0      	lsls	r0, r2, #31
   d733a:	bf5c      	itt	pl
   d733c:	2201      	movpl	r2, #1
   d733e:	601a      	strpl	r2, [r3, #0]
   d7340:	4b10      	ldr	r3, [pc, #64]	; (d7384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7342:	681a      	ldr	r2, [r3, #0]
   d7344:	07d1      	lsls	r1, r2, #31
   d7346:	bf5c      	itt	pl
   d7348:	2201      	movpl	r2, #1
   d734a:	601a      	strpl	r2, [r3, #0]
   d734c:	4b0e      	ldr	r3, [pc, #56]	; (d7388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d734e:	681a      	ldr	r2, [r3, #0]
   d7350:	07d2      	lsls	r2, r2, #31
   d7352:	bf5c      	itt	pl
   d7354:	2201      	movpl	r2, #1
   d7356:	601a      	strpl	r2, [r3, #0]
   d7358:	4770      	bx	lr
   d735a:	bf00      	nop
   d735c:	2003e7cc 	.word	0x2003e7cc
   d7360:	2003e7c8 	.word	0x2003e7c8
   d7364:	2003e7c4 	.word	0x2003e7c4
   d7368:	2003e7c0 	.word	0x2003e7c0
   d736c:	2003e7bc 	.word	0x2003e7bc
   d7370:	2003e7b8 	.word	0x2003e7b8
   d7374:	2003e7b4 	.word	0x2003e7b4
   d7378:	2003e7b0 	.word	0x2003e7b0
   d737c:	2003e7ac 	.word	0x2003e7ac
   d7380:	2003e7a8 	.word	0x2003e7a8
   d7384:	2003e7a4 	.word	0x2003e7a4
   d7388:	2003e7a0 	.word	0x2003e7a0

000d738c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d738c:	4b18      	ldr	r3, [pc, #96]	; (d73f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d738e:	681a      	ldr	r2, [r3, #0]
   d7390:	07d1      	lsls	r1, r2, #31
   d7392:	bf5c      	itt	pl
   d7394:	2201      	movpl	r2, #1
   d7396:	601a      	strpl	r2, [r3, #0]
   d7398:	4b16      	ldr	r3, [pc, #88]	; (d73f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d739a:	681a      	ldr	r2, [r3, #0]
   d739c:	07d2      	lsls	r2, r2, #31
   d739e:	bf5c      	itt	pl
   d73a0:	2201      	movpl	r2, #1
   d73a2:	601a      	strpl	r2, [r3, #0]
   d73a4:	4b14      	ldr	r3, [pc, #80]	; (d73f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d73a6:	681a      	ldr	r2, [r3, #0]
   d73a8:	07d0      	lsls	r0, r2, #31
   d73aa:	bf5c      	itt	pl
   d73ac:	2201      	movpl	r2, #1
   d73ae:	601a      	strpl	r2, [r3, #0]
   d73b0:	4b12      	ldr	r3, [pc, #72]	; (d73fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d73b2:	681a      	ldr	r2, [r3, #0]
   d73b4:	07d1      	lsls	r1, r2, #31
   d73b6:	bf5c      	itt	pl
   d73b8:	2201      	movpl	r2, #1
   d73ba:	601a      	strpl	r2, [r3, #0]
   d73bc:	4b10      	ldr	r3, [pc, #64]	; (d7400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d73be:	681a      	ldr	r2, [r3, #0]
   d73c0:	07d2      	lsls	r2, r2, #31
   d73c2:	bf5c      	itt	pl
   d73c4:	2201      	movpl	r2, #1
   d73c6:	601a      	strpl	r2, [r3, #0]
   d73c8:	4b0e      	ldr	r3, [pc, #56]	; (d7404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d73ca:	681a      	ldr	r2, [r3, #0]
   d73cc:	07d0      	lsls	r0, r2, #31
   d73ce:	bf5c      	itt	pl
   d73d0:	2201      	movpl	r2, #1
   d73d2:	601a      	strpl	r2, [r3, #0]
   d73d4:	4b0c      	ldr	r3, [pc, #48]	; (d7408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d73d6:	681a      	ldr	r2, [r3, #0]
   d73d8:	07d1      	lsls	r1, r2, #31
   d73da:	bf5c      	itt	pl
   d73dc:	2201      	movpl	r2, #1
   d73de:	601a      	strpl	r2, [r3, #0]
   d73e0:	4b0a      	ldr	r3, [pc, #40]	; (d740c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d73e2:	681a      	ldr	r2, [r3, #0]
   d73e4:	07d2      	lsls	r2, r2, #31
   d73e6:	bf5c      	itt	pl
   d73e8:	2201      	movpl	r2, #1
   d73ea:	601a      	strpl	r2, [r3, #0]
   d73ec:	4770      	bx	lr
   d73ee:	bf00      	nop
   d73f0:	2003e7ec 	.word	0x2003e7ec
   d73f4:	2003e7e8 	.word	0x2003e7e8
   d73f8:	2003e7e4 	.word	0x2003e7e4
   d73fc:	2003e7e0 	.word	0x2003e7e0
   d7400:	2003e7dc 	.word	0x2003e7dc
   d7404:	2003e7d8 	.word	0x2003e7d8
   d7408:	2003e7d4 	.word	0x2003e7d4
   d740c:	2003e7d0 	.word	0x2003e7d0

000d7410 <__aeabi_drsub>:
   d7410:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7414:	e002      	b.n	d741c <__adddf3>
   d7416:	bf00      	nop

000d7418 <__aeabi_dsub>:
   d7418:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d741c <__adddf3>:
   d741c:	b530      	push	{r4, r5, lr}
   d741e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7422:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7426:	ea94 0f05 	teq	r4, r5
   d742a:	bf08      	it	eq
   d742c:	ea90 0f02 	teqeq	r0, r2
   d7430:	bf1f      	itttt	ne
   d7432:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7436:	ea55 0c02 	orrsne.w	ip, r5, r2
   d743a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d743e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7442:	f000 80e2 	beq.w	d760a <__adddf3+0x1ee>
   d7446:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d744a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d744e:	bfb8      	it	lt
   d7450:	426d      	neglt	r5, r5
   d7452:	dd0c      	ble.n	d746e <__adddf3+0x52>
   d7454:	442c      	add	r4, r5
   d7456:	ea80 0202 	eor.w	r2, r0, r2
   d745a:	ea81 0303 	eor.w	r3, r1, r3
   d745e:	ea82 0000 	eor.w	r0, r2, r0
   d7462:	ea83 0101 	eor.w	r1, r3, r1
   d7466:	ea80 0202 	eor.w	r2, r0, r2
   d746a:	ea81 0303 	eor.w	r3, r1, r3
   d746e:	2d36      	cmp	r5, #54	; 0x36
   d7470:	bf88      	it	hi
   d7472:	bd30      	pophi	{r4, r5, pc}
   d7474:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7478:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d747c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7480:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7484:	d002      	beq.n	d748c <__adddf3+0x70>
   d7486:	4240      	negs	r0, r0
   d7488:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d748c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7490:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7494:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7498:	d002      	beq.n	d74a0 <__adddf3+0x84>
   d749a:	4252      	negs	r2, r2
   d749c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d74a0:	ea94 0f05 	teq	r4, r5
   d74a4:	f000 80a7 	beq.w	d75f6 <__adddf3+0x1da>
   d74a8:	f1a4 0401 	sub.w	r4, r4, #1
   d74ac:	f1d5 0e20 	rsbs	lr, r5, #32
   d74b0:	db0d      	blt.n	d74ce <__adddf3+0xb2>
   d74b2:	fa02 fc0e 	lsl.w	ip, r2, lr
   d74b6:	fa22 f205 	lsr.w	r2, r2, r5
   d74ba:	1880      	adds	r0, r0, r2
   d74bc:	f141 0100 	adc.w	r1, r1, #0
   d74c0:	fa03 f20e 	lsl.w	r2, r3, lr
   d74c4:	1880      	adds	r0, r0, r2
   d74c6:	fa43 f305 	asr.w	r3, r3, r5
   d74ca:	4159      	adcs	r1, r3
   d74cc:	e00e      	b.n	d74ec <__adddf3+0xd0>
   d74ce:	f1a5 0520 	sub.w	r5, r5, #32
   d74d2:	f10e 0e20 	add.w	lr, lr, #32
   d74d6:	2a01      	cmp	r2, #1
   d74d8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d74dc:	bf28      	it	cs
   d74de:	f04c 0c02 	orrcs.w	ip, ip, #2
   d74e2:	fa43 f305 	asr.w	r3, r3, r5
   d74e6:	18c0      	adds	r0, r0, r3
   d74e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d74ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d74f0:	d507      	bpl.n	d7502 <__adddf3+0xe6>
   d74f2:	f04f 0e00 	mov.w	lr, #0
   d74f6:	f1dc 0c00 	rsbs	ip, ip, #0
   d74fa:	eb7e 0000 	sbcs.w	r0, lr, r0
   d74fe:	eb6e 0101 	sbc.w	r1, lr, r1
   d7502:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7506:	d31b      	bcc.n	d7540 <__adddf3+0x124>
   d7508:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d750c:	d30c      	bcc.n	d7528 <__adddf3+0x10c>
   d750e:	0849      	lsrs	r1, r1, #1
   d7510:	ea5f 0030 	movs.w	r0, r0, rrx
   d7514:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7518:	f104 0401 	add.w	r4, r4, #1
   d751c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7520:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7524:	f080 809a 	bcs.w	d765c <__adddf3+0x240>
   d7528:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d752c:	bf08      	it	eq
   d752e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7532:	f150 0000 	adcs.w	r0, r0, #0
   d7536:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d753a:	ea41 0105 	orr.w	r1, r1, r5
   d753e:	bd30      	pop	{r4, r5, pc}
   d7540:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7544:	4140      	adcs	r0, r0
   d7546:	eb41 0101 	adc.w	r1, r1, r1
   d754a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d754e:	f1a4 0401 	sub.w	r4, r4, #1
   d7552:	d1e9      	bne.n	d7528 <__adddf3+0x10c>
   d7554:	f091 0f00 	teq	r1, #0
   d7558:	bf04      	itt	eq
   d755a:	4601      	moveq	r1, r0
   d755c:	2000      	moveq	r0, #0
   d755e:	fab1 f381 	clz	r3, r1
   d7562:	bf08      	it	eq
   d7564:	3320      	addeq	r3, #32
   d7566:	f1a3 030b 	sub.w	r3, r3, #11
   d756a:	f1b3 0220 	subs.w	r2, r3, #32
   d756e:	da0c      	bge.n	d758a <__adddf3+0x16e>
   d7570:	320c      	adds	r2, #12
   d7572:	dd08      	ble.n	d7586 <__adddf3+0x16a>
   d7574:	f102 0c14 	add.w	ip, r2, #20
   d7578:	f1c2 020c 	rsb	r2, r2, #12
   d757c:	fa01 f00c 	lsl.w	r0, r1, ip
   d7580:	fa21 f102 	lsr.w	r1, r1, r2
   d7584:	e00c      	b.n	d75a0 <__adddf3+0x184>
   d7586:	f102 0214 	add.w	r2, r2, #20
   d758a:	bfd8      	it	le
   d758c:	f1c2 0c20 	rsble	ip, r2, #32
   d7590:	fa01 f102 	lsl.w	r1, r1, r2
   d7594:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7598:	bfdc      	itt	le
   d759a:	ea41 010c 	orrle.w	r1, r1, ip
   d759e:	4090      	lslle	r0, r2
   d75a0:	1ae4      	subs	r4, r4, r3
   d75a2:	bfa2      	ittt	ge
   d75a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d75a8:	4329      	orrge	r1, r5
   d75aa:	bd30      	popge	{r4, r5, pc}
   d75ac:	ea6f 0404 	mvn.w	r4, r4
   d75b0:	3c1f      	subs	r4, #31
   d75b2:	da1c      	bge.n	d75ee <__adddf3+0x1d2>
   d75b4:	340c      	adds	r4, #12
   d75b6:	dc0e      	bgt.n	d75d6 <__adddf3+0x1ba>
   d75b8:	f104 0414 	add.w	r4, r4, #20
   d75bc:	f1c4 0220 	rsb	r2, r4, #32
   d75c0:	fa20 f004 	lsr.w	r0, r0, r4
   d75c4:	fa01 f302 	lsl.w	r3, r1, r2
   d75c8:	ea40 0003 	orr.w	r0, r0, r3
   d75cc:	fa21 f304 	lsr.w	r3, r1, r4
   d75d0:	ea45 0103 	orr.w	r1, r5, r3
   d75d4:	bd30      	pop	{r4, r5, pc}
   d75d6:	f1c4 040c 	rsb	r4, r4, #12
   d75da:	f1c4 0220 	rsb	r2, r4, #32
   d75de:	fa20 f002 	lsr.w	r0, r0, r2
   d75e2:	fa01 f304 	lsl.w	r3, r1, r4
   d75e6:	ea40 0003 	orr.w	r0, r0, r3
   d75ea:	4629      	mov	r1, r5
   d75ec:	bd30      	pop	{r4, r5, pc}
   d75ee:	fa21 f004 	lsr.w	r0, r1, r4
   d75f2:	4629      	mov	r1, r5
   d75f4:	bd30      	pop	{r4, r5, pc}
   d75f6:	f094 0f00 	teq	r4, #0
   d75fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d75fe:	bf06      	itte	eq
   d7600:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7604:	3401      	addeq	r4, #1
   d7606:	3d01      	subne	r5, #1
   d7608:	e74e      	b.n	d74a8 <__adddf3+0x8c>
   d760a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d760e:	bf18      	it	ne
   d7610:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7614:	d029      	beq.n	d766a <__adddf3+0x24e>
   d7616:	ea94 0f05 	teq	r4, r5
   d761a:	bf08      	it	eq
   d761c:	ea90 0f02 	teqeq	r0, r2
   d7620:	d005      	beq.n	d762e <__adddf3+0x212>
   d7622:	ea54 0c00 	orrs.w	ip, r4, r0
   d7626:	bf04      	itt	eq
   d7628:	4619      	moveq	r1, r3
   d762a:	4610      	moveq	r0, r2
   d762c:	bd30      	pop	{r4, r5, pc}
   d762e:	ea91 0f03 	teq	r1, r3
   d7632:	bf1e      	ittt	ne
   d7634:	2100      	movne	r1, #0
   d7636:	2000      	movne	r0, #0
   d7638:	bd30      	popne	{r4, r5, pc}
   d763a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d763e:	d105      	bne.n	d764c <__adddf3+0x230>
   d7640:	0040      	lsls	r0, r0, #1
   d7642:	4149      	adcs	r1, r1
   d7644:	bf28      	it	cs
   d7646:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d764a:	bd30      	pop	{r4, r5, pc}
   d764c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7650:	bf3c      	itt	cc
   d7652:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7656:	bd30      	popcc	{r4, r5, pc}
   d7658:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d765c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7660:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7664:	f04f 0000 	mov.w	r0, #0
   d7668:	bd30      	pop	{r4, r5, pc}
   d766a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d766e:	bf1a      	itte	ne
   d7670:	4619      	movne	r1, r3
   d7672:	4610      	movne	r0, r2
   d7674:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7678:	bf1c      	itt	ne
   d767a:	460b      	movne	r3, r1
   d767c:	4602      	movne	r2, r0
   d767e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7682:	bf06      	itte	eq
   d7684:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7688:	ea91 0f03 	teqeq	r1, r3
   d768c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7690:	bd30      	pop	{r4, r5, pc}
   d7692:	bf00      	nop

000d7694 <__aeabi_ui2d>:
   d7694:	f090 0f00 	teq	r0, #0
   d7698:	bf04      	itt	eq
   d769a:	2100      	moveq	r1, #0
   d769c:	4770      	bxeq	lr
   d769e:	b530      	push	{r4, r5, lr}
   d76a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d76a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d76a8:	f04f 0500 	mov.w	r5, #0
   d76ac:	f04f 0100 	mov.w	r1, #0
   d76b0:	e750      	b.n	d7554 <__adddf3+0x138>
   d76b2:	bf00      	nop

000d76b4 <__aeabi_i2d>:
   d76b4:	f090 0f00 	teq	r0, #0
   d76b8:	bf04      	itt	eq
   d76ba:	2100      	moveq	r1, #0
   d76bc:	4770      	bxeq	lr
   d76be:	b530      	push	{r4, r5, lr}
   d76c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d76c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d76c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d76cc:	bf48      	it	mi
   d76ce:	4240      	negmi	r0, r0
   d76d0:	f04f 0100 	mov.w	r1, #0
   d76d4:	e73e      	b.n	d7554 <__adddf3+0x138>
   d76d6:	bf00      	nop

000d76d8 <__aeabi_f2d>:
   d76d8:	0042      	lsls	r2, r0, #1
   d76da:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d76de:	ea4f 0131 	mov.w	r1, r1, rrx
   d76e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d76e6:	bf1f      	itttt	ne
   d76e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d76ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d76f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d76f4:	4770      	bxne	lr
   d76f6:	f092 0f00 	teq	r2, #0
   d76fa:	bf14      	ite	ne
   d76fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7700:	4770      	bxeq	lr
   d7702:	b530      	push	{r4, r5, lr}
   d7704:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7708:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d770c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7710:	e720      	b.n	d7554 <__adddf3+0x138>
   d7712:	bf00      	nop

000d7714 <__aeabi_ul2d>:
   d7714:	ea50 0201 	orrs.w	r2, r0, r1
   d7718:	bf08      	it	eq
   d771a:	4770      	bxeq	lr
   d771c:	b530      	push	{r4, r5, lr}
   d771e:	f04f 0500 	mov.w	r5, #0
   d7722:	e00a      	b.n	d773a <__aeabi_l2d+0x16>

000d7724 <__aeabi_l2d>:
   d7724:	ea50 0201 	orrs.w	r2, r0, r1
   d7728:	bf08      	it	eq
   d772a:	4770      	bxeq	lr
   d772c:	b530      	push	{r4, r5, lr}
   d772e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7732:	d502      	bpl.n	d773a <__aeabi_l2d+0x16>
   d7734:	4240      	negs	r0, r0
   d7736:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d773a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d773e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7742:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7746:	f43f aedc 	beq.w	d7502 <__adddf3+0xe6>
   d774a:	f04f 0203 	mov.w	r2, #3
   d774e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7752:	bf18      	it	ne
   d7754:	3203      	addne	r2, #3
   d7756:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d775a:	bf18      	it	ne
   d775c:	3203      	addne	r2, #3
   d775e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7762:	f1c2 0320 	rsb	r3, r2, #32
   d7766:	fa00 fc03 	lsl.w	ip, r0, r3
   d776a:	fa20 f002 	lsr.w	r0, r0, r2
   d776e:	fa01 fe03 	lsl.w	lr, r1, r3
   d7772:	ea40 000e 	orr.w	r0, r0, lr
   d7776:	fa21 f102 	lsr.w	r1, r1, r2
   d777a:	4414      	add	r4, r2
   d777c:	e6c1      	b.n	d7502 <__adddf3+0xe6>
   d777e:	bf00      	nop

000d7780 <__aeabi_dmul>:
   d7780:	b570      	push	{r4, r5, r6, lr}
   d7782:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7786:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d778a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d778e:	bf1d      	ittte	ne
   d7790:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7794:	ea94 0f0c 	teqne	r4, ip
   d7798:	ea95 0f0c 	teqne	r5, ip
   d779c:	f000 f8de 	bleq	d795c <__aeabi_dmul+0x1dc>
   d77a0:	442c      	add	r4, r5
   d77a2:	ea81 0603 	eor.w	r6, r1, r3
   d77a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d77aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d77ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d77b2:	bf18      	it	ne
   d77b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d77b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d77bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d77c0:	d038      	beq.n	d7834 <__aeabi_dmul+0xb4>
   d77c2:	fba0 ce02 	umull	ip, lr, r0, r2
   d77c6:	f04f 0500 	mov.w	r5, #0
   d77ca:	fbe1 e502 	umlal	lr, r5, r1, r2
   d77ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d77d2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d77d6:	f04f 0600 	mov.w	r6, #0
   d77da:	fbe1 5603 	umlal	r5, r6, r1, r3
   d77de:	f09c 0f00 	teq	ip, #0
   d77e2:	bf18      	it	ne
   d77e4:	f04e 0e01 	orrne.w	lr, lr, #1
   d77e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d77ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d77f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d77f4:	d204      	bcs.n	d7800 <__aeabi_dmul+0x80>
   d77f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d77fa:	416d      	adcs	r5, r5
   d77fc:	eb46 0606 	adc.w	r6, r6, r6
   d7800:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7804:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7808:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d780c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7810:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7814:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7818:	bf88      	it	hi
   d781a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d781e:	d81e      	bhi.n	d785e <__aeabi_dmul+0xde>
   d7820:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7824:	bf08      	it	eq
   d7826:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d782a:	f150 0000 	adcs.w	r0, r0, #0
   d782e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7832:	bd70      	pop	{r4, r5, r6, pc}
   d7834:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7838:	ea46 0101 	orr.w	r1, r6, r1
   d783c:	ea40 0002 	orr.w	r0, r0, r2
   d7840:	ea81 0103 	eor.w	r1, r1, r3
   d7844:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7848:	bfc2      	ittt	gt
   d784a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d784e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7852:	bd70      	popgt	{r4, r5, r6, pc}
   d7854:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7858:	f04f 0e00 	mov.w	lr, #0
   d785c:	3c01      	subs	r4, #1
   d785e:	f300 80ab 	bgt.w	d79b8 <__aeabi_dmul+0x238>
   d7862:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7866:	bfde      	ittt	le
   d7868:	2000      	movle	r0, #0
   d786a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d786e:	bd70      	pople	{r4, r5, r6, pc}
   d7870:	f1c4 0400 	rsb	r4, r4, #0
   d7874:	3c20      	subs	r4, #32
   d7876:	da35      	bge.n	d78e4 <__aeabi_dmul+0x164>
   d7878:	340c      	adds	r4, #12
   d787a:	dc1b      	bgt.n	d78b4 <__aeabi_dmul+0x134>
   d787c:	f104 0414 	add.w	r4, r4, #20
   d7880:	f1c4 0520 	rsb	r5, r4, #32
   d7884:	fa00 f305 	lsl.w	r3, r0, r5
   d7888:	fa20 f004 	lsr.w	r0, r0, r4
   d788c:	fa01 f205 	lsl.w	r2, r1, r5
   d7890:	ea40 0002 	orr.w	r0, r0, r2
   d7894:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7898:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d789c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d78a0:	fa21 f604 	lsr.w	r6, r1, r4
   d78a4:	eb42 0106 	adc.w	r1, r2, r6
   d78a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d78ac:	bf08      	it	eq
   d78ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d78b2:	bd70      	pop	{r4, r5, r6, pc}
   d78b4:	f1c4 040c 	rsb	r4, r4, #12
   d78b8:	f1c4 0520 	rsb	r5, r4, #32
   d78bc:	fa00 f304 	lsl.w	r3, r0, r4
   d78c0:	fa20 f005 	lsr.w	r0, r0, r5
   d78c4:	fa01 f204 	lsl.w	r2, r1, r4
   d78c8:	ea40 0002 	orr.w	r0, r0, r2
   d78cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d78d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d78d4:	f141 0100 	adc.w	r1, r1, #0
   d78d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d78dc:	bf08      	it	eq
   d78de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d78e2:	bd70      	pop	{r4, r5, r6, pc}
   d78e4:	f1c4 0520 	rsb	r5, r4, #32
   d78e8:	fa00 f205 	lsl.w	r2, r0, r5
   d78ec:	ea4e 0e02 	orr.w	lr, lr, r2
   d78f0:	fa20 f304 	lsr.w	r3, r0, r4
   d78f4:	fa01 f205 	lsl.w	r2, r1, r5
   d78f8:	ea43 0302 	orr.w	r3, r3, r2
   d78fc:	fa21 f004 	lsr.w	r0, r1, r4
   d7900:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7904:	fa21 f204 	lsr.w	r2, r1, r4
   d7908:	ea20 0002 	bic.w	r0, r0, r2
   d790c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7910:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7914:	bf08      	it	eq
   d7916:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d791a:	bd70      	pop	{r4, r5, r6, pc}
   d791c:	f094 0f00 	teq	r4, #0
   d7920:	d10f      	bne.n	d7942 <__aeabi_dmul+0x1c2>
   d7922:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7926:	0040      	lsls	r0, r0, #1
   d7928:	eb41 0101 	adc.w	r1, r1, r1
   d792c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7930:	bf08      	it	eq
   d7932:	3c01      	subeq	r4, #1
   d7934:	d0f7      	beq.n	d7926 <__aeabi_dmul+0x1a6>
   d7936:	ea41 0106 	orr.w	r1, r1, r6
   d793a:	f095 0f00 	teq	r5, #0
   d793e:	bf18      	it	ne
   d7940:	4770      	bxne	lr
   d7942:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7946:	0052      	lsls	r2, r2, #1
   d7948:	eb43 0303 	adc.w	r3, r3, r3
   d794c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7950:	bf08      	it	eq
   d7952:	3d01      	subeq	r5, #1
   d7954:	d0f7      	beq.n	d7946 <__aeabi_dmul+0x1c6>
   d7956:	ea43 0306 	orr.w	r3, r3, r6
   d795a:	4770      	bx	lr
   d795c:	ea94 0f0c 	teq	r4, ip
   d7960:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7964:	bf18      	it	ne
   d7966:	ea95 0f0c 	teqne	r5, ip
   d796a:	d00c      	beq.n	d7986 <__aeabi_dmul+0x206>
   d796c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7970:	bf18      	it	ne
   d7972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7976:	d1d1      	bne.n	d791c <__aeabi_dmul+0x19c>
   d7978:	ea81 0103 	eor.w	r1, r1, r3
   d797c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7980:	f04f 0000 	mov.w	r0, #0
   d7984:	bd70      	pop	{r4, r5, r6, pc}
   d7986:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d798a:	bf06      	itte	eq
   d798c:	4610      	moveq	r0, r2
   d798e:	4619      	moveq	r1, r3
   d7990:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7994:	d019      	beq.n	d79ca <__aeabi_dmul+0x24a>
   d7996:	ea94 0f0c 	teq	r4, ip
   d799a:	d102      	bne.n	d79a2 <__aeabi_dmul+0x222>
   d799c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d79a0:	d113      	bne.n	d79ca <__aeabi_dmul+0x24a>
   d79a2:	ea95 0f0c 	teq	r5, ip
   d79a6:	d105      	bne.n	d79b4 <__aeabi_dmul+0x234>
   d79a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d79ac:	bf1c      	itt	ne
   d79ae:	4610      	movne	r0, r2
   d79b0:	4619      	movne	r1, r3
   d79b2:	d10a      	bne.n	d79ca <__aeabi_dmul+0x24a>
   d79b4:	ea81 0103 	eor.w	r1, r1, r3
   d79b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d79bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d79c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d79c4:	f04f 0000 	mov.w	r0, #0
   d79c8:	bd70      	pop	{r4, r5, r6, pc}
   d79ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d79ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d79d2:	bd70      	pop	{r4, r5, r6, pc}

000d79d4 <__aeabi_ddiv>:
   d79d4:	b570      	push	{r4, r5, r6, lr}
   d79d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d79da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d79de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d79e2:	bf1d      	ittte	ne
   d79e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d79e8:	ea94 0f0c 	teqne	r4, ip
   d79ec:	ea95 0f0c 	teqne	r5, ip
   d79f0:	f000 f8a7 	bleq	d7b42 <__aeabi_ddiv+0x16e>
   d79f4:	eba4 0405 	sub.w	r4, r4, r5
   d79f8:	ea81 0e03 	eor.w	lr, r1, r3
   d79fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7a00:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7a04:	f000 8088 	beq.w	d7b18 <__aeabi_ddiv+0x144>
   d7a08:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7a0c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7a10:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7a14:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7a18:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7a1c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7a20:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7a24:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7a28:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7a2c:	429d      	cmp	r5, r3
   d7a2e:	bf08      	it	eq
   d7a30:	4296      	cmpeq	r6, r2
   d7a32:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7a36:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7a3a:	d202      	bcs.n	d7a42 <__aeabi_ddiv+0x6e>
   d7a3c:	085b      	lsrs	r3, r3, #1
   d7a3e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7a42:	1ab6      	subs	r6, r6, r2
   d7a44:	eb65 0503 	sbc.w	r5, r5, r3
   d7a48:	085b      	lsrs	r3, r3, #1
   d7a4a:	ea4f 0232 	mov.w	r2, r2, rrx
   d7a4e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7a52:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7a56:	ebb6 0e02 	subs.w	lr, r6, r2
   d7a5a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7a5e:	bf22      	ittt	cs
   d7a60:	1ab6      	subcs	r6, r6, r2
   d7a62:	4675      	movcs	r5, lr
   d7a64:	ea40 000c 	orrcs.w	r0, r0, ip
   d7a68:	085b      	lsrs	r3, r3, #1
   d7a6a:	ea4f 0232 	mov.w	r2, r2, rrx
   d7a6e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7a72:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7a76:	bf22      	ittt	cs
   d7a78:	1ab6      	subcs	r6, r6, r2
   d7a7a:	4675      	movcs	r5, lr
   d7a7c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7a80:	085b      	lsrs	r3, r3, #1
   d7a82:	ea4f 0232 	mov.w	r2, r2, rrx
   d7a86:	ebb6 0e02 	subs.w	lr, r6, r2
   d7a8a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7a8e:	bf22      	ittt	cs
   d7a90:	1ab6      	subcs	r6, r6, r2
   d7a92:	4675      	movcs	r5, lr
   d7a94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7a98:	085b      	lsrs	r3, r3, #1
   d7a9a:	ea4f 0232 	mov.w	r2, r2, rrx
   d7a9e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7aa2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7aa6:	bf22      	ittt	cs
   d7aa8:	1ab6      	subcs	r6, r6, r2
   d7aaa:	4675      	movcs	r5, lr
   d7aac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7ab0:	ea55 0e06 	orrs.w	lr, r5, r6
   d7ab4:	d018      	beq.n	d7ae8 <__aeabi_ddiv+0x114>
   d7ab6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d7aba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d7abe:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7ac2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7ac6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d7aca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d7ace:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7ad2:	d1c0      	bne.n	d7a56 <__aeabi_ddiv+0x82>
   d7ad4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7ad8:	d10b      	bne.n	d7af2 <__aeabi_ddiv+0x11e>
   d7ada:	ea41 0100 	orr.w	r1, r1, r0
   d7ade:	f04f 0000 	mov.w	r0, #0
   d7ae2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7ae6:	e7b6      	b.n	d7a56 <__aeabi_ddiv+0x82>
   d7ae8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7aec:	bf04      	itt	eq
   d7aee:	4301      	orreq	r1, r0
   d7af0:	2000      	moveq	r0, #0
   d7af2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7af6:	bf88      	it	hi
   d7af8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7afc:	f63f aeaf 	bhi.w	d785e <__aeabi_dmul+0xde>
   d7b00:	ebb5 0c03 	subs.w	ip, r5, r3
   d7b04:	bf04      	itt	eq
   d7b06:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7b0a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7b0e:	f150 0000 	adcs.w	r0, r0, #0
   d7b12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7b16:	bd70      	pop	{r4, r5, r6, pc}
   d7b18:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7b1c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7b20:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7b24:	bfc2      	ittt	gt
   d7b26:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7b2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7b2e:	bd70      	popgt	{r4, r5, r6, pc}
   d7b30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7b34:	f04f 0e00 	mov.w	lr, #0
   d7b38:	3c01      	subs	r4, #1
   d7b3a:	e690      	b.n	d785e <__aeabi_dmul+0xde>
   d7b3c:	ea45 0e06 	orr.w	lr, r5, r6
   d7b40:	e68d      	b.n	d785e <__aeabi_dmul+0xde>
   d7b42:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7b46:	ea94 0f0c 	teq	r4, ip
   d7b4a:	bf08      	it	eq
   d7b4c:	ea95 0f0c 	teqeq	r5, ip
   d7b50:	f43f af3b 	beq.w	d79ca <__aeabi_dmul+0x24a>
   d7b54:	ea94 0f0c 	teq	r4, ip
   d7b58:	d10a      	bne.n	d7b70 <__aeabi_ddiv+0x19c>
   d7b5a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7b5e:	f47f af34 	bne.w	d79ca <__aeabi_dmul+0x24a>
   d7b62:	ea95 0f0c 	teq	r5, ip
   d7b66:	f47f af25 	bne.w	d79b4 <__aeabi_dmul+0x234>
   d7b6a:	4610      	mov	r0, r2
   d7b6c:	4619      	mov	r1, r3
   d7b6e:	e72c      	b.n	d79ca <__aeabi_dmul+0x24a>
   d7b70:	ea95 0f0c 	teq	r5, ip
   d7b74:	d106      	bne.n	d7b84 <__aeabi_ddiv+0x1b0>
   d7b76:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7b7a:	f43f aefd 	beq.w	d7978 <__aeabi_dmul+0x1f8>
   d7b7e:	4610      	mov	r0, r2
   d7b80:	4619      	mov	r1, r3
   d7b82:	e722      	b.n	d79ca <__aeabi_dmul+0x24a>
   d7b84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7b88:	bf18      	it	ne
   d7b8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7b8e:	f47f aec5 	bne.w	d791c <__aeabi_dmul+0x19c>
   d7b92:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7b96:	f47f af0d 	bne.w	d79b4 <__aeabi_dmul+0x234>
   d7b9a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d7b9e:	f47f aeeb 	bne.w	d7978 <__aeabi_dmul+0x1f8>
   d7ba2:	e712      	b.n	d79ca <__aeabi_dmul+0x24a>

000d7ba4 <__gedf2>:
   d7ba4:	f04f 3cff 	mov.w	ip, #4294967295
   d7ba8:	e006      	b.n	d7bb8 <__cmpdf2+0x4>
   d7baa:	bf00      	nop

000d7bac <__ledf2>:
   d7bac:	f04f 0c01 	mov.w	ip, #1
   d7bb0:	e002      	b.n	d7bb8 <__cmpdf2+0x4>
   d7bb2:	bf00      	nop

000d7bb4 <__cmpdf2>:
   d7bb4:	f04f 0c01 	mov.w	ip, #1
   d7bb8:	f84d cd04 	str.w	ip, [sp, #-4]!
   d7bbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7bc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7bc4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7bc8:	bf18      	it	ne
   d7bca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d7bce:	d01b      	beq.n	d7c08 <__cmpdf2+0x54>
   d7bd0:	b001      	add	sp, #4
   d7bd2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d7bd6:	bf0c      	ite	eq
   d7bd8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d7bdc:	ea91 0f03 	teqne	r1, r3
   d7be0:	bf02      	ittt	eq
   d7be2:	ea90 0f02 	teqeq	r0, r2
   d7be6:	2000      	moveq	r0, #0
   d7be8:	4770      	bxeq	lr
   d7bea:	f110 0f00 	cmn.w	r0, #0
   d7bee:	ea91 0f03 	teq	r1, r3
   d7bf2:	bf58      	it	pl
   d7bf4:	4299      	cmppl	r1, r3
   d7bf6:	bf08      	it	eq
   d7bf8:	4290      	cmpeq	r0, r2
   d7bfa:	bf2c      	ite	cs
   d7bfc:	17d8      	asrcs	r0, r3, #31
   d7bfe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d7c02:	f040 0001 	orr.w	r0, r0, #1
   d7c06:	4770      	bx	lr
   d7c08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7c0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7c10:	d102      	bne.n	d7c18 <__cmpdf2+0x64>
   d7c12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7c16:	d107      	bne.n	d7c28 <__cmpdf2+0x74>
   d7c18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7c1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7c20:	d1d6      	bne.n	d7bd0 <__cmpdf2+0x1c>
   d7c22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7c26:	d0d3      	beq.n	d7bd0 <__cmpdf2+0x1c>
   d7c28:	f85d 0b04 	ldr.w	r0, [sp], #4
   d7c2c:	4770      	bx	lr
   d7c2e:	bf00      	nop

000d7c30 <__aeabi_cdrcmple>:
   d7c30:	4684      	mov	ip, r0
   d7c32:	4610      	mov	r0, r2
   d7c34:	4662      	mov	r2, ip
   d7c36:	468c      	mov	ip, r1
   d7c38:	4619      	mov	r1, r3
   d7c3a:	4663      	mov	r3, ip
   d7c3c:	e000      	b.n	d7c40 <__aeabi_cdcmpeq>
   d7c3e:	bf00      	nop

000d7c40 <__aeabi_cdcmpeq>:
   d7c40:	b501      	push	{r0, lr}
   d7c42:	f7ff ffb7 	bl	d7bb4 <__cmpdf2>
   d7c46:	2800      	cmp	r0, #0
   d7c48:	bf48      	it	mi
   d7c4a:	f110 0f00 	cmnmi.w	r0, #0
   d7c4e:	bd01      	pop	{r0, pc}

000d7c50 <__aeabi_dcmpeq>:
   d7c50:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7c54:	f7ff fff4 	bl	d7c40 <__aeabi_cdcmpeq>
   d7c58:	bf0c      	ite	eq
   d7c5a:	2001      	moveq	r0, #1
   d7c5c:	2000      	movne	r0, #0
   d7c5e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7c62:	bf00      	nop

000d7c64 <__aeabi_dcmplt>:
   d7c64:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7c68:	f7ff ffea 	bl	d7c40 <__aeabi_cdcmpeq>
   d7c6c:	bf34      	ite	cc
   d7c6e:	2001      	movcc	r0, #1
   d7c70:	2000      	movcs	r0, #0
   d7c72:	f85d fb08 	ldr.w	pc, [sp], #8
   d7c76:	bf00      	nop

000d7c78 <__aeabi_dcmple>:
   d7c78:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7c7c:	f7ff ffe0 	bl	d7c40 <__aeabi_cdcmpeq>
   d7c80:	bf94      	ite	ls
   d7c82:	2001      	movls	r0, #1
   d7c84:	2000      	movhi	r0, #0
   d7c86:	f85d fb08 	ldr.w	pc, [sp], #8
   d7c8a:	bf00      	nop

000d7c8c <__aeabi_dcmpge>:
   d7c8c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7c90:	f7ff ffce 	bl	d7c30 <__aeabi_cdrcmple>
   d7c94:	bf94      	ite	ls
   d7c96:	2001      	movls	r0, #1
   d7c98:	2000      	movhi	r0, #0
   d7c9a:	f85d fb08 	ldr.w	pc, [sp], #8
   d7c9e:	bf00      	nop

000d7ca0 <__aeabi_dcmpgt>:
   d7ca0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7ca4:	f7ff ffc4 	bl	d7c30 <__aeabi_cdrcmple>
   d7ca8:	bf34      	ite	cc
   d7caa:	2001      	movcc	r0, #1
   d7cac:	2000      	movcs	r0, #0
   d7cae:	f85d fb08 	ldr.w	pc, [sp], #8
   d7cb2:	bf00      	nop

000d7cb4 <__aeabi_d2uiz>:
   d7cb4:	004a      	lsls	r2, r1, #1
   d7cb6:	d211      	bcs.n	d7cdc <__aeabi_d2uiz+0x28>
   d7cb8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7cbc:	d211      	bcs.n	d7ce2 <__aeabi_d2uiz+0x2e>
   d7cbe:	d50d      	bpl.n	d7cdc <__aeabi_d2uiz+0x28>
   d7cc0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7cc4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7cc8:	d40e      	bmi.n	d7ce8 <__aeabi_d2uiz+0x34>
   d7cca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7cce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7cd2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7cd6:	fa23 f002 	lsr.w	r0, r3, r2
   d7cda:	4770      	bx	lr
   d7cdc:	f04f 0000 	mov.w	r0, #0
   d7ce0:	4770      	bx	lr
   d7ce2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7ce6:	d102      	bne.n	d7cee <__aeabi_d2uiz+0x3a>
   d7ce8:	f04f 30ff 	mov.w	r0, #4294967295
   d7cec:	4770      	bx	lr
   d7cee:	f04f 0000 	mov.w	r0, #0
   d7cf2:	4770      	bx	lr

000d7cf4 <__aeabi_d2f>:
   d7cf4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7cf8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7cfc:	bf24      	itt	cs
   d7cfe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7d02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7d06:	d90d      	bls.n	d7d24 <__aeabi_d2f+0x30>
   d7d08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7d0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7d10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7d14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7d18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7d1c:	bf08      	it	eq
   d7d1e:	f020 0001 	biceq.w	r0, r0, #1
   d7d22:	4770      	bx	lr
   d7d24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7d28:	d121      	bne.n	d7d6e <__aeabi_d2f+0x7a>
   d7d2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7d2e:	bfbc      	itt	lt
   d7d30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7d34:	4770      	bxlt	lr
   d7d36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7d3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d7d3e:	f1c2 0218 	rsb	r2, r2, #24
   d7d42:	f1c2 0c20 	rsb	ip, r2, #32
   d7d46:	fa10 f30c 	lsls.w	r3, r0, ip
   d7d4a:	fa20 f002 	lsr.w	r0, r0, r2
   d7d4e:	bf18      	it	ne
   d7d50:	f040 0001 	orrne.w	r0, r0, #1
   d7d54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7d58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7d5c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7d60:	ea40 000c 	orr.w	r0, r0, ip
   d7d64:	fa23 f302 	lsr.w	r3, r3, r2
   d7d68:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7d6c:	e7cc      	b.n	d7d08 <__aeabi_d2f+0x14>
   d7d6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7d72:	d107      	bne.n	d7d84 <__aeabi_d2f+0x90>
   d7d74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7d78:	bf1e      	ittt	ne
   d7d7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d7d7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7d82:	4770      	bxne	lr
   d7d84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7d88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7d8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7d90:	4770      	bx	lr
   d7d92:	bf00      	nop

000d7d94 <__aeabi_uldivmod>:
   d7d94:	b953      	cbnz	r3, d7dac <__aeabi_uldivmod+0x18>
   d7d96:	b94a      	cbnz	r2, d7dac <__aeabi_uldivmod+0x18>
   d7d98:	2900      	cmp	r1, #0
   d7d9a:	bf08      	it	eq
   d7d9c:	2800      	cmpeq	r0, #0
   d7d9e:	bf1c      	itt	ne
   d7da0:	f04f 31ff 	movne.w	r1, #4294967295
   d7da4:	f04f 30ff 	movne.w	r0, #4294967295
   d7da8:	f000 b9a2 	b.w	d80f0 <__aeabi_idiv0>
   d7dac:	f1ad 0c08 	sub.w	ip, sp, #8
   d7db0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d7db4:	f000 f82a 	bl	d7e0c <__udivmoddi4>
   d7db8:	f8dd e004 	ldr.w	lr, [sp, #4]
   d7dbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d7dc0:	b004      	add	sp, #16
   d7dc2:	4770      	bx	lr

000d7dc4 <__aeabi_d2ulz>:
   d7dc4:	b5d0      	push	{r4, r6, r7, lr}
   d7dc6:	2200      	movs	r2, #0
   d7dc8:	4b0e      	ldr	r3, [pc, #56]	; (d7e04 <__aeabi_d2ulz+0x40>)
   d7dca:	4606      	mov	r6, r0
   d7dcc:	460f      	mov	r7, r1
   d7dce:	f7ff fcd7 	bl	d7780 <__aeabi_dmul>
   d7dd2:	f7ff ff6f 	bl	d7cb4 <__aeabi_d2uiz>
   d7dd6:	4604      	mov	r4, r0
   d7dd8:	f7ff fc5c 	bl	d7694 <__aeabi_ui2d>
   d7ddc:	2200      	movs	r2, #0
   d7dde:	4b0a      	ldr	r3, [pc, #40]	; (d7e08 <__aeabi_d2ulz+0x44>)
   d7de0:	f7ff fcce 	bl	d7780 <__aeabi_dmul>
   d7de4:	4602      	mov	r2, r0
   d7de6:	460b      	mov	r3, r1
   d7de8:	4630      	mov	r0, r6
   d7dea:	4639      	mov	r1, r7
   d7dec:	f7ff fb14 	bl	d7418 <__aeabi_dsub>
   d7df0:	f7ff ff60 	bl	d7cb4 <__aeabi_d2uiz>
   d7df4:	4623      	mov	r3, r4
   d7df6:	2200      	movs	r2, #0
   d7df8:	ea42 0200 	orr.w	r2, r2, r0
   d7dfc:	4610      	mov	r0, r2
   d7dfe:	4619      	mov	r1, r3
   d7e00:	bdd0      	pop	{r4, r6, r7, pc}
   d7e02:	bf00      	nop
   d7e04:	3df00000 	.word	0x3df00000
   d7e08:	41f00000 	.word	0x41f00000

000d7e0c <__udivmoddi4>:
   d7e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7e10:	468c      	mov	ip, r1
   d7e12:	460e      	mov	r6, r1
   d7e14:	4604      	mov	r4, r0
   d7e16:	9d08      	ldr	r5, [sp, #32]
   d7e18:	2b00      	cmp	r3, #0
   d7e1a:	d150      	bne.n	d7ebe <__udivmoddi4+0xb2>
   d7e1c:	428a      	cmp	r2, r1
   d7e1e:	4617      	mov	r7, r2
   d7e20:	d96c      	bls.n	d7efc <__udivmoddi4+0xf0>
   d7e22:	fab2 fe82 	clz	lr, r2
   d7e26:	f1be 0f00 	cmp.w	lr, #0
   d7e2a:	d00b      	beq.n	d7e44 <__udivmoddi4+0x38>
   d7e2c:	f1ce 0420 	rsb	r4, lr, #32
   d7e30:	fa20 f404 	lsr.w	r4, r0, r4
   d7e34:	fa01 f60e 	lsl.w	r6, r1, lr
   d7e38:	ea44 0c06 	orr.w	ip, r4, r6
   d7e3c:	fa02 f70e 	lsl.w	r7, r2, lr
   d7e40:	fa00 f40e 	lsl.w	r4, r0, lr
   d7e44:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d7e48:	0c22      	lsrs	r2, r4, #16
   d7e4a:	fbbc f0f9 	udiv	r0, ip, r9
   d7e4e:	fa1f f887 	uxth.w	r8, r7
   d7e52:	fb09 c610 	mls	r6, r9, r0, ip
   d7e56:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d7e5a:	fb00 f308 	mul.w	r3, r0, r8
   d7e5e:	42b3      	cmp	r3, r6
   d7e60:	d909      	bls.n	d7e76 <__udivmoddi4+0x6a>
   d7e62:	19f6      	adds	r6, r6, r7
   d7e64:	f100 32ff 	add.w	r2, r0, #4294967295
   d7e68:	f080 8122 	bcs.w	d80b0 <__udivmoddi4+0x2a4>
   d7e6c:	42b3      	cmp	r3, r6
   d7e6e:	f240 811f 	bls.w	d80b0 <__udivmoddi4+0x2a4>
   d7e72:	3802      	subs	r0, #2
   d7e74:	443e      	add	r6, r7
   d7e76:	1af6      	subs	r6, r6, r3
   d7e78:	b2a2      	uxth	r2, r4
   d7e7a:	fbb6 f3f9 	udiv	r3, r6, r9
   d7e7e:	fb09 6613 	mls	r6, r9, r3, r6
   d7e82:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d7e86:	fb03 f808 	mul.w	r8, r3, r8
   d7e8a:	45a0      	cmp	r8, r4
   d7e8c:	d909      	bls.n	d7ea2 <__udivmoddi4+0x96>
   d7e8e:	19e4      	adds	r4, r4, r7
   d7e90:	f103 32ff 	add.w	r2, r3, #4294967295
   d7e94:	f080 810a 	bcs.w	d80ac <__udivmoddi4+0x2a0>
   d7e98:	45a0      	cmp	r8, r4
   d7e9a:	f240 8107 	bls.w	d80ac <__udivmoddi4+0x2a0>
   d7e9e:	3b02      	subs	r3, #2
   d7ea0:	443c      	add	r4, r7
   d7ea2:	ebc8 0404 	rsb	r4, r8, r4
   d7ea6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d7eaa:	2100      	movs	r1, #0
   d7eac:	2d00      	cmp	r5, #0
   d7eae:	d062      	beq.n	d7f76 <__udivmoddi4+0x16a>
   d7eb0:	fa24 f40e 	lsr.w	r4, r4, lr
   d7eb4:	2300      	movs	r3, #0
   d7eb6:	602c      	str	r4, [r5, #0]
   d7eb8:	606b      	str	r3, [r5, #4]
   d7eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7ebe:	428b      	cmp	r3, r1
   d7ec0:	d907      	bls.n	d7ed2 <__udivmoddi4+0xc6>
   d7ec2:	2d00      	cmp	r5, #0
   d7ec4:	d055      	beq.n	d7f72 <__udivmoddi4+0x166>
   d7ec6:	2100      	movs	r1, #0
   d7ec8:	e885 0041 	stmia.w	r5, {r0, r6}
   d7ecc:	4608      	mov	r0, r1
   d7ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7ed2:	fab3 f183 	clz	r1, r3
   d7ed6:	2900      	cmp	r1, #0
   d7ed8:	f040 8090 	bne.w	d7ffc <__udivmoddi4+0x1f0>
   d7edc:	42b3      	cmp	r3, r6
   d7ede:	d302      	bcc.n	d7ee6 <__udivmoddi4+0xda>
   d7ee0:	4282      	cmp	r2, r0
   d7ee2:	f200 80f8 	bhi.w	d80d6 <__udivmoddi4+0x2ca>
   d7ee6:	1a84      	subs	r4, r0, r2
   d7ee8:	eb66 0603 	sbc.w	r6, r6, r3
   d7eec:	2001      	movs	r0, #1
   d7eee:	46b4      	mov	ip, r6
   d7ef0:	2d00      	cmp	r5, #0
   d7ef2:	d040      	beq.n	d7f76 <__udivmoddi4+0x16a>
   d7ef4:	e885 1010 	stmia.w	r5, {r4, ip}
   d7ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7efc:	b912      	cbnz	r2, d7f04 <__udivmoddi4+0xf8>
   d7efe:	2701      	movs	r7, #1
   d7f00:	fbb7 f7f2 	udiv	r7, r7, r2
   d7f04:	fab7 fe87 	clz	lr, r7
   d7f08:	f1be 0f00 	cmp.w	lr, #0
   d7f0c:	d135      	bne.n	d7f7a <__udivmoddi4+0x16e>
   d7f0e:	1bf3      	subs	r3, r6, r7
   d7f10:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d7f14:	fa1f fc87 	uxth.w	ip, r7
   d7f18:	2101      	movs	r1, #1
   d7f1a:	fbb3 f0f8 	udiv	r0, r3, r8
   d7f1e:	0c22      	lsrs	r2, r4, #16
   d7f20:	fb08 3610 	mls	r6, r8, r0, r3
   d7f24:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d7f28:	fb0c f300 	mul.w	r3, ip, r0
   d7f2c:	42b3      	cmp	r3, r6
   d7f2e:	d907      	bls.n	d7f40 <__udivmoddi4+0x134>
   d7f30:	19f6      	adds	r6, r6, r7
   d7f32:	f100 32ff 	add.w	r2, r0, #4294967295
   d7f36:	d202      	bcs.n	d7f3e <__udivmoddi4+0x132>
   d7f38:	42b3      	cmp	r3, r6
   d7f3a:	f200 80ce 	bhi.w	d80da <__udivmoddi4+0x2ce>
   d7f3e:	4610      	mov	r0, r2
   d7f40:	1af6      	subs	r6, r6, r3
   d7f42:	b2a2      	uxth	r2, r4
   d7f44:	fbb6 f3f8 	udiv	r3, r6, r8
   d7f48:	fb08 6613 	mls	r6, r8, r3, r6
   d7f4c:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d7f50:	fb0c fc03 	mul.w	ip, ip, r3
   d7f54:	45a4      	cmp	ip, r4
   d7f56:	d907      	bls.n	d7f68 <__udivmoddi4+0x15c>
   d7f58:	19e4      	adds	r4, r4, r7
   d7f5a:	f103 32ff 	add.w	r2, r3, #4294967295
   d7f5e:	d202      	bcs.n	d7f66 <__udivmoddi4+0x15a>
   d7f60:	45a4      	cmp	ip, r4
   d7f62:	f200 80b5 	bhi.w	d80d0 <__udivmoddi4+0x2c4>
   d7f66:	4613      	mov	r3, r2
   d7f68:	ebcc 0404 	rsb	r4, ip, r4
   d7f6c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d7f70:	e79c      	b.n	d7eac <__udivmoddi4+0xa0>
   d7f72:	4629      	mov	r1, r5
   d7f74:	4628      	mov	r0, r5
   d7f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7f7a:	f1ce 0120 	rsb	r1, lr, #32
   d7f7e:	fa06 f30e 	lsl.w	r3, r6, lr
   d7f82:	fa07 f70e 	lsl.w	r7, r7, lr
   d7f86:	fa20 f901 	lsr.w	r9, r0, r1
   d7f8a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d7f8e:	40ce      	lsrs	r6, r1
   d7f90:	ea49 0903 	orr.w	r9, r9, r3
   d7f94:	fbb6 faf8 	udiv	sl, r6, r8
   d7f98:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d7f9c:	fb08 661a 	mls	r6, r8, sl, r6
   d7fa0:	fa1f fc87 	uxth.w	ip, r7
   d7fa4:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d7fa8:	fb0a f20c 	mul.w	r2, sl, ip
   d7fac:	429a      	cmp	r2, r3
   d7fae:	fa00 f40e 	lsl.w	r4, r0, lr
   d7fb2:	d90a      	bls.n	d7fca <__udivmoddi4+0x1be>
   d7fb4:	19db      	adds	r3, r3, r7
   d7fb6:	f10a 31ff 	add.w	r1, sl, #4294967295
   d7fba:	f080 8087 	bcs.w	d80cc <__udivmoddi4+0x2c0>
   d7fbe:	429a      	cmp	r2, r3
   d7fc0:	f240 8084 	bls.w	d80cc <__udivmoddi4+0x2c0>
   d7fc4:	f1aa 0a02 	sub.w	sl, sl, #2
   d7fc8:	443b      	add	r3, r7
   d7fca:	1a9b      	subs	r3, r3, r2
   d7fcc:	fa1f f989 	uxth.w	r9, r9
   d7fd0:	fbb3 f1f8 	udiv	r1, r3, r8
   d7fd4:	fb08 3311 	mls	r3, r8, r1, r3
   d7fd8:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d7fdc:	fb01 f60c 	mul.w	r6, r1, ip
   d7fe0:	429e      	cmp	r6, r3
   d7fe2:	d907      	bls.n	d7ff4 <__udivmoddi4+0x1e8>
   d7fe4:	19db      	adds	r3, r3, r7
   d7fe6:	f101 32ff 	add.w	r2, r1, #4294967295
   d7fea:	d26b      	bcs.n	d80c4 <__udivmoddi4+0x2b8>
   d7fec:	429e      	cmp	r6, r3
   d7fee:	d969      	bls.n	d80c4 <__udivmoddi4+0x2b8>
   d7ff0:	3902      	subs	r1, #2
   d7ff2:	443b      	add	r3, r7
   d7ff4:	1b9b      	subs	r3, r3, r6
   d7ff6:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d7ffa:	e78e      	b.n	d7f1a <__udivmoddi4+0x10e>
   d7ffc:	f1c1 0e20 	rsb	lr, r1, #32
   d8000:	fa22 f40e 	lsr.w	r4, r2, lr
   d8004:	408b      	lsls	r3, r1
   d8006:	4323      	orrs	r3, r4
   d8008:	fa20 f70e 	lsr.w	r7, r0, lr
   d800c:	fa06 f401 	lsl.w	r4, r6, r1
   d8010:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d8014:	fa26 f60e 	lsr.w	r6, r6, lr
   d8018:	433c      	orrs	r4, r7
   d801a:	fbb6 f9fc 	udiv	r9, r6, ip
   d801e:	0c27      	lsrs	r7, r4, #16
   d8020:	fb0c 6619 	mls	r6, ip, r9, r6
   d8024:	fa1f f883 	uxth.w	r8, r3
   d8028:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d802c:	fb09 f708 	mul.w	r7, r9, r8
   d8030:	42b7      	cmp	r7, r6
   d8032:	fa02 f201 	lsl.w	r2, r2, r1
   d8036:	fa00 fa01 	lsl.w	sl, r0, r1
   d803a:	d908      	bls.n	d804e <__udivmoddi4+0x242>
   d803c:	18f6      	adds	r6, r6, r3
   d803e:	f109 30ff 	add.w	r0, r9, #4294967295
   d8042:	d241      	bcs.n	d80c8 <__udivmoddi4+0x2bc>
   d8044:	42b7      	cmp	r7, r6
   d8046:	d93f      	bls.n	d80c8 <__udivmoddi4+0x2bc>
   d8048:	f1a9 0902 	sub.w	r9, r9, #2
   d804c:	441e      	add	r6, r3
   d804e:	1bf6      	subs	r6, r6, r7
   d8050:	b2a0      	uxth	r0, r4
   d8052:	fbb6 f4fc 	udiv	r4, r6, ip
   d8056:	fb0c 6614 	mls	r6, ip, r4, r6
   d805a:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d805e:	fb04 f808 	mul.w	r8, r4, r8
   d8062:	45b8      	cmp	r8, r7
   d8064:	d907      	bls.n	d8076 <__udivmoddi4+0x26a>
   d8066:	18ff      	adds	r7, r7, r3
   d8068:	f104 30ff 	add.w	r0, r4, #4294967295
   d806c:	d228      	bcs.n	d80c0 <__udivmoddi4+0x2b4>
   d806e:	45b8      	cmp	r8, r7
   d8070:	d926      	bls.n	d80c0 <__udivmoddi4+0x2b4>
   d8072:	3c02      	subs	r4, #2
   d8074:	441f      	add	r7, r3
   d8076:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d807a:	ebc8 0707 	rsb	r7, r8, r7
   d807e:	fba0 8902 	umull	r8, r9, r0, r2
   d8082:	454f      	cmp	r7, r9
   d8084:	4644      	mov	r4, r8
   d8086:	464e      	mov	r6, r9
   d8088:	d314      	bcc.n	d80b4 <__udivmoddi4+0x2a8>
   d808a:	d029      	beq.n	d80e0 <__udivmoddi4+0x2d4>
   d808c:	b365      	cbz	r5, d80e8 <__udivmoddi4+0x2dc>
   d808e:	ebba 0304 	subs.w	r3, sl, r4
   d8092:	eb67 0706 	sbc.w	r7, r7, r6
   d8096:	fa07 fe0e 	lsl.w	lr, r7, lr
   d809a:	40cb      	lsrs	r3, r1
   d809c:	40cf      	lsrs	r7, r1
   d809e:	ea4e 0303 	orr.w	r3, lr, r3
   d80a2:	e885 0088 	stmia.w	r5, {r3, r7}
   d80a6:	2100      	movs	r1, #0
   d80a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d80ac:	4613      	mov	r3, r2
   d80ae:	e6f8      	b.n	d7ea2 <__udivmoddi4+0x96>
   d80b0:	4610      	mov	r0, r2
   d80b2:	e6e0      	b.n	d7e76 <__udivmoddi4+0x6a>
   d80b4:	ebb8 0402 	subs.w	r4, r8, r2
   d80b8:	eb69 0603 	sbc.w	r6, r9, r3
   d80bc:	3801      	subs	r0, #1
   d80be:	e7e5      	b.n	d808c <__udivmoddi4+0x280>
   d80c0:	4604      	mov	r4, r0
   d80c2:	e7d8      	b.n	d8076 <__udivmoddi4+0x26a>
   d80c4:	4611      	mov	r1, r2
   d80c6:	e795      	b.n	d7ff4 <__udivmoddi4+0x1e8>
   d80c8:	4681      	mov	r9, r0
   d80ca:	e7c0      	b.n	d804e <__udivmoddi4+0x242>
   d80cc:	468a      	mov	sl, r1
   d80ce:	e77c      	b.n	d7fca <__udivmoddi4+0x1be>
   d80d0:	3b02      	subs	r3, #2
   d80d2:	443c      	add	r4, r7
   d80d4:	e748      	b.n	d7f68 <__udivmoddi4+0x15c>
   d80d6:	4608      	mov	r0, r1
   d80d8:	e70a      	b.n	d7ef0 <__udivmoddi4+0xe4>
   d80da:	3802      	subs	r0, #2
   d80dc:	443e      	add	r6, r7
   d80de:	e72f      	b.n	d7f40 <__udivmoddi4+0x134>
   d80e0:	45c2      	cmp	sl, r8
   d80e2:	d3e7      	bcc.n	d80b4 <__udivmoddi4+0x2a8>
   d80e4:	463e      	mov	r6, r7
   d80e6:	e7d1      	b.n	d808c <__udivmoddi4+0x280>
   d80e8:	4629      	mov	r1, r5
   d80ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d80ee:	bf00      	nop

000d80f0 <__aeabi_idiv0>:
   d80f0:	4770      	bx	lr
   d80f2:	bf00      	nop

000d80f4 <__cxa_atexit>:
   d80f4:	b510      	push	{r4, lr}
   d80f6:	4c05      	ldr	r4, [pc, #20]	; (d810c <__cxa_atexit+0x18>)
   d80f8:	4613      	mov	r3, r2
   d80fa:	b12c      	cbz	r4, d8108 <__cxa_atexit+0x14>
   d80fc:	460a      	mov	r2, r1
   d80fe:	4601      	mov	r1, r0
   d8100:	2002      	movs	r0, #2
   d8102:	f3af 8000 	nop.w
   d8106:	bd10      	pop	{r4, pc}
   d8108:	4620      	mov	r0, r4
   d810a:	bd10      	pop	{r4, pc}
   d810c:	00000000 	.word	0x00000000

000d8110 <memcpy>:
   d8110:	b510      	push	{r4, lr}
   d8112:	1e43      	subs	r3, r0, #1
   d8114:	440a      	add	r2, r1
   d8116:	4291      	cmp	r1, r2
   d8118:	d004      	beq.n	d8124 <memcpy+0x14>
   d811a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d811e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8122:	e7f8      	b.n	d8116 <memcpy+0x6>
   d8124:	bd10      	pop	{r4, pc}

000d8126 <memset>:
   d8126:	4402      	add	r2, r0
   d8128:	4603      	mov	r3, r0
   d812a:	4293      	cmp	r3, r2
   d812c:	d002      	beq.n	d8134 <memset+0xe>
   d812e:	f803 1b01 	strb.w	r1, [r3], #1
   d8132:	e7fa      	b.n	d812a <memset+0x4>
   d8134:	4770      	bx	lr
	...

000d8138 <srand>:
   d8138:	b538      	push	{r3, r4, r5, lr}
   d813a:	4b12      	ldr	r3, [pc, #72]	; (d8184 <srand+0x4c>)
   d813c:	681c      	ldr	r4, [r3, #0]
   d813e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8140:	4605      	mov	r5, r0
   d8142:	b9d3      	cbnz	r3, d817a <srand+0x42>
   d8144:	2018      	movs	r0, #24
   d8146:	f7fd fce9 	bl	d5b1c <malloc>
   d814a:	f243 330e 	movw	r3, #13070	; 0x330e
   d814e:	63a0      	str	r0, [r4, #56]	; 0x38
   d8150:	8003      	strh	r3, [r0, #0]
   d8152:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d8156:	8043      	strh	r3, [r0, #2]
   d8158:	f241 2334 	movw	r3, #4660	; 0x1234
   d815c:	8083      	strh	r3, [r0, #4]
   d815e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8162:	80c3      	strh	r3, [r0, #6]
   d8164:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d8168:	8103      	strh	r3, [r0, #8]
   d816a:	2305      	movs	r3, #5
   d816c:	8143      	strh	r3, [r0, #10]
   d816e:	230b      	movs	r3, #11
   d8170:	8183      	strh	r3, [r0, #12]
   d8172:	2201      	movs	r2, #1
   d8174:	2300      	movs	r3, #0
   d8176:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d817a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d817c:	2200      	movs	r2, #0
   d817e:	611d      	str	r5, [r3, #16]
   d8180:	615a      	str	r2, [r3, #20]
   d8182:	bd38      	pop	{r3, r4, r5, pc}
   d8184:	2003e404 	.word	0x2003e404

000d8188 <strlen>:
   d8188:	4603      	mov	r3, r0
   d818a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d818e:	2a00      	cmp	r2, #0
   d8190:	d1fb      	bne.n	d818a <strlen+0x2>
   d8192:	1a18      	subs	r0, r3, r0
   d8194:	3801      	subs	r0, #1
   d8196:	4770      	bx	lr

000d8198 <dynalib_user>:
   d8198:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d81a8:	0000 0000 6870 746f 6e6f 6544 0076 7061     ....photonDev.ap
   d81b8:	7770 7464 5600 7265 2079 6557 0074 6556     pwdt.Very Wet.Ve
   d81c8:	7972 4420 7972 5400 6d65 0070 6f53 6c69     ry Dry.Temp.Soil
   d81d8:	5500 4956 7864 4600 6f6c 0077 6156 766c     .UVIdx.Flow.Valv
   d81e8:	0065 6574 7473 6d2e 736f 7571 7469 6f74     e.test.mosquitto
   d81f8:	6f2e 6772 0000 4d04 5451 0454 0600 514d     .org...MQTT...MQ
   d8208:	7349 7064 0003 0000                         Isdp....

000d8210 <_ZTVN5spark13EthernetClassE>:
	...
   d8218:	5bcb 000d 5bc1 000d 5bb7 000d 5bad 000d     .[...[...[...[..
   d8228:	5ba1 000d 5b95 000d 5b89 000d 5b81 000d     .[...[...[...[..
   d8238:	5b77 000d 5b6d 000d 6e61 000d 6162 6475     w[..m[..an..baud
   d8248:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d8258:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d8268:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d8278:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d8288:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d8298:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d82a8:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d82b8:	7070 2500 3130 7530 0020 205d 2c00 0020     pp.%010u .] ., .
   d82c8:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d82d8:	6925 6400 7465 6961 736c 3d20 0020 0a0d     %i.details = ...
   d82e8:	6600 6c00 006e 6e66 6300 646f 0065 6564     .f.ln.fn.code.de
   d82f8:	6174 6c69 6e00 6e6f 0065 7274 6361 0065     tail.none.trace.
   d8308:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
   d8318:	6170 696e 0063 6c61 006c 005a 2b25 3330     panic.all.Z.%+03
   d8328:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
   d8338:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
   d8348:	656d 0000                                   me..

000d834c <_ZTV9IPAddress>:
	...
   d8354:	61b9 000d 61a9 000d 61ab 000d               .a...a...a..

000d8360 <_ZTV9USBSerial>:
	...
   d8368:	62d1 000d 6321 000d 632f 000d 5f91 000d     .b..!c../c..._..
   d8378:	630d 000d 62d3 000d 62e9 000d 631b 000d     .c...b...b...c..
   d8388:	62ff 000d 62cd 000d                         .b...b..

000d8390 <_ZTV11USARTSerial>:
	...
   d8398:	6431 000d 6481 000d 648f 000d 5f91 000d     1d...d...d..._..
   d83a8:	6445 000d 6467 000d 6453 000d 647b 000d     Ed..gd..Sd..{d..
   d83b8:	6433 000d 6437 000d                         3d..7d..

000d83c0 <_ZTV7TwoWire>:
	...
   d83c8:	6569 000d 65b3 000d 658b 000d 656b 000d     ie...e...e..ke..
   d83d8:	6593 000d 659b 000d 65a3 000d 65ab 000d     .e...e...e...e..

000d83e8 <_ZTVN5spark9MeshClassE>:
	...
   d83f0:	66cf 000d 66c5 000d 66bb 000d 66b1 000d     .f...f...f...f..
   d8400:	66a5 000d 6699 000d 668d 000d 6685 000d     .f...f...f...f..
   d8410:	667b 000d 6671 000d 6e61 000d               {f..qf..an..

000d841c <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d8424:	6875 000d 687b 000d 6d63 000d 6889 000d     uh..{h..cm...h..
   d8434:	6877 000d                                   wh..

000d8438 <_ZTV9TCPClient>:
	...
   d8440:	4e29 000d 4e5d 000d 67ed 000d 6807 000d     )N..]N...g...h..
   d8450:	6c09 000d 695b 000d 692d 000d 6831 000d     .l..[i..-i..1h..
   d8460:	6ae5 000d 69e1 000d 698f 000d 6bd9 000d     .j...i...i...k..
   d8470:	6833 000d 686b 000d 6819 000d 688d 000d     3h..kh...h...h..
   d8480:	690d 000d 6977 6972 676e 7200 6365 2076     .i..wiring.recv 
   d8490:	7265 6f72 2072 203d 6425 0000               error = %d..

000d849c <_ZTVN5spark9WiFiClassE>:
	...
   d84a4:	6dd9 000d 6dcf 000d 6dc5 000d 6d7b 000d     .m...m...m..{m..
   d84b4:	6db9 000d 6dad 000d 6da1 000d 6d99 000d     .m...m...m...m..
   d84c4:	6d8f 000d 6d85 000d 6e61 000d               .m...m..an..

000d84d0 <_ZTVN5spark12NetworkClassE>:
	...
   d84d8:	6df9 000d 6e03 000d 6e0d 000d 6e17 000d     .m...n...n...n..
   d84e8:	6e21 000d 6e2d 000d 6e39 000d 6e45 000d     !n..-n..9n..En..
   d84f8:	6e4d 000d 6e57 000d 6e61 000d               Mn..Wn..an..

000d8504 <_ZSt7nothrow>:
   d8504:	0000 0000                                   ....

000d8508 <__sf_fake_stdin>:
	...

000d8528 <__sf_fake_stdout>:
	...

000d8548 <__sf_fake_stderr>:
	...
   d8568:	0043                                        C.

000d856a <link_const_variable_data_end>:
	...

000d856c <link_constructors_location>:
   d856c:	000d44e5 	.word	0x000d44e5
   d8570:	000d4979 	.word	0x000d4979
   d8574:	000d4989 	.word	0x000d4989
   d8578:	000d4bc1 	.word	0x000d4bc1
   d857c:	000d4e25 	.word	0x000d4e25
   d8580:	000d5611 	.word	0x000d5611
   d8584:	000d5bd5 	.word	0x000d5bd5
   d8588:	000d5c31 	.word	0x000d5c31
   d858c:	000d5f69 	.word	0x000d5f69
   d8590:	000d6025 	.word	0x000d6025
   d8594:	000d6035 	.word	0x000d6035
   d8598:	000d607d 	.word	0x000d607d
   d859c:	000d679d 	.word	0x000d679d
   d85a0:	000d6de5 	.word	0x000d6de5
   d85a4:	000d6f2d 	.word	0x000d6f2d
   d85a8:	000d7181 	.word	0x000d7181
   d85ac:	000d7205 	.word	0x000d7205
   d85b0:	000d72c9 	.word	0x000d72c9
   d85b4:	000d738d 	.word	0x000d738d

000d85b8 <link_constructors_end>:
	...
